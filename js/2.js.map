{"version":3,"sources":["webpack:///./src/assets/favicon.ico","webpack:///./src/modules/core/constants.ts","webpack:///./src/modules/simulation/helpers/allCombinations.ts","webpack:///./src/common/math/classes/Transform.ts","webpack:///./src/modules/storage/classes/LocalStore.ts","webpack:///./src/modules/saving/constants.ts","webpack:///./src/modules/toasts/components/ToastContent.tsx","webpack:///./src/modules/toasts/helpers/createToastArguments.tsx","webpack:///./src/modules/internalisation/subjects/currentLanguageSubject.ts","webpack:///./src/modules/errors/classes/SimulationError.ts","webpack:///./src/modules/internalisation/constants.ts","webpack:///./src/modules/internalisation/translations/english.ts","webpack:///./src/modules/internalisation/translations/romanian.ts","webpack:///./src/modules/internalisation/translations/nederlands.ts","webpack:///./src/modules/internalisation/stores/currentLanguage.ts","webpack:///./src/modules/saving/stores/templateStore.ts","webpack:///./src/modules/simulation/classes/Pin.ts","webpack:///./src/modules/simulation/stores/idStore.ts","webpack:///./src/modules/activation/helpers/toFunction.ts","webpack:///./src/modules/simulation/helpers/getGateTimePipes.ts","webpack:///./src/modules/keybindings/classes/KeyboardInput.ts","webpack:///./src/modules/simulationRenderer/constants.ts","webpack:///./src/modules/simulationRenderer/stores/imageStore.ts","webpack:///./src/modules/simulation/constants.ts","webpack:///./src/modules/logic-gates/helpers/completeTemplate.ts","webpack:///./src/modules/simulation/classes/Wire.ts","webpack:///./src/modules/simulationRenderer/helpers/wireConnectedToGate.ts","webpack:///./src/modules/simulationRenderer/helpers/deleteGate.ts","webpack:///./src/modules/simulation-actions/helpers/clean.ts","webpack:///./src/modules/simulation/classes/Gate.ts","webpack:///./src/modules/simulationRenderer/classes/Camera.ts","webpack:///./src/modules/simulation/classes/GateStorage.ts","webpack:///./src/modules/simulation/classes/Simulation.ts","webpack:///./src/modules/saving/helpers/fromState.ts","webpack:///./src/modules/saving/helpers/getState.ts","webpack:///./src/modules/integrated-circuits/helpers/compileIc.ts","webpack:///./src/modules/integrated-circuits/helpers/simulationIoCount.ts","webpack:///./src/modules/saving/helpers/initSimulation.ts","webpack:///./src/modules/saving/helpers/cloneState.ts","webpack:///./src/modules/saving/stores/saveStore.ts","webpack:///./src/modules/saving/stores/currentStore.ts","webpack:///./src/modules/core/subjects/rendererSubject.ts","webpack:///./src/modules/saving/helpers/dumpSimulation.ts","webpack:///./src/modules/saving/helpers/switchTo.ts","webpack:///./src/modules/internalisation/helpers/useLanguage.ts","webpack:///./src/modules/logic-gates/helpers/getRendererSafely.ts","webpack:///./src/modules/core/components/OpenSimulation.tsx","webpack:///./src/modules/input/stores/InputStore.ts","webpack:///./src/modules/create-simulation/stores/CreateSimulationStore.ts","webpack:///./src/modules/create-simulation/helpers/handleCreating.ts","webpack:///./src/modules/core/components/CreateSimulationButton.tsx","webpack:///./src/modules/logic-gates/subjects/LogicGateList.ts","webpack:///./src/modules/vector2/helpers/basic.ts","webpack:///./src/modules/internalisation/helpers/randomItem.ts","webpack:///./src/modules/logic-gates/constants.ts","webpack:///./src/modules/logic-gates/helpers/getTemplateSafely.ts","webpack:///./src/modules/logic-gates/components/LogicGateModal.tsx","webpack:///./src/modules/simulation/helpers/addGate.ts","webpack:///./src/modules/core/components/LogicGates.tsx","webpack:///./src/modules/internalisation/helpers/nextLanguage.ts","webpack:///./src/modules/core/components/Language.tsx","webpack:///./src/modules/simulation-actions/helpers/createRendererActions.ts","webpack:///./src/modules/simulation-actions/helpers/createActionConfig.ts","webpack:///./src/modules/simulationRenderer/helpers/idIsSelected.ts","webpack:///./src/common/lang/arrays/helpers/removeElement.ts","webpack:///./src/modules/simulation-actions/constants.ts","webpack:///./src/modules/saving/helpers/save.ts","webpack:///./src/modules/simulation-actions/helpers/refresh.ts","webpack:///./src/modules/simulation-actions/helpers/undo.ts","webpack:///./src/modules/simulation-actions/helpers/deleteSimulation.ts","webpack:///./src/modules/simulation-actions/helpers/selectAll.ts","webpack:///./src/modules/simulation-actions/helpers/deleteSelection.ts","webpack:///./src/modules/simulation-actions/components/SimulationActions.tsx","webpack:///./src/modules/core/components/Sidebar.tsx","webpack:///./src/modules/screen/helpers/getWidth.ts","webpack:///./src/modules/screen/helpers/Screen.ts","webpack:///./src/modules/core/components/FluidCanvas.tsx","webpack:///./src/common/math/helpers/pointInSquare.ts","webpack:///./src/modules/vector2/helpers/rotate.ts","webpack:///./src/modules/simulationRenderer/helpers/pinPosition.ts","webpack:///./src/modules/simulationRenderer/helpers/scaleCanvas.ts","webpack:///./src/modules/modals/helpers/modalIsOpen.ts","webpack:///./src/modules/simulation/helpers/deleteWire.ts","webpack:///./src/common/lang/arrays/helpers/setToArray.ts","webpack:///./src/modules/simulationRenderer/helpers/aabb.ts","webpack:///./src/modules/simulationRenderer/helpers/gatesInSelection.ts","webpack:///./src/modules/simulationRenderer/classes/SimulationRenderer.ts","webpack:///./src/common/math/helpers/pointInCircle.ts","webpack:///./src/modules/simulation/helpers/clamp.ts","webpack:///./src/common/canvas/helpers/useTransform.ts","webpack:///./src/modules/simulationRenderer/helpers/pinFill.ts","webpack:///./src/modules/simulationRenderer/helpers/renderGate.ts","webpack:///./src/modules/simulationRenderer/helpers/renderPins.ts","webpack:///./src/common/canvas/helpers/drawRoundedImage.ts","webpack:///./src/common/canvas/helpers/drawRoundedSquare.ts","webpack:///./src/modules/simulationRenderer/helpers/renderWires.ts","webpack:///./src/modules/simulationRenderer/helpers/wireRadius.ts","webpack:///./src/modules/simulationRenderer/helpers/renderSimulation.ts","webpack:///./src/common/canvas/helpers/clearCanvas.ts","webpack:///./src/modules/simulationRenderer/helpers/renderClickedPins.ts","webpack:///./src/modules/simulationRenderer/helpers/renderSelectedArea.ts","webpack:///./src/modules/core/subjects/loadedSubject.ts","webpack:///./src/modules/core/components/Canvas.tsx","webpack:///./src/modules/create-simulation/components/CreateSimulation.tsx","webpack:///./src/modules/input/components/Input.tsx","webpack:///./src/modules/core/components/Head.tsx","webpack:///./src/modules/core/components/App.tsx","webpack:///./src/modules/errors/helpers/handleErrors.ts","webpack:///./src/modules/keybindings/helpers/initialiseKeyBindings.ts","webpack:///./src/modules/saving/helpers/initBaseTemplates.ts","webpack:///./src/main.tsx","webpack:///./src/modules/core/helpers/logWelcome.ts","webpack:///./src/assets/and_gate.jpg","webpack:///./src/assets/or_gate.png","webpack:///./src/assets/nor_gate.png","webpack:///./src/assets/xor_gate.png"],"names":["module","exports","__webpack_require__","p","theme","createMuiTheme","palette","type","primary","deepPurple","secondary","red","icons","simulationMode","project","ic","allCombinations","first","second","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","item","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","element","regeneratorRuntime","wrap","_context","prev","next","undefined","Symbol","iterator","done","value","t0","finish","t1","stop","_marked","Transform","position","arguments","length","scale","rotation","_classCallCheck","this","key","concat","_toConsumableArray","_this","Array","from","map","combination","x","height","y","width","points","getPoints","edges","index","push","get","set","Math","min","max","LocalStore","CacheInstancesByKey","Infinity","_dec","_class","name","LocalStore_classCallCheck","localStorage","getItem","setItem","raw","JSON","parse","Error","Object","keys","getAll","mark","ls","abrupt","finalKey","finalValue","currentData","stringify","all","baseTemplates","metadata","material","require","code","activation","pins","inputs","count","info","onClick","integration","input","shape","radius","output","outputs","baseSave","camera","transform","simulation","gates","mode","wires","ToastContent","props","react_default","a","createElement","className","Icon","id","icon","message","createToastArguments","toasts_components_ToastContent","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","currentLanguageSubject","BehaviorSubject","SimulationError","_Error","mesagge","SimulationError_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_inherits","_wrapNativeSuper","translations","_defineProperty","_translations","english","language","sidebar","createSimulation","logicGates","openSimulation","question","options","actions","save","clean","refresh","undo","select all","delete selection","delete simulation","messages","createdSimulation","switchedToSimulation","savedSimulation","compiledIc","cleaned","refreshed","undone","deletedSimulation","allSupportedLanguages","CurrentLanguageLocalStore","CurrentLanguage","getTranslation","templateStore","Pin","gate","Pin_classCallCheck","state","pairs","Set","subscriptions","pin","subscribe","remember","add","rawSubscription","data","subscription","unsubscribe","err","filter","store","idStore","generate","current","toFunction","source","_len","args","_key","join","Function","getGateTimePipes","template","pipes","debounce","enabled","debounceTime","time","throttle","throttleTime","KeyboardInput","KeyboardInput_classCallCheck","pressed","valueChanges","Subject","params","fromEvent","document","e","last","i","keycode","indexOf","splice","forEach","complete","defaultSimulationRendererOptions","dnd","PI","connectionLength","pinRadius","pinStrokeColor","pinStrokeWidth","pinFill","open","closed","gateStroke","active","normal","temporaryWireColor","curvePointOffset","spawning","spawnOffset","selecting","fill","stroke","imageQuality","mouseButtons","shiftInput","ImageStore","memory","Map","url","has","image","imageStore_construct","Image","imageStore_toConsumableArray","src","toImage","DefaultGateTemplate","variable","rounded","initialisation","allowed","tags","completeTemplate","merge","arrayMerge","b","Wire","start","end","Wire_classCallCheck","size","addPair","removePair","wireConnectedToGate","wire","allWiresConnectedToGate","deleteGate","node","dispose","cleanSimulation","toDelete","_i","_toDelete","Gate","Gate_classCallCheck","_pins","functions","ghostSimulation","ghostWires","isIntegrated","env","generatePins","_pin$state","pipe","apply","Gate_toConsumableArray","update","init","includes","_this$ghostSimulation","saveStore","fromSimulationState","sortByPosition","sort","wrapPins","flat","wrappedInputs","wrappedOutputs","getContext","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","context","_this2","color","enviroment","result","total","Camera","Camera_classCallCheck","GateStorage","GateStorage_classCallCheck","hashMap","head","LruCacheNode","tail","previous","addToHead","_Symbol$iterator","Simulation","Simulation_classCallCheck","_gates","fromTransformState","gateState","wireState","startGateNode","endGateNode","to","getTransformState","getWireLimit","getWireState","getSimulationState","getGateState","getRendererState","renderer","compileIc","translation","cleanState","simulationInputCount","simulationOutputCount","toast","compileIc_toConsumableArray","initSimulation","cloneState","success","initSimulation_toConsumableArray","currentStore","rendererSubject","dumpSimulation","lastMousePosition","clearSelection","selectedPins","switchTo","simulationName","reloadSave","switchTo_toConsumableArray","useTranslation","currentLanguage","useObservable","getRendererSafely","allSimulationSubject","updateSimulationList","OpenSimulation","_useState2","_slicedToArray","useState","anchorEl","setAnchorEl","simulations","handleClose","Fragment","ListItem","button","event","currentTarget","ListItemIcon","ListItemText","Menu","keepMounted","Boolean","onClose","simulationData","MenuItem","Typography","style","flexGrow","_get","InputStore","_callee","text","action","take","toPromise","sent","close","_x","_create","CreateSimulationStore","create","CreateSimulationStore_asyncToGenerator","handleCreating","_ref","handleCreating_asyncToGenerator","CreateSimulationButton","LogicGateList","vectors","others","slice","othersSum","basic_toConsumableArray","invert","vector","val","sqrt","pow","multiply","scalar","relativeTo","other","randomItem","arr","floor","random","gateIcons","base","imported","integrated","getTemplateSafely","LogicGateModal","openSnapshot","templateName","gateScale","origin","Screen","center","scalarOffset","offset","spawnCount","addGate","target","href","stopPropagation","LogicGates","nextLanguage","Language","List","actionToMessageMap","createRendererAction","callback","messageName","createRendererActions_toConsumableArray","actionIcons","createActionConfig","keybinding","run","createActionConfig_defineProperty","idIsSelected","gateId","allSelectedIds","addIdToSelection","selectedGates","permanent","temporary","removeElement","pop","SidebarActions","_objectSpread","save_toConsumableArray","loadSave","switchTarget","getSelected","SimulationActions","SimulationActions_slicedToArray","values","useStyles","makeStyles","createStyles","root","display","zIndex","drawer","flexShrink","drawerPaper","background","padding","list","Sidebar","classes","Drawer","variant","anchor","paper","component","components_CreateSimulationButton","components_OpenSimulation","components_LogicGates","components_SimulationActions","core_components_Language","getWidth","window","innerWidth","innerHeight","resize","currentWidth","currentHeight","mouseEventHandler","clientX","clientY","getEventInfo","FluidCanvas","forwardRef","ref","onMouseDown","mouseDownOuput","onMouseUp","mouseUpOutput","onMouseMove","mouseMoveOutput","pointInSquare","point","square","minX","maxX","minY","maxY","cos","sin","rotateAroundVector","around","angle","rotated","rotate","calculatePinY","calculatePinStart","direction","Number","calculatePinx","getPinPosition","pinX","pinY","zoomLimits","absoluteMousePosition","modalIsOpen","logicGateModalIsOpen","deleteWire","setToArray","aabbCollisionDetection","rect1","rect2","gatesInSelection","selectedArea","SimulationRenderer","SimulationRenderer_classCallCheck","mouseDownOutput","wheelOutput","mouseState","worldPosition","toWordPostition","_gates$index","gateNode","moveOnTop","_loop","find","v","wrapper","_ret","SimulationRenderer_typeof","selected","clear","scaledOffset","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","addEventListener","sign","zoom","mouseFraction","newScale","delta","preventDefault","deltaY","abs","high","low","_this3","SimulationRenderer_toConsumableArray","useTransform","ctx","translate","useTransform_toConsumableArray","renderGate","_renderer$options$gat","relativeTransform","strokeStyle","lineWidth","fillStyle","beginPath","moveTo","lineTo","ellipse","restore","renderPins","r","renderingParameters","quadraticCurveTo","closePath","clip","drawImage","renderWires","startPosition","endPosition","centerY","controlPostions","wireRadius","lineCap","renderWires_toConsumableArray","bezierCurveTo","baseFactor","factors","radiuses","centerPosition","arc","renderSimulation","clearRect","clearCanvas","renderSimulation_toConsumableArray","renderClickedPins_toConsumableArray","renderClickedPins","rect","renderSelectedArea_toConsumableArray","getBoundingBox","renderSelectedArea","loadSubject","Canvas","Canvas_classCallCheck","Canvas_possibleConstructorReturn","Canvas_getPrototypeOf","canvasRef","createRef","renderingContext","loop","setDraw","Component","updateWheelListener","components_FluidCanvas","createSimulationOptions","CreateSimulation","option","Input","autoFocus","onChange","onKeyDown","keyCode","Head","Helmet_default","rel","content","App","components_Head","CssBaseline","ThemeProvider","muiTheme","components_Canvas","components_Sidebar","create_simulation_components_CreateSimulation","input_components_Input","logic_gates_components_LogicGateModal","react_toastify","newestOnTop","rtl","listeners","keyBindings","initKeyBindings","bindings","allKeys","binding","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","keyBinding","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","maxIndex","initBaseTemplates","main_asyncToGenerator","console","onerror","c","d","error","toString","handleErrors_toConsumableArray","log","split","s","trim","render","core_components_App","getElementById"],"mappings":"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","file":"js/2.js","sourcesContent":["module.exports = __webpack_public_path__ + \"2d45038d1cbe2213570135dd0a624d73.ico\";","import { createMuiTheme } from '@material-ui/core/styles'\r\nimport { red, deepPurple } from '@material-ui/core/colors'\r\nimport { simulationMode } from '../saving/types/SimulationSave'\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        primary: deepPurple,\r\n        secondary: red\r\n    }\r\n})\r\n\r\n/**\r\n * Used to get intellisense from visual studio code\r\n */\r\nexport interface IconInterface {\r\n    simulationMode: Record<simulationMode, string>\r\n}\r\n\r\n/**\r\n * Stores the names of icons reuseed truogh the app\r\n */\r\nexport const icons: IconInterface = {\r\n    simulationMode: {\r\n        project: 'gamepad',\r\n        ic: 'memory'\r\n    }\r\n}\r\n","export function* allCombinations<T>(first: T[], second: T[]): Iterable<[T, T]> {\r\n    for (const item of first) {\r\n        // TODO: change name\r\n        for (const element of second) {\r\n            yield [item, element]\r\n        }\r\n    }\r\n}\r\n","import { allCombinations } from '../../../modules/simulation/helpers/allCombinations'\r\nimport { rotateAroundVector } from '../../../modules/vector2/helpers/rotate'\r\n\r\nexport class Transform {\r\n    public constructor(\r\n        public position: vector2 = [0, 0],\r\n        public scale: vector2 = [1, 1],\r\n        public rotation = 0\r\n    ) {}\r\n\r\n    public getBoundingBox() {\r\n        const result = [...this.position, ...this.scale] as vector4\r\n\r\n        return result\r\n    }\r\n\r\n    public getPoints() {\r\n        const combinations = Array.from(allCombinations([0, 1], [0, 1]))\r\n\r\n        // those are not in the right order\r\n        const points = combinations.map(combination => [\r\n            this.x + this.height * combination[0],\r\n            this.y + this.width * combination[1]\r\n        ])\r\n\r\n        return points as vector2[]\r\n    }\r\n\r\n    public getEdges() {\r\n        const points = this.getPoints()\r\n        const edges = []\r\n\r\n        for (let index = 0; index < points.length; index++) {\r\n            edges.push([points[index], points[(index + 1) % points.length]])\r\n        }\r\n\r\n        return edges as [vector2, vector2][]\r\n    }\r\n\r\n    /** Short forms for random stuff */\r\n\r\n    get x() {\r\n        return this.position[0]\r\n    }\r\n\r\n    get y() {\r\n        return this.position[1]\r\n    }\r\n\r\n    get width() {\r\n        return this.scale[0]\r\n    }\r\n\r\n    get height() {\r\n        return this.scale[1]\r\n    }\r\n\r\n    get minX() {\r\n        return Math.min(this.x, this.x + this.width)\r\n    }\r\n\r\n    get maxX() {\r\n        return Math.max(this.x, this.x + this.width)\r\n    }\r\n\r\n    get minY() {\r\n        return Math.min(this.y, this.y + this.height)\r\n    }\r\n\r\n    get maxY() {\r\n        return Math.max(this.y, this.y + this.height)\r\n    }\r\n\r\n    get center() {\r\n        return [this.x + this.width / 2, this.y + this.height / 2] as vector2\r\n    }\r\n\r\n    set x(value: number) {\r\n        this.position = [value, this.y]\r\n    }\r\n\r\n    set y(value: number) {\r\n        this.position = [this.x, value]\r\n    }\r\n\r\n    set width(value: number) {\r\n        this.scale = [value, this.height]\r\n    }\r\n\r\n    set height(value: number) {\r\n        this.scale = [this.width, value]\r\n    }\r\n}\r\n\r\nexport type vector2 = [number, number]\r\nexport type vector3 = [number, number, number]\r\nexport type vector4 = [number, number, number, number]\r\nexport type vector8 = [\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number\r\n]\r\n","import { CacheInstancesByKey } from '@eix-js/utils'\r\n\r\n@CacheInstancesByKey(Infinity)\r\nexport class LocalStore<T> {\r\n    public constructor(public name: string) {\r\n        if (!localStorage.getItem(name)) {\r\n            localStorage.setItem(name, '{}')\r\n        }\r\n    }\r\n\r\n    public getAll(): Record<string, T> {\r\n        const raw = localStorage.getItem(this.name)\r\n\r\n        if (!raw)\r\n            throw new Error(\r\n                `An error occured when accesing ${\r\n                    this.name\r\n                } in the local storage!`\r\n            )\r\n        else {\r\n            return JSON.parse(raw)\r\n        }\r\n    }\r\n\r\n    public ls(): string[] {\r\n        return Object.keys(this.getAll())\r\n    }\r\n\r\n    public *[Symbol.iterator](): Iterable<T> {\r\n        for (const item of this.ls()) {\r\n            return this.get(item)\r\n        }\r\n    }\r\n\r\n    public get(key = 'index'): T | undefined {\r\n        return this.getAll()[key]\r\n    }\r\n\r\n    public set(key: string | T, value?: T) {\r\n        let finalKey = key as string\r\n        let finalValue = value as T\r\n\r\n        if (typeof key !== 'string' || value === undefined) {\r\n            finalKey = 'index'\r\n            finalValue = key as T\r\n        }\r\n\r\n        const currentData = this.getAll()\r\n\r\n        currentData[finalKey] = finalValue\r\n        localStorage.setItem(this.name, JSON.stringify(currentData))\r\n    }\r\n\r\n    public delete(key = 'index') {\r\n        const all = this.getAll()\r\n\r\n        delete all[key]\r\n\r\n        localStorage.setItem(this.name, JSON.stringify(all))\r\n    }\r\n}\r\n","import { GateTemplate } from '../simulation/types/GateTemplate'\r\nimport { RendererState } from './types/SimulationSave'\r\n\r\nexport const defaultSimulationName = 'default'\r\nexport const baseTemplates: DeepPartial<GateTemplate>[] = [\r\n    {\r\n        metadata: {\r\n            name: 'and'\r\n        },\r\n        material: {\r\n            type: 'image',\r\n            value: require('../../assets/and_gate')\r\n        },\r\n        code: {\r\n            activation: `context.set(0, context.get(0) && context.get(1))`\r\n        },\r\n        pins: {\r\n            inputs: {\r\n                count: 2\r\n            }\r\n        },\r\n        info: ['https://en.wikipedia.org/wiki/AND_gate']\r\n    },\r\n    {\r\n        metadata: {\r\n            name: 'or'\r\n        },\r\n        material: {\r\n            type: 'image',\r\n            value: require('../../assets/or_gate.png')\r\n        },\r\n        code: {\r\n            activation: `context.set(0, context.get(0) || context.get(1))`\r\n        },\r\n        pins: {\r\n            inputs: {\r\n                count: 2\r\n            }\r\n        },\r\n        info: ['https://en.wikipedia.org/wiki/OR_gate']\r\n    },\r\n    {\r\n        metadata: {\r\n            name: 'nor'\r\n        },\r\n        material: {\r\n            type: 'image',\r\n            value: require('../../assets/nor_gate.png')\r\n        },\r\n        code: {\r\n            activation: `context.set(0, !(context.get(0) || context.get(1)))`\r\n        },\r\n        pins: {\r\n            inputs: {\r\n                count: 2\r\n            }\r\n        },\r\n        info: ['https://en.wikipedia.org/wiki/NOR_gate']\r\n    },\r\n    {\r\n        metadata: {\r\n            name: 'xor'\r\n        },\r\n        material: {\r\n            type: 'image',\r\n            value: require('../../assets/xor_gate')\r\n        },\r\n        code: {\r\n            activation: `\r\n            const a = context.get(0)\r\n            const b = context.get(1)\r\n            const c = (a || b) && (!a || !b)\r\n            \r\n            context.set(0, c)`\r\n        },\r\n        info: ['https://en.wikipedia.org/wiki/XOR_gate'],\r\n        pins: {\r\n            inputs: {\r\n                count: 2\r\n            }\r\n        }\r\n    },\r\n    {\r\n        metadata: {\r\n            name: 'not'\r\n        },\r\n        material: {\r\n            value: 'red'\r\n        },\r\n        code: {\r\n            activation: `context.set(0, !context.get(0))`\r\n        },\r\n        info: ['https://en.wikipedia.org/wiki/Inverter_(logic_gate)']\r\n    },\r\n    {\r\n        metadata: {\r\n            name: 'button'\r\n        },\r\n        material: {\r\n            value: 'red'\r\n        },\r\n        code: {\r\n            onClick: `\r\n                const old = context.memory.state\r\n                const state = !old\r\n\r\n                context.set(0, state)    \r\n                context.color(old ? 'red' : '#550000')\r\n\r\n                context.memory.state = state\r\n            `\r\n        },\r\n        pins: {\r\n            inputs: {\r\n                count: 0\r\n            }\r\n        },\r\n        integration: {\r\n            input: true\r\n        },\r\n        info: ['https://en.wikipedia.org/wiki/Push-button']\r\n    },\r\n    {\r\n        metadata: {\r\n            name: 'light bulb'\r\n        },\r\n        shape: {\r\n            radius: 50\r\n        },\r\n        material: {\r\n            value: 'white'\r\n        },\r\n        code: {\r\n            activation: `\r\n                context.color(context.get(0) ? 'yellow' : 'white')\r\n            `\r\n        },\r\n        integration: {\r\n            output: true\r\n        },\r\n        info: ['https://en.wikipedia.org/wiki/Incandescent_light_bulb'],\r\n        pins: {\r\n            outputs: {\r\n                count: 0\r\n            }\r\n        }\r\n    }\r\n]\r\n\r\nexport const baseSave: RendererState = {\r\n    camera: {\r\n        transform: {\r\n            position: [0, 0],\r\n            scale: [1, 1],\r\n            rotation: 0\r\n        }\r\n    },\r\n    simulation: {\r\n        gates: [],\r\n        mode: 'project',\r\n        wires: [],\r\n        name: 'default'\r\n    }\r\n}\r\n","import React from 'react'\r\nimport './ToastContent.scss'\r\nimport Icon from '@material-ui/core/Icon'\r\n\r\nexport interface ToastContentProps {\r\n    message: string\r\n    icon: string\r\n}\r\n\r\nconst ToastContent = (props: ToastContentProps) => {\r\n    return (\r\n        <div className=\"toast-content-container\">\r\n            <Icon id=\"toast-content-icon\">{props.icon}</Icon>\r\n            <div id=\"toast-content-message\">{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToastContent\r\n","import { ToastOptions } from 'react-toastify'\r\nimport React from 'react'\r\nimport ToastContent from '../components/ToastContent'\r\n\r\nexport const createToastArguments = (\r\n    message: string,\r\n    icon?: string\r\n): [string | JSX.Element, ToastOptions] => [\r\n    icon ? <ToastContent message={message} icon={icon} /> : message,\r\n    {\r\n        position: 'bottom-right',\r\n        autoClose: 5000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true\r\n    }\r\n]\r\n","import { BehaviorSubject } from 'rxjs'\r\nimport { supportedLanguage } from '../types/supportedLanguages'\r\n\r\n/**\r\n * Subject with the current language\r\n */\r\nexport default new BehaviorSubject<supportedLanguage>('english')\r\n","export class SimulationError extends Error {\r\n    public constructor(public mesagge: string = '') {\r\n        super()\r\n    }\r\n\r\n    public toString() {\r\n        return `SimulationError: ${this.mesagge}`\r\n    }\r\n}\r\n","import { supportedLanguage } from './types/supportedLanguages'\r\nimport { Translation } from './types/TranslationInterface'\r\nimport { EnglishTranslation } from './translations/english'\r\nimport { RomanianTranslation } from './translations/romanian'\r\nimport { DutchTranslation } from './translations/nederlands'\r\n\r\n/**\r\n * Object with all translations\r\n */\r\nexport const translations: Record<supportedLanguage, Translation> = {\r\n    english: EnglishTranslation,\r\n    ['română']: RomanianTranslation,\r\n    dutch: DutchTranslation\r\n}\r\n\r\nexport const allSupportedLanguages: supportedLanguage[] = [\r\n    'english',\r\n    'română',\r\n    'dutch'\r\n]\r\n","import { Translation } from '../types/TranslationInterface'\r\n\r\n/**\r\n * The enaglish translation\r\n */\r\nexport const EnglishTranslation: Translation = {\r\n    language: 'english',\r\n    sidebar: {\r\n        createSimulation: 'Create simulation',\r\n        logicGates: 'Logic gates',\r\n        openSimulation: 'Open simulations',\r\n        simulation: 'Simulation',\r\n        language: 'Language'\r\n    },\r\n    createSimulation: {\r\n        mode: {\r\n            question: 'What kind of simulation do you want to create?',\r\n            options: {\r\n                ic: 'Integrated circuit',\r\n                project: 'Project'\r\n            }\r\n        },\r\n        name: {\r\n            question: 'What do you want your simulation to be called?'\r\n        }\r\n    },\r\n    actions: {\r\n        save: 'Save',\r\n        clean: 'Clean',\r\n        refresh: 'Refresh',\r\n        undo: 'Undo',\r\n        'select all': 'Select all',\r\n        'delete selection': 'Delete selection',\r\n        'delete simulation': 'Delete simulation'\r\n    },\r\n    messages: {\r\n        createdSimulation: name => `Succesfully created simulation '${name}'`,\r\n        switchedToSimulation: name =>\r\n            `Succesfully switched to simulation '${name}'`,\r\n        savedSimulation: name => `Succesfully saved simulation '${name}'`,\r\n        compiledIc: name => `Succesfully compiled circuit '${name}'`,\r\n        cleaned: name => `Succesfully cleaned simulation '${name}'`,\r\n        refreshed: name => `Succesfully refreshed simulation '${name}'`,\r\n        undone: name => `Succesfully undone simulation '${name}'`,\r\n        deletedSimulation: name => `Succesfully deleted simulation '${name}'`\r\n    }\r\n}\r\n","import { Translation } from '../types/TranslationInterface'\r\n\r\n/**\r\n * The romanian translation\r\n */\r\nexport const RomanianTranslation: Translation = {\r\n    language: 'română',\r\n    sidebar: {\r\n        createSimulation: 'Creează o simulație',\r\n        openSimulation: 'Deschide o simulație',\r\n        logicGates: 'Porți logice',\r\n        simulation: 'Simulație',\r\n        language: 'Limba'\r\n    },\r\n    createSimulation: {\r\n        mode: {\r\n            question: 'Ce fel de simulație vrei să creezi?',\r\n            options: {\r\n                ic: 'Circuit integrat',\r\n                project: 'Proiect'\r\n            }\r\n        },\r\n        name: {\r\n            question: 'Cum vrei să numești simulația?'\r\n        }\r\n    },\r\n    actions: {\r\n        save: 'Salvează',\r\n        'delete selection': 'Șterge selecția',\r\n        'select all': 'Selectează totul',\r\n        clean: 'Curăță',\r\n        refresh: 'Reîncarcă',\r\n        undo: 'Întoarce',\r\n        'delete simulation': 'Șterge simulația'\r\n    },\r\n    messages: {\r\n        createdSimulation: name =>\r\n            `Simulația '${name}' a fost creeată cu succes`,\r\n        switchedToSimulation: name =>\r\n            `Simulația '${name}' a fost deschisă cu succes`,\r\n        savedSimulation: name => `Simulația '${name}' a fost salvată cu succes`,\r\n        compiledIc: name => `Simulația '${name}' a fost compilată cu succes`,\r\n        cleaned: name => `Simulația '${name}' a fost curățată cu succes`,\r\n        refreshed: name => `Simulația '${name}' a fost reîncărcată cu succes`,\r\n        undone: name => `Acțiunea a fost întoarsă`,\r\n        deletedSimulation: name =>\r\n            `Simulația '${name}' a fost ștearsă cu succes`\r\n    }\r\n}\r\n","import { Translation } from '../types/TranslationInterface'\r\n\r\n/**\r\n * The dutch translation\r\n */\r\nexport const DutchTranslation: Translation = {\r\n    language: 'dutch',\r\n    sidebar: {\r\n        createSimulation: 'Maak simulatie',\r\n        logicGates: 'Logische poorten',\r\n        openSimulation: 'Open simulatie',\r\n        simulation: 'Todo',\r\n        language: 'Taal'\r\n    },\r\n    actions: {\r\n        'delete selection': 'Todo',\r\n        'select all': 'Todo',\r\n        clean: 'Todo',\r\n        refresh: 'Todo',\r\n        save: 'Todo',\r\n        undo: 'Todo',\r\n        'delete simulation': `Todo`\r\n    },\r\n    createSimulation: {\r\n        mode: {\r\n            question: 'Wat voor simulatie wil je maken?',\r\n            options: {\r\n                // ic: 'Geïntegreerde schakeling',\r\n                ic: 'IC',\r\n                project: 'Project'\r\n            }\r\n        },\r\n        name: {\r\n            question: 'Hoe wil je je simulatie noemen?'\r\n        }\r\n    },\r\n    messages: {\r\n        createdSimulation: name => `Simulatie '${name}' succesvol gecreerd`,\r\n        switchedToSimulation: name =>\r\n            `Succesvol veranderd naar simulatie '${name}'`,\r\n        savedSimulation: name => `Simulatie succesvol opgeslagen '${name}'`,\r\n        compiledIc: name => `IC gecompileerd: ${name}`,\r\n        cleaned: name => `${name} gewist`,\r\n        refreshed: name => `${name} ververst`,\r\n        undone: name => `${name} ongedaan gemaakt`,\r\n        deletedSimulation: name => `Todo`\r\n    }\r\n}\r\n","import { supportedLanguage } from '../types/supportedLanguages'\r\nimport { LocalStore } from '../../storage/classes/LocalStore'\r\nimport currentLanguageSubject from './../subjects/currentLanguageSubject'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\nimport { translations } from '../constants'\r\n\r\n/**\r\n * Local store containing the current selected language\r\n */\r\nexport const CurrentLanguageLocalStore = new LocalStore<supportedLanguage>(\r\n    'language'\r\n)\r\n\r\n// This makes sure the language isnt undefined\r\nif (!CurrentLanguageLocalStore.get()) {\r\n    CurrentLanguageLocalStore.set('english')\r\n}\r\n\r\ncurrentLanguageSubject.next(CurrentLanguageLocalStore.get() || 'english')\r\n\r\n/**\r\n * The preffered interface for interacting with CurrentLanguageLocalStore\r\n */\r\nconst CurrentLanguage = {\r\n    set(name: supportedLanguage) {\r\n        CurrentLanguageLocalStore.set(name)\r\n        currentLanguageSubject.next(name)\r\n    },\r\n\r\n    /**\r\n     * Used to get the current selected store\r\n     *\r\n     * @throws SimulationError if the language cannot be found\r\n     */\r\n    get() {\r\n        const language = CurrentLanguageLocalStore.get()\r\n\r\n        if (!language) {\r\n            throw new SimulationError(`Current language not found`)\r\n        }\r\n\r\n        return language\r\n    },\r\n\r\n    /**\r\n     * Helper to get the current translation outside React components\r\n     */\r\n    getTranslation() {\r\n        return translations[CurrentLanguage.get()]\r\n    }\r\n}\r\n\r\nexport { CurrentLanguage }\r\n","import { LocalStore } from '../../storage/classes/LocalStore'\r\nimport { GateTemplate } from '../../simulation/types/GateTemplate'\r\n\r\n/**\r\n * This store is used to save all logic gate templates\r\n */\r\nexport const templateStore = new LocalStore<DeepPartial<GateTemplate>>(\r\n    'templates'\r\n)\r\n","import { SubscriptionData } from '../types/SubscriptionData'\r\nimport { BehaviorSubject } from 'rxjs'\r\nimport { Gate } from './Gate'\r\n\r\n/* Types:\r\n\r\nFirst bit = input\r\nSecond bit = output\r\n\r\n*/\r\nexport class Pin {\r\n    public state = new BehaviorSubject(false)\r\n    public pairs = new Set<Pin>()\r\n\r\n    private subscriptions: SubscriptionData<Pin>[] = []\r\n\r\n    public constructor(public type = 0b01, public gate: Gate) {}\r\n\r\n    public addPair(pin: Pin, subscribe = false, remember = true) {\r\n        if (remember) {\r\n            this.pairs.add(pin)\r\n        }\r\n\r\n        if (subscribe) {\r\n            const rawSubscription = pin.state.subscribe(state => {\r\n                this.state.next(state)\r\n            })\r\n\r\n            this.subscriptions.push({\r\n                data: pin,\r\n                subscription: rawSubscription\r\n            })\r\n        }\r\n    }\r\n\r\n    public removePair(pin: Pin) {\r\n        this.pairs.delete(pin)\r\n\r\n        for (const subscription of this.subscriptions) {\r\n            if (subscription.data === pin) {\r\n                subscription.subscription.unsubscribe()\r\n            }\r\n        }\r\n\r\n        this.subscriptions = this.subscriptions.filter(\r\n            subscription => subscription.data !== pin\r\n        )\r\n    }\r\n\r\n    public dispose() {\r\n        for (const subscription of this.subscriptions) {\r\n            subscription.subscription.unsubscribe()\r\n        }\r\n    }\r\n}\r\n","import { LocalStore } from '../../storage/classes/LocalStore'\r\n\r\nconst store = new LocalStore<number>('id')\r\n\r\nexport const idStore = {\r\n    generate() {\r\n        const current = store.get()\r\n\r\n        if (current === undefined) {\r\n            store.set(1)\r\n            return 1\r\n        }\r\n\r\n        store.set(current + 1)\r\n\r\n        return current + 1\r\n    }\r\n}\r\n","/**\r\n * Transforms js code into a function\r\n *\r\n * @param source tThe js code\r\n * @param args The name of arguments to pass to the function\r\n */\r\nexport const toFunction = <T extends unknown[]>(\r\n    source: string,\r\n    ...args: string[]\r\n): ((...args: T) => void) => {\r\n    const raw = `return (${args.join(',')}) => {\r\n        ${source}\r\n    }`\r\n\r\n    return new Function(raw)()\r\n}\r\n","import { GateTemplate } from '../types/GateTemplate'\r\nimport { debounceTime, throttleTime } from 'rxjs/operators'\r\nimport { MonoTypeOperatorFunction, pipe } from 'rxjs'\r\n\r\nexport type TimePipe = MonoTypeOperatorFunction<boolean>\r\n\r\nexport const getGateTimePipes = (template: GateTemplate) => {\r\n    const pipes: TimePipe[] = []\r\n\r\n    if (template.simulation.debounce.enabled) {\r\n        pipes.push(debounceTime(template.simulation.debounce.time))\r\n    }\r\n\r\n    if (template.simulation.throttle.enabled) {\r\n        pipes.push(throttleTime(template.simulation.throttle.time))\r\n    }\r\n\r\n    return pipes as [TimePipe]\r\n}\r\n","import { fromEvent, Subject, Subscription } from 'rxjs'\r\nimport keycode from 'keycode'\r\n\r\nexport class KeyboardInput {\r\n    /**\r\n     * boolean showing the state of the event\r\n     */\r\n    public value = false\r\n\r\n    /**\r\n     * array with all the pressed keys\r\n     */\r\n    private pressed: Array<string> = []\r\n\r\n    /**\r\n     * the keys to listen for events to\r\n     */\r\n    private keys: Array<string>\r\n\r\n    /**\r\n     * an observable of the state o the event\r\n     */\r\n    public valueChanges = new Subject<boolean>()\r\n\r\n    /**\r\n     * keeps track of the subscriptions for disposing\r\n     */\r\n    private subscription: Array<Subscription> = []\r\n\r\n    /**\r\n     * use for keyboard events\r\n     * @param params the keys to listen to\r\n     */\r\n    public constructor(...params: string[]) {\r\n        //save the keys\r\n        this.keys = params\r\n\r\n        //push a new subscription to the subscriptions array\r\n        this.subscription.push(\r\n            fromEvent(document, 'keydown').subscribe(e => {\r\n                //remember the length of the pressed array\r\n                //used to see if anything changed\r\n                const last = this.pressed.length\r\n                //iterate over the keys it listens to\r\n                //if the key is pressed and it isnt already pressed,\r\n                //then add it to the pressed array\r\n                for (let i of this.keys)\r\n                    if (i == keycode(e) && this.pressed.indexOf(i) == -1)\r\n                        this.pressed.push(i)\r\n\r\n                //if there was no key pressd before, and now there is\r\n                //then change the state of the event and emit it\r\n                if (last == 0 && this.pressed.length != 0) {\r\n                    this.value = true\r\n                    this.valueChanges.next(this.value)\r\n                }\r\n            })\r\n        )\r\n\r\n        //push a new subscription to the subscriptions array\r\n        this.subscription.push(\r\n            fromEvent(document, 'keyup').subscribe(e => {\r\n                //remember the length of the pressed array\r\n                //used to see if anything changed\r\n                const last = this.pressed.length\r\n\r\n                //iterate over the keys it listens to\r\n                //if the key is released and it was pressed,\r\n                //then remove it from the pressed array\r\n                for (let i of this.keys)\r\n                    if (i == keycode(e) && this.pressed.indexOf(i) != -1)\r\n                        this.pressed.splice(this.pressed.indexOf(i), 1)\r\n\r\n                //if there was at least a key pressd before, and now there isnt\r\n                //also, if the state was true\r\n                //then change the state of the event and emit it\r\n                if (this.value && last > 0 && this.pressed.length == 0) {\r\n                    this.value = false\r\n                    this.valueChanges.next(this.value)\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    /**\r\n     * ends the listening\r\n     */\r\n    public dispose() {\r\n        this.subscription.forEach(e => e.unsubscribe())\r\n        this.value = false\r\n        this.valueChanges.next(false)\r\n        this.valueChanges.complete()\r\n    }\r\n}\r\n","import { SimulationRendererOptions } from './types/SimulationRendererOptions'\r\nimport { vector2 } from '../../common/math/classes/Transform'\r\nimport { mouseButton } from '../core/types/mouseButton'\r\nimport { KeyboardInput } from '../keybindings/classes/KeyboardInput'\r\n\r\nexport const defaultSimulationRendererOptions: SimulationRendererOptions = {\r\n    dnd: {\r\n        rotation: Math.PI / 12 // 7.5 degrees\r\n    },\r\n    gates: {\r\n        connectionLength: 30,\r\n        pinRadius: 10,\r\n        pinStrokeColor: '#888888',\r\n        pinStrokeWidth: 3,\r\n        pinFill: {\r\n            open: 'rgb(255,216,20)',\r\n            closed: 'rgb(90,90,90)'\r\n        },\r\n        gateStroke: {\r\n            active: 'yellow',\r\n            normal: 'black',\r\n            width: 4\r\n        }\r\n    },\r\n    wires: {\r\n        temporaryWireColor: `rgba(128,128,128,0.5)`,\r\n        curvePointOffset: 100\r\n    },\r\n    spawning: {\r\n        spawnOffset: 30\r\n    },\r\n    selecting: {\r\n        fill: 'rgba(128,128,128,0.3)',\r\n        stroke: `rgba(128,128,128,0.7)`\r\n    }\r\n}\r\n\r\nexport const imageQuality: vector2 = [100, 100]\r\n\r\nexport const mouseButtons: Record<\r\n    'zoom' | 'pan' | 'drag' | 'select' | 'unselect',\r\n    mouseButton\r\n> = {\r\n    zoom: 1,\r\n    drag: 2,\r\n    pan: 2,\r\n    select: 0,\r\n    unselect: 0\r\n}\r\n\r\nexport const shiftInput = new KeyboardInput('shift')\r\n","import { imageQuality } from '../constants'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\n\r\n/**\r\n * Creates an image from a given url\r\n *\r\n * @param url The url of the image\r\n */\r\nexport const toImage = (url: string) => {\r\n    const image = new Image(...imageQuality)\r\n    image.src = url\r\n\r\n    return image\r\n}\r\n\r\n/**\r\n * Store to be sure no more than 1 image oer url is created\r\n */\r\nexport const ImageStore = {\r\n    /**\r\n     * Map holding the url - image pairs\r\n     */\r\n    memory: new Map<string, HTMLImageElement>(),\r\n\r\n    /**\r\n     * If the image doesnt exist it'll create it from the url.\r\n     * If it does the method does nothing.\r\n     *\r\n     * @param url the url of the image\r\n     */\r\n    set(url: string) {\r\n        if (!ImageStore.memory.has(url)) {\r\n            ImageStore.memory.set(url, toImage(url))\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns the image object from the given url\r\n     *\r\n     *\r\n     * @throws SimulationError if the image doesnt exist\r\n     *\r\n     * @param url The url of the image\r\n     */\r\n    get(url: string) {\r\n        const image = ImageStore.memory.get(url)\r\n\r\n        if (!image) {\r\n            throw new SimulationError(`Cannot get image ${url}`)\r\n        }\r\n\r\n        return image\r\n    }\r\n}\r\n","import { GateTemplate } from './types/GateTemplate'\r\n\r\nexport const DefaultGateTemplate: GateTemplate = {\r\n    metadata: {\r\n        name: 'Default template'\r\n    },\r\n    material: {\r\n        type: 'color',\r\n        value: 'blue'\r\n    },\r\n    pins: {\r\n        inputs: {\r\n            count: 1,\r\n            variable: false\r\n        },\r\n        outputs: {\r\n            count: 1,\r\n            variable: false\r\n        }\r\n    },\r\n    shape: {\r\n        radius: 10,\r\n        rounded: true,\r\n        scale: [100, 100]\r\n    },\r\n    code: {\r\n        activation: '',\r\n        onClick: '',\r\n        initialisation: ''\r\n    },\r\n    simulation: {\r\n        debounce: {\r\n            enabled: true,\r\n            time: 1000 / 60\r\n        },\r\n        throttle: {\r\n            enabled: false\r\n        }\r\n    },\r\n    integration: {\r\n        allowed: true,\r\n        input: false,\r\n        output: false\r\n    },\r\n    info: [],\r\n    tags: ['base']\r\n}\r\n","import merge from 'deepmerge'\r\nimport { GateTemplate } from '../../simulation/types/GateTemplate'\r\nimport { DefaultGateTemplate } from '../../simulation/constants'\r\n\r\nexport const completeTemplate = (template: DeepPartial<GateTemplate>) => {\r\n    return merge(DefaultGateTemplate, template, {\r\n        arrayMerge: (a: unknown[], b: unknown[]) => b\r\n    }) as GateTemplate\r\n}\r\n","import { idStore } from '../stores/idStore'\r\nimport { PinWrapper } from './Gate'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\n\r\nexport class Wire {\r\n    public id: number\r\n    public active = true\r\n\r\n    public constructor(\r\n        public start: PinWrapper,\r\n        public end: PinWrapper,\r\n        ic: boolean = false,\r\n        id?: number\r\n    ) {\r\n        if (!ic && end.value.pairs.size !== 0) {\r\n            throw new SimulationError('An input pin can only have 1 pair')\r\n        }\r\n\r\n        end.value.addPair(start.value, true, !ic)\r\n        start.value.addPair(end.value, false, !ic)\r\n\r\n        // if (ic) {\r\n        //     start.value.state.subscribe(console.log)\r\n        //     end.value.state.subscribe(console.log)\r\n        // }\r\n\r\n        this.id = id !== undefined ? id : idStore.generate()\r\n    }\r\n\r\n    public dispose() {\r\n        this.end.value.removePair(this.start.value)\r\n        this.start.value.removePair(this.end.value)\r\n\r\n        this.active = false\r\n    }\r\n}\r\n","import { Gate } from '../../simulation/classes/Gate'\r\nimport { Wire } from '../../simulation/classes/Wire'\r\nimport { Simulation } from '../../simulation/classes/Simulation'\r\n\r\n/**\r\n * Checks if a wire has a gate at any of its ends\r\n *\r\n * @param gate The gate to check\r\n * @param wire The wire to check\r\n */\r\nexport const wireConnectedToGate = (gate: Gate, wire: Wire) =>\r\n    wire.end.value.gate === gate || wire.start.value.gate === gate\r\n\r\n/**\r\n * Finds all the wires a gate has connected to it\r\n *\r\n * @param simulation The simulation to check all the wires of\r\n * @param gate The gate to find the wires for\r\n */\r\nexport const allWiresConnectedToGate = (simulation: Simulation, gate: Gate) => {\r\n    return simulation.wires.filter(wire => wireConnectedToGate(gate, wire))\r\n}\r\n","import { SimulationRenderer } from '../classes/SimulationRenderer'\r\nimport { Gate } from '../../simulation/classes/Gate'\r\nimport { wireConnectedToGate } from './wireConnectedToGate'\r\nimport { Simulation } from '../../simulation/classes/Simulation'\r\n\r\n/**\r\n * Helper to delete a gate from a simulation\r\n *\r\n * @param simulation The simulation to remove the gate from\r\n * @param gate The gate to remove\r\n */\r\nexport const deleteGate = (simulation: Simulation, gate: Gate) => {\r\n    const node = simulation.gates.get(gate.id)\r\n\r\n    if (!node) {\r\n        return\r\n    }\r\n\r\n    for (const wire of simulation.wires) {\r\n        if (wireConnectedToGate(gate, wire)) {\r\n            wire.dispose()\r\n        }\r\n    }\r\n\r\n    simulation.wires = simulation.wires.filter(wire => wire.active)\r\n\r\n    gate.dispose()\r\n    simulation.gates.delete(node)\r\n}\r\n","import { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\nimport { Simulation } from '../../simulation/classes/Simulation'\r\nimport { allWiresConnectedToGate } from '../../simulationRenderer/helpers/wireConnectedToGate'\r\nimport { deleteGate } from '../../simulationRenderer/helpers/deleteGate'\r\nimport { Gate } from '../../simulation/classes/Gate'\r\n\r\n/**\r\n * Deletes all unconnected gates from a renderers simulation\r\n *\r\n * @param renderer The renderer to clean the simulation of\r\n */\r\nexport const cleanRenderer = (renderer: SimulationRenderer) => {\r\n    cleanSimulation(renderer.simulation)\r\n}\r\n\r\n/**\r\n * Deletes all unconnected gates from a simulation\r\n *\r\n * @param simulation The simulation to clean\r\n */\r\nexport const cleanSimulation = (simulation: Simulation) => {\r\n    const toDelete: Gate[] = []\r\n\r\n    for (const gate of simulation.gates) {\r\n        const wires = allWiresConnectedToGate(simulation, gate)\r\n\r\n        if (!wires.length) {\r\n            toDelete.push(gate)\r\n        }\r\n    }\r\n\r\n    for (const gate of toDelete) {\r\n        deleteGate(simulation, gate)\r\n    }\r\n}\r\n","import { Transform } from '../../../common/math/classes/Transform'\r\nimport { Pin } from './Pin'\r\nimport { GateTemplate, PinCount } from '../types/GateTemplate'\r\nimport { idStore } from '../stores/idStore'\r\nimport { Context, InitialisationContext } from '../../activation/types/Context'\r\nimport { toFunction } from '../../activation/helpers/toFunction'\r\nimport { Subscription } from 'rxjs'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\nimport { getGateTimePipes } from '../helpers/getGateTimePipes'\r\nimport { ImageStore } from '../../simulationRenderer/stores/imageStore'\r\nimport { completeTemplate } from '../../logic-gates/helpers/completeTemplate'\r\nimport { Simulation, SimulationEnv } from './Simulation'\r\nimport { fromSimulationState } from '../../saving/helpers/fromState'\r\nimport { saveStore } from '../../saving/stores/saveStore'\r\nimport { Wire } from './Wire'\r\nimport { cleanSimulation } from '../../simulation-actions/helpers/clean'\r\n\r\nexport interface GatePins {\r\n    inputs: Pin[]\r\n    outputs: Pin[]\r\n}\r\n\r\nexport interface PinWrapper {\r\n    total: number\r\n    index: number\r\n    value: Pin\r\n}\r\n\r\nexport type GateFunction = null | ((ctx: Context) => void)\r\n\r\nexport interface GateFunctions {\r\n    activation: GateFunction\r\n    onClick: GateFunction\r\n}\r\n\r\nexport class Gate {\r\n    public transform = new Transform()\r\n    public _pins: GatePins = {\r\n        inputs: [],\r\n        outputs: []\r\n    }\r\n\r\n    public id: number\r\n    public template: GateTemplate\r\n\r\n    private functions: GateFunctions = {\r\n        activation: null,\r\n        onClick: null\r\n    }\r\n\r\n    private subscriptions: Subscription[] = []\r\n    private memory: Record<string, unknown> = {}\r\n\r\n    // Related to integration\r\n    private ghostSimulation: Simulation\r\n    private ghostWires: Wire[] = []\r\n    private isIntegrated = false\r\n    public env: SimulationEnv = 'global'\r\n\r\n    public constructor(template: DeepPartial<GateTemplate> = {}, id?: number) {\r\n        this.template = completeTemplate(template)\r\n\r\n        this.transform.scale = this.template.shape.scale\r\n\r\n        this.functions.activation = toFunction(\r\n            this.template.code.activation,\r\n            'context'\r\n        )\r\n\r\n        this.functions.onClick = toFunction(\r\n            this.template.code.onClick,\r\n            'context'\r\n        )\r\n\r\n        this._pins.inputs = Gate.generatePins(\r\n            this.template.pins.inputs,\r\n            1,\r\n            this\r\n        )\r\n        this._pins.outputs = Gate.generatePins(\r\n            this.template.pins.outputs,\r\n            2,\r\n            this\r\n        )\r\n\r\n        if (this.template.material.type === 'image') {\r\n            ImageStore.set(this.template.material.value)\r\n        }\r\n\r\n        this.id = id !== undefined ? id : idStore.generate()\r\n\r\n        for (const pin of this._pins.inputs) {\r\n            const pipes = getGateTimePipes(this.template)\r\n\r\n            const subscription = pin.state.pipe(...pipes).subscribe(() => {\r\n                this.update()\r\n            })\r\n\r\n            this.subscriptions.push(subscription)\r\n        }\r\n\r\n        this.init()\r\n\r\n        if (this.template.tags.includes('integrated')) {\r\n            this.isIntegrated = true\r\n        }\r\n\r\n        if (this.isIntegrated) {\r\n            const state = saveStore.get(this.template.metadata.name)\r\n\r\n            if (!state) {\r\n                throw new SimulationError(\r\n                    `Cannot run ic ${\r\n                        this.template.metadata.name\r\n                    } - save not found`\r\n                )\r\n            }\r\n\r\n            this.ghostSimulation = fromSimulationState(state.simulation, 'gate')\r\n            cleanSimulation(this.ghostSimulation)\r\n\r\n            const sortByPosition = (x: Gate, y: Gate) =>\r\n                x.transform.position[1] - y.transform.position[1]\r\n\r\n            const gates = Array.from(this.ghostSimulation.gates)\r\n\r\n            const inputs = gates\r\n                .filter(gate => gate.template.integration.input)\r\n                .sort(sortByPosition)\r\n                .map(gate => gate.wrapPins(gate._pins.outputs))\r\n                .flat()\r\n\r\n            const outputs = gates\r\n                .filter(gate => gate.template.integration.output)\r\n                .sort(sortByPosition)\r\n                .map(gate => gate.wrapPins(gate._pins.inputs))\r\n                .flat()\r\n\r\n            if (inputs.length !== this._pins.inputs.length) {\r\n                throw new SimulationError(\r\n                    `Input count needs to match with the container gate: ${\r\n                        inputs.length\r\n                    } !== ${this._pins.inputs.length}`\r\n                )\r\n            }\r\n\r\n            if (outputs.length !== this._pins.outputs.length) {\r\n                throw new SimulationError(\r\n                    `Output count needs to match with the container gate: ${\r\n                        outputs.length\r\n                    } !== ${this._pins.outputs.length}`\r\n                )\r\n            }\r\n\r\n            const wrappedInputs = this.wrapPins(this._pins.inputs)\r\n            const wrappedOutputs = this.wrapPins(this._pins.outputs)\r\n\r\n            for (let index = 0; index < inputs.length; index++) {\r\n                this.ghostWires.push(\r\n                    new Wire(wrappedInputs[index], inputs[index], true)\r\n                )\r\n            }\r\n\r\n            for (let index = 0; index < outputs.length; index++) {\r\n                this.ghostWires.push(\r\n                    new Wire(outputs[index], wrappedOutputs[index], true)\r\n                )\r\n            }\r\n\r\n            this.ghostSimulation.wires.push(...this.ghostWires)\r\n        }\r\n    }\r\n\r\n    private init() {\r\n        toFunction<[InitialisationContext]>(\r\n            this.template.code.initialisation,\r\n            'context'\r\n        )({\r\n            memory: this.memory\r\n        })\r\n    }\r\n\r\n    public onClick() {\r\n        if (this.functions.onClick) {\r\n            this.functions.onClick(this.getContext())\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        for (const pin of this.pins) {\r\n            pin.value.dispose()\r\n        }\r\n\r\n        for (const subscription of this.subscriptions) {\r\n            subscription.unsubscribe()\r\n        }\r\n\r\n        if (this.isIntegrated) {\r\n            this.ghostSimulation.dispose()\r\n        }\r\n    }\r\n\r\n    public update() {\r\n        if (this.template.tags.includes('integrated')) {\r\n        } else {\r\n            const context = this.getContext()\r\n\r\n            if (!this.functions.activation)\r\n                throw new SimulationError('Activation function is missing')\r\n\r\n            this.functions.activation(context)\r\n        }\r\n    }\r\n\r\n    public getContext(): Context {\r\n        return {\r\n            get: (index: number) => {\r\n                return this._pins.inputs[index].state.value\r\n            },\r\n            set: (index: number, state: boolean = false) => {\r\n                return this._pins.outputs[index].state.next(state)\r\n            },\r\n            memory: this.memory,\r\n            color: (color: string) => {\r\n                if (this.template.material.type === 'color') {\r\n                    this.template.material.value = color\r\n                }\r\n            },\r\n            enviroment: this.env\r\n        }\r\n    }\r\n\r\n    private wrapPins(pins: Pin[]) {\r\n        const result: PinWrapper[] = []\r\n        const length = pins.length\r\n\r\n        for (let index = 0; index < length; index++) {\r\n            result.push({\r\n                index,\r\n                total: length,\r\n                value: pins[index]\r\n            })\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    public get pins() {\r\n        const result = [\r\n            ...this.wrapPins(this._pins.inputs),\r\n            ...this.wrapPins(this._pins.outputs)\r\n        ]\r\n\r\n        return result\r\n    }\r\n\r\n    private static generatePins(options: PinCount, type: number, gate: Gate) {\r\n        return [...Array(options.count)]\r\n            .fill(true)\r\n            .map(() => new Pin(type, gate))\r\n    }\r\n}\r\n","import { Transform } from '../../../common/math/classes/Transform'\r\nimport { vector2 } from '../../../common/math/types/vector2'\r\n\r\nexport class Camera {\r\n    public transform = new Transform([0, 0])\r\n\r\n    public toWordPostition(position: vector2) {\r\n        return [\r\n            (position[0] - this.transform.position[0]) /\r\n                this.transform.scale[0],\r\n            (position[1] - this.transform.position[1]) / this.transform.scale[1]\r\n        ] as vector2\r\n    }\r\n}\r\n","import { LruCacheNode } from '@eix-js/utils'\r\nimport { Gate } from './Gate'\r\n\r\n/**\r\n * The nodes used inside the gat storage\r\n */\r\nexport type GateNode = LruCacheNode<Gate>\r\n\r\n/**\r\n * dequeue implementation with iteration support.\r\n * Used to store the logic gates\r\n */\r\nexport class GateStorage {\r\n    /**\r\n     * The map containing all the hash - node pairs\r\n     */\r\n    private hashMap = new Map<number, GateNode>()\r\n\r\n    /**\r\n     * The head of the dequeue\r\n     */\r\n    private head = new LruCacheNode<Gate>(0, null)\r\n\r\n    /**\r\n     * The tail of the dequue\r\n     */\r\n    private tail = new LruCacheNode<Gate>(0, null)\r\n\r\n    public constructor() {\r\n        this.init()\r\n    }\r\n\r\n    /**\r\n     * Links the head to the tail\r\n     */\r\n    private init() {\r\n        this.head.next = this.tail\r\n        this.tail.previous = this.head\r\n    }\r\n\r\n    /**\r\n     * Deletes a gate\r\n     *\r\n     * @param node The node to delete\r\n     */\r\n    public delete(node: GateNode) {\r\n        node.previous.next = node.next\r\n        node.next.previous = node.previous\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds a new hash - gate pair to the dequeue\r\n     *\r\n     * @param key The ket of the gate\r\n     * @param node The gate itself\r\n     */\r\n    public set(key: number, node: GateNode) {\r\n        this.hashMap.set(key, node)\r\n        this.addToHead(node)\r\n    }\r\n\r\n    /**\r\n     * Adds a node directly after head\r\n     *\r\n     * @param node The node to add\r\n     */\r\n    public addToHead(node: GateNode) {\r\n        node.next = this.head.next\r\n        node.next.previous = node\r\n        node.previous = this.head\r\n        this.head.next = node\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Moves a node directly after the head\r\n     *\r\n     * @param node The node to move\r\n     */\r\n    public moveOnTop(node: GateNode) {\r\n        this.delete(node).addToHead(node)\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Gets a gate by its key\r\n     *\r\n     * @param key  The key of the gate\r\n     */\r\n    public get(key: number) {\r\n        const node = this.hashMap.get(key)\r\n\r\n        return node\r\n    }\r\n\r\n    /**\r\n     * Gets the first gate in the dequeue\r\n     */\r\n    public first() {\r\n        const first = this.head.next\r\n\r\n        return first\r\n    }\r\n\r\n    /**\r\n     * Used for iterating over the dequeue\r\n     */\r\n    public *[Symbol.iterator](): Iterator<Gate> {\r\n        let last = this.tail\r\n\r\n        while (true) {\r\n            if (last.previous === this.head) {\r\n                break\r\n            } else {\r\n                if (last.previous.data) {\r\n                    yield last.previous.data\r\n                }\r\n\r\n                last = last.previous\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes every gate in the dequeue\r\n     */\r\n    public clear() {\r\n        this.hashMap = new Map()\r\n\r\n        this.init()\r\n    }\r\n}\r\n","import { Gate } from './Gate'\r\nimport { GateStorage } from './GateStorage'\r\nimport { LruCacheNode } from '@eix-js/utils'\r\nimport { Wire } from './Wire'\r\nimport { simulationMode } from '../../saving/types/SimulationSave'\r\n\r\n/**\r\n * The env a simulation can run in\r\n */\r\nexport type SimulationEnv = 'gate' | 'global'\r\n\r\nexport class Simulation {\r\n    public gates = new GateStorage()\r\n    public wires: Wire[] = []\r\n\r\n    public constructor(\r\n        public mode: simulationMode = 'project',\r\n        public name: string,\r\n        public env: SimulationEnv = 'global'\r\n    ) {}\r\n\r\n    public push(...gates: Gate[]) {\r\n        for (const gate of gates) {\r\n            gate.env = this.env\r\n\r\n            const node = new LruCacheNode<Gate>(gate.id, gate)\r\n\r\n            this.gates.set(gate.id, node)\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        for (const gate of this.gates) {\r\n            gate.dispose()\r\n        }\r\n    }\r\n}\r\n","import { Gate, PinWrapper } from '../../simulation/classes/Gate'\r\nimport {\r\n    TransformState,\r\n    CameraState,\r\n    SimulationState\r\n} from '../types/SimulationSave'\r\nimport { Transform } from '../../../common/math/classes/Transform'\r\nimport { Camera } from '../../simulationRenderer/classes/Camera'\r\nimport { Simulation, SimulationEnv } from '../../simulation/classes/Simulation'\r\nimport { Wire } from '../../simulation/classes/Wire'\r\nimport { templateStore } from '../stores/templateStore'\r\n\r\n/**\r\n * Contains methods for transforming saved state into the respective class instances\r\n */\r\n\r\nexport const fromTransformState = (state: TransformState): Transform => {\r\n    return new Transform(state.position, state.scale, state.rotation)\r\n}\r\n\r\nexport const fromCameraState = (state: CameraState): Camera => {\r\n    const camera = new Camera()\r\n\r\n    camera.transform = fromTransformState(state.transform)\r\n\r\n    return camera\r\n}\r\n\r\nexport const fromSimulationState = (\r\n    state: SimulationState,\r\n    env: SimulationEnv = 'global'\r\n): Simulation => {\r\n    const simulation = new Simulation(state.mode, state.name, env)\r\n\r\n    for (const gateState of state.gates) {\r\n        const gate = new Gate(\r\n            templateStore.get(gateState.template),\r\n            gateState.id\r\n        )\r\n        gate.transform = fromTransformState(gateState.transform)\r\n\r\n        simulation.push(gate)\r\n    }\r\n\r\n    for (const wireState of state.wires) {\r\n        const startGateNode = simulation.gates.get(wireState.from.id)\r\n        const endGateNode = simulation.gates.get(wireState.to.id)\r\n\r\n        if (\r\n            startGateNode &&\r\n            endGateNode &&\r\n            startGateNode.data &&\r\n            endGateNode.data\r\n        ) {\r\n            const start: PinWrapper = {\r\n                index: wireState.from.index,\r\n                total: wireState.from.total,\r\n                value: startGateNode.data._pins.outputs[wireState.from.index]\r\n            }\r\n            const end: PinWrapper = {\r\n                index: wireState.to.index,\r\n                total: wireState.to.total,\r\n                value: endGateNode.data._pins.inputs[wireState.to.index]\r\n            }\r\n\r\n            const wire = new Wire(start, end, false, wireState.id)\r\n\r\n            simulation.wires.push(wire)\r\n        }\r\n    }\r\n\r\n    return simulation\r\n}\r\n","import { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\nimport { Gate, PinWrapper } from '../../simulation/classes/Gate'\r\nimport {\r\n    GateState,\r\n    TransformState,\r\n    RendererState,\r\n    CameraState,\r\n    SimulationState,\r\n    WireState,\r\n    WireLimit\r\n} from '../types/SimulationSave'\r\nimport { Transform } from '../../../common/math/classes/Transform'\r\nimport { Camera } from '../../simulationRenderer/classes/Camera'\r\nimport { Simulation } from '../../simulation/classes/Simulation'\r\nimport { Wire } from '../../simulation/classes/Wire'\r\n\r\n/**\r\n * Methods for gettings the savable state from class instances\r\n */\r\n\r\nexport const getTransformState = (transform: Transform): TransformState => {\r\n    return {\r\n        position: transform.position,\r\n        rotation: transform.rotation,\r\n        scale: transform.scale\r\n    }\r\n}\r\n\r\nexport const getCameraState = (camera: Camera): CameraState => {\r\n    return {\r\n        transform: getTransformState(camera.transform)\r\n    }\r\n}\r\n\r\nexport const getWireLimit = (pin: PinWrapper): WireLimit => {\r\n    return {\r\n        id: pin.value.gate.id,\r\n        index: pin.index,\r\n        total: pin.total\r\n    }\r\n}\r\n\r\nexport const getWireState = (wire: Wire): WireState => {\r\n    return {\r\n        from: getWireLimit(wire.start),\r\n        to: getWireLimit(wire.end),\r\n        id: wire.id\r\n    }\r\n}\r\n\r\nexport const getSimulationState = (simulation: Simulation): SimulationState => {\r\n    return {\r\n        gates: Array.from(simulation.gates).map(getGateState),\r\n        wires: simulation.wires.map(getWireState),\r\n        mode: simulation.mode,\r\n        name: simulation.name\r\n    }\r\n}\r\n\r\nexport const getGateState = (gate: Gate): GateState => {\r\n    return {\r\n        id: gate.id,\r\n        template: gate.template.metadata.name,\r\n        transform: getTransformState(gate.transform)\r\n    }\r\n}\r\n\r\nexport const getRendererState = (\r\n    renderer: SimulationRenderer\r\n): RendererState => {\r\n    return {\r\n        camera: getCameraState(renderer.camera),\r\n        simulation: getSimulationState(renderer.simulation)\r\n    }\r\n}\r\n","import { SimulationState } from '../../saving/types/SimulationSave'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\nimport { GateTemplate } from '../../simulation/types/GateTemplate'\r\nimport {\r\n    simulationInputCount,\r\n    simulationOutputCount\r\n} from './simulationIoCount'\r\nimport { templateStore } from '../../saving/stores/templateStore'\r\nimport { toast } from 'react-toastify'\r\nimport { createToastArguments } from '../../toasts/helpers/createToastArguments'\r\nimport { CurrentLanguage } from '../../internalisation/stores/currentLanguage'\r\nimport { fromSimulationState } from '../../saving/helpers/fromState'\r\nimport { cleanSimulation } from '../../simulation-actions/helpers/clean'\r\nimport { getSimulationState } from '../../saving/helpers/getState'\r\n\r\n/**\r\n * Compiles a simulation into a logicGate\r\n *\r\n * @param simulaton The simulation to compile\r\n */\r\nexport const compileIc = (state: SimulationState) => {\r\n    const { mode, name, gates } = state\r\n\r\n    if (mode === 'project') {\r\n        throw new SimulationError('Cannot compile project')\r\n    }\r\n\r\n    const translation = CurrentLanguage.getTranslation()\r\n\r\n    const simulation = fromSimulationState(state)\r\n    cleanSimulation(simulation)\r\n    const cleanState = getSimulationState(simulation)\r\n\r\n    const inputCount = simulationInputCount(cleanState.gates)\r\n    const outputCount = simulationOutputCount(cleanState.gates)\r\n\r\n    const result: DeepPartial<GateTemplate> = {\r\n        metadata: {\r\n            name\r\n        },\r\n        tags: ['integrated'],\r\n        pins: {\r\n            inputs: {\r\n                count: inputCount\r\n            },\r\n            outputs: {\r\n                count: outputCount\r\n            }\r\n        }\r\n    }\r\n\r\n    templateStore.set(name, result)\r\n    toast(\r\n        ...createToastArguments(\r\n            translation.messages.compiledIc(name),\r\n            'markunread_mailbox'\r\n        )\r\n    )\r\n}\r\n","import { GateState } from '../../saving/types/SimulationSave'\r\nimport { GateTemplate } from '../../simulation/types/GateTemplate'\r\nimport { templateStore } from '../../saving/stores/templateStore'\r\n\r\n/**\r\n * Any type of gate wich has a template\r\n */\r\nexport type hasTemplate = { template: string }\r\n\r\n/**\r\n * Counts the number of ic inputs inside an array of gate states\r\n *\r\n * @param gates The state to count the inputs in\r\n */\r\nexport const simulationInputCount = (gates: hasTemplate[]) => {\r\n    return gates.filter(gate => {\r\n        const template = templateStore.get(gate.template)\r\n\r\n        return template && template.integration && template.integration.input\r\n    }).length\r\n}\r\n\r\n/**\r\n * Counts the number of ic outputs inside an array of gate states\r\n *\r\n * @param gates The state to count the outputs for\r\n */\r\nexport const simulationOutputCount = (gates: hasTemplate[]) => {\r\n    return gates.filter(gate => {\r\n        const template = templateStore.get(gate.template)\r\n\r\n        return template && template.integration && template.integration.output\r\n    }).length\r\n}\r\n","import { simulationMode } from '../types/SimulationSave'\r\nimport { baseSave } from '../constants'\r\nimport { cloneState } from './cloneState'\r\nimport { saveStore } from '../stores/saveStore'\r\nimport { toast } from 'react-toastify'\r\nimport { createToastArguments } from '../../toasts/helpers/createToastArguments'\r\nimport { CurrentLanguage } from '../../internalisation/stores/currentLanguage'\r\nimport { compileIc } from '../../integrated-circuits/helpers/compileIc'\r\n\r\n/**\r\n * Inits a simulation by:\r\n * 1) first initialising the place in localstorage\r\n * where the simulation will be saved\r\n * 2) notifying the used about that\r\n *\r\n * @param name - the name of the simulation\r\n * @param mode - the mode of the simulation\r\n */\r\nexport const initSimulation = (name: string, mode: simulationMode) => {\r\n    const state = cloneState(baseSave)\r\n    const translation = CurrentLanguage.getTranslation()\r\n\r\n    state.simulation.name = name\r\n    state.simulation.mode = mode\r\n\r\n    saveStore.set(name, state)\r\n\r\n    toast.success(\r\n        ...createToastArguments(\r\n            translation.messages.createdSimulation(name),\r\n            'check'\r\n        )\r\n    )\r\n\r\n    if (mode === 'ic') {\r\n        compileIc(state.simulation)\r\n    }\r\n\r\n    return state\r\n}\r\n","/**\r\n * Very basic JSON based object cloning\r\n *\r\n * @param state The object to clone\r\n */\r\nexport const cloneState = <T>(state: T): T => JSON.parse(JSON.stringify(state))\r\n","import { LocalStore } from '../../storage/classes/LocalStore'\r\nimport { RendererState } from '../types/SimulationSave'\r\nimport { initSimulation } from '../helpers/initSimulation'\r\nimport { defaultSimulationName } from '../constants'\r\n\r\n/**\r\n * This store is used to save all simulations.\r\n */\r\nconst saveStore = new LocalStore<RendererState>('saves')\r\n\r\nif (!saveStore.ls().length) {\r\n    initSimulation(defaultSimulationName, 'project')\r\n}\r\n\r\nexport { saveStore }\r\n","import { LocalStore } from '../../storage/classes/LocalStore'\r\nimport { defaultSimulationName } from '../constants'\r\n\r\n/**\r\n * Stores the name of the current simulation\r\n */\r\nconst currentStore = new LocalStore<string>('currentSave')\r\n\r\n// This makes sure the store isnt empty\r\nif (!currentStore.get()) {\r\n    currentStore.set(defaultSimulationName)\r\n}\r\n\r\nexport { currentStore }\r\n","import { BehaviorSubject } from 'rxjs'\r\nimport { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\n\r\nexport const rendererSubject = new BehaviorSubject<null | SimulationRenderer>(\r\n    null\r\n)\r\n","import { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\n\r\n/**\r\n * Does the cleanup for switching to another simulation\r\n *\r\n * @param renderer The renderer to clean up\r\n */\r\nexport const dumpSimulation = (renderer: SimulationRenderer) => {\r\n    renderer.simulation.dispose()\r\n    renderer.lastMousePosition = [0, 0]\r\n    renderer.clearSelection()\r\n    renderer.selectedPins = {\r\n        end: null,\r\n        start: null\r\n    }\r\n}\r\n","import { currentStore } from '../stores/currentStore'\r\nimport { rendererSubject } from '../../core/subjects/rendererSubject'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\nimport { toast } from 'react-toastify'\r\nimport { createToastArguments } from '../../toasts/helpers/createToastArguments'\r\nimport { dumpSimulation } from './dumpSimulation'\r\nimport { CurrentLanguage } from '../../internalisation/stores/currentLanguage'\r\n\r\n/**\r\n * Used to switch to a simulation\r\n *\r\n * @throws SimulationError if theres no renderer stored in the rendererSubject\r\n *\r\n * @param simulationName The name of the simulation to switch to\r\n *\r\n * @example\r\n * switchTo()\r\n * switchTo('test')\r\n *\r\n */\r\nexport const switchTo = (simulationName: string = 'default') => {\r\n    if (rendererSubject.value) {\r\n        const renderer = rendererSubject.value\r\n        const translation = CurrentLanguage.getTranslation()\r\n\r\n        dumpSimulation(renderer)\r\n\r\n        currentStore.set(simulationName)\r\n        renderer.reloadSave()\r\n\r\n        toast(\r\n            ...createToastArguments(\r\n                translation.messages.switchedToSimulation(simulationName),\r\n                'arrow_right_alt'\r\n            )\r\n        )\r\n    } else {\r\n        throw new SimulationError(\r\n            `Renderer not found while trying to switch to simulation '${simulationName}'`\r\n        )\r\n    }\r\n}\r\n","import { useObservable } from 'rxjs-hooks'\r\nimport currentLanguageSubject from '../subjects/currentLanguageSubject'\r\nimport { translations } from '../constants'\r\n\r\n/**\r\n * Hook to get the current translation\r\n */\r\nexport const useTranslation = () => {\r\n    const currentLanguage = useObservable(\r\n        () => currentLanguageSubject,\r\n        'english'\r\n    )\r\n    const translation = translations[currentLanguage]\r\n\r\n    return translation\r\n}\r\n","import { rendererSubject } from '../../core/subjects/rendererSubject'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\n\r\n/**\r\n * Gets the current simulation renderer\r\n *\r\n * @throws SimulationError no renderer was found\r\n */\r\nexport const getRendererSafely = () => {\r\n    const renderer = rendererSubject.value\r\n\r\n    if (!renderer) {\r\n        throw new SimulationError(`Renderer not found`)\r\n    }\r\n\r\n    return renderer\r\n}\r\n","import React, { useState } from 'react'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Menu from '@material-ui/core/Menu'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { saveStore } from '../../saving/stores/saveStore'\r\nimport { BehaviorSubject } from 'rxjs'\r\nimport { useObservable } from 'rxjs-hooks'\r\nimport { switchTo } from '../../saving/helpers/switchTo'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\nimport { icons } from '../constants'\r\nimport { useTranslation } from '../../internalisation/helpers/useLanguage'\r\nimport { getTemplateSafely } from '../../logic-gates/helpers/getTemplateSafely'\r\nimport { getRendererSafely } from '../../logic-gates/helpers/getRendererSafely'\r\n\r\n/**\r\n * Returns a list with the names of all saved simulations\r\n */\r\nconst allSimulations = () => {\r\n    return saveStore.ls()\r\n}\r\n\r\n/**\r\n * Subject to make React update the dom when new simulations are stored\r\n */\r\nconst allSimulationSubject = new BehaviorSubject<string[]>([])\r\n\r\n/**\r\n * Triggers a dom update by pushing a new value to the\r\n * useObservable hook inside the React component.\r\n *\r\n * It also has the side effect of sorting the simulation names.\r\n */\r\nconst updateSimulationList = () => {\r\n    allSimulationSubject.next(allSimulations().sort())\r\n}\r\n\r\n/**\r\n * Component wich contains the sidebar 'Open simulation' button\r\n *\r\n * @throws SimulationError if the data about a simulation cant be found in localStorage\r\n */\r\nconst OpenSimulation = () => {\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\r\n    const simulations = useObservable(() => allSimulationSubject, [])\r\n\r\n    const translation = useTranslation()\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem\r\n                button\r\n                onClick={event => {\r\n                    updateSimulationList()\r\n                    setAnchorEl(event.currentTarget)\r\n                }}\r\n            >\r\n                <ListItemIcon>\r\n                    <Icon>folder_open</Icon>\r\n                </ListItemIcon>\r\n                <ListItemText>\r\n                    {translation.sidebar.openSimulation}\r\n                </ListItemText>\r\n            </ListItem>\r\n\r\n            <Menu\r\n                keepMounted\r\n                anchorEl={anchorEl}\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                {simulations\r\n                    .filter(\r\n                        name =>\r\n                            simulations.length < 2 ||\r\n                            name !== getRendererSafely().simulation.name\r\n                    )\r\n                    .map((simulationName, index) => {\r\n                        const simulationData = saveStore.get(simulationName)\r\n\r\n                        if (!simulationData) {\r\n                            throw new SimulationError(\r\n                                `Cannot get data for simulation ${simulationName}`\r\n                            )\r\n                        }\r\n\r\n                        return (\r\n                            <MenuItem\r\n                                key={index}\r\n                                onClick={() => {\r\n                                    switchTo(simulationName)\r\n                                    handleClose()\r\n                                }}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <Icon>\r\n                                        {\r\n                                            icons.simulationMode[\r\n                                                simulationData.simulation.mode\r\n                                            ]\r\n                                        }\r\n                                    </Icon>\r\n                                </ListItemIcon>\r\n                                <Typography style={{ flexGrow: 1 }}>\r\n                                    {simulationName}\r\n                                </Typography>\r\n                            </MenuItem>\r\n                        )\r\n                    })}\r\n            </Menu>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OpenSimulation\r\n","import { Subject, BehaviorSubject } from 'rxjs'\r\nimport { take } from 'rxjs/operators'\r\n\r\nexport type InputAction = 'quit' | 'submit'\r\n\r\nexport const InputStore = {\r\n    async get(text: string) {\r\n        InputStore.open(text)\r\n\r\n        const action = await InputStore.actions.pipe(take(1)).toPromise()\r\n\r\n        InputStore.close()\r\n\r\n        if (action === 'quit') {\r\n            return null\r\n        }\r\n\r\n        return InputStore.data.output.value\r\n    },\r\n    open(text: string) {\r\n        InputStore.data.open.next(true)\r\n        InputStore.data.output.next('')\r\n        InputStore.data.question.next(text)\r\n    },\r\n    close() {\r\n        InputStore.data.open.next(false)\r\n    },\r\n    data: {\r\n        question: new BehaviorSubject(''),\r\n        output: new BehaviorSubject(''),\r\n        open: new BehaviorSubject(false)\r\n    },\r\n    actions: new Subject<InputAction>()\r\n}\r\n","import { BehaviorSubject, Subject } from 'rxjs'\r\nimport { take } from 'rxjs/operators'\r\nimport { simulationMode } from '../../saving/types/SimulationSave'\r\nimport { InputStore } from '../../input/stores/InputStore'\r\nimport { CurrentLanguage } from '../../internalisation/stores/currentLanguage'\r\n\r\nexport type CreateSimulationStoreAction = 'quit' | 'submit'\r\n\r\nexport const CreateSimulationStore = {\r\n    create: async () => {\r\n        CreateSimulationStore.open()\r\n\r\n        const action = await CreateSimulationStore.actions\r\n            .pipe(take(1))\r\n            .toPromise()\r\n\r\n        const translation = CurrentLanguage.getTranslation()\r\n\r\n        CreateSimulationStore.close()\r\n\r\n        if (action === 'quit') {\r\n            return null\r\n        }\r\n\r\n        const name = await InputStore.get(\r\n            translation.createSimulation.name.question\r\n        )\r\n\r\n        if (!name) {\r\n            return null\r\n        }\r\n\r\n        return {\r\n            mode: CreateSimulationStore.data.output.value,\r\n            name\r\n        }\r\n    },\r\n    open() {\r\n        CreateSimulationStore.data.open.next(true)\r\n    },\r\n    close() {\r\n        CreateSimulationStore.data.open.next(false)\r\n    },\r\n    data: {\r\n        open: new BehaviorSubject(false),\r\n        output: new BehaviorSubject<simulationMode>('project')\r\n    },\r\n    actions: new Subject<CreateSimulationStoreAction>()\r\n}\r\n","import { CreateSimulationStore } from '../stores/CreateSimulationStore'\r\nimport { initSimulation } from '../../saving/helpers/initSimulation'\r\nimport { switchTo } from '../../saving/helpers/switchTo'\r\n\r\nexport const handleCreating = async () => {\r\n    const options = await CreateSimulationStore.create()\r\n\r\n    if (!options) return null\r\n\r\n    const simulation = initSimulation(options.name, options.mode)\r\n\r\n    switchTo(options.name)\r\n\r\n    return simulation\r\n}\r\n","import React from 'react'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport { handleCreating } from '../../create-simulation/helpers/handleCreating'\r\nimport { useTranslation } from '../../internalisation/helpers/useLanguage'\r\n\r\n/**\r\n * The component for the 'Create simulation' button from the top of the sidebar.\r\n *\r\n * The only way i found to apply a different color to the ListItem button was\r\n * by using !important in the scss.\r\n */\r\nconst CreateSimulationButton = () => {\r\n    const translation = useTranslation()\r\n\r\n    return (\r\n        <ListItem button className=\"contained\" onClick={handleCreating}>\r\n            <ListItemIcon>\r\n                <Icon>note_add</Icon>\r\n            </ListItemIcon>\r\n            <ListItemText>{translation.sidebar.createSimulation}</ListItemText>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default CreateSimulationButton\r\n","import { BehaviorSubject } from 'rxjs'\r\nimport { templateStore } from '../../saving/stores/templateStore'\r\n\r\n/**\r\n * Subject containing a list with the names of all logic gate templates\r\n */\r\nexport const LogicGateList = new BehaviorSubject<string[]>([])\r\n\r\n/**\r\n * Helper method to update the list of logic gate templates.\r\n */\r\nexport const updateLogicGateList = () => {\r\n    LogicGateList.next(templateStore.ls())\r\n}\r\n","import { vector2 } from '../../../common/math/types/vector2'\r\n\r\n// Basic stuff for arrays\r\n\r\n// If i don't say vector2 as the type adnotation\r\n// ts will throw some errors (because this is recursive)\r\nexport const add = (...vectors: vector2[]): vector2 => {\r\n    const first = vectors[0]\r\n    const others = vectors.slice(1)\r\n    const othersSum = others.length > 1 ? add(...others) : others[0]\r\n\r\n    return first.map((value, index) => value + othersSum[index]) as vector2\r\n}\r\n\r\n// This just vhanges the direction of the vector\r\nexport const invert = (vector: vector2) => vector.map(val => -val) as vector2\r\n\r\n// This gets the length of a vector\r\nexport const length = (vector: vector2) =>\r\n    Math.sqrt(vector[0] ** 2 + vector[1] ** 2)\r\n\r\n// This multiplies a vector with a scalaer\r\nexport const multiply = (vector: vector2, scalar: number) =>\r\n    vector.map(val => val * scalar) as vector2\r\n\r\n// This makese the length of the vector 1\r\nexport const normalise = (vector: vector2) => {\r\n    const size = length(vector)\r\n\r\n    return vector.map(val => val / size) as vector2\r\n}\r\n\r\n// This changes the length of the vector to some valie\r\nexport const ofLength = (vector: vector2, l: number) => {\r\n    return multiply(vector, l / length(vector))\r\n}\r\n\r\n// This returns a vector relative to the other\r\nexport const relativeTo = (vector: vector2, other: vector2) =>\r\n    add(other, invert(vector))\r\n\r\nexport const inverse = (vector: vector2) => vector.map(a => 1 / a) as vector2\r\n","/**\r\n * Returns a random element of the aray\r\n *\r\n * @param arr - the array to choose from\r\n */\r\nexport const randomItem = <T>(arr: T[]): T =>\r\n    arr[Math.floor(Math.random() * arr.length)]\r\n","import { GateTag } from '../simulation/types/GateTemplate'\r\n\r\nexport const gateIcons: Record<GateTag, string> = {\r\n    base: 'house',\r\n    imported: 'share',\r\n    integrated: 'memory'\r\n}\r\n","import { templateStore } from '../../saving/stores/templateStore'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\nimport { completeTemplate } from './completeTemplate'\r\n\r\n/**\r\n * Gets a gate template from localStorage\r\n *\r\n * @param name - The name of the template\r\n *\r\n * @throws SimulationError if the template cant be found\r\n */\r\nexport const getTemplateSafely = (name: string) => {\r\n    const template = completeTemplate(templateStore.get(name) || {})\r\n\r\n    if (!template) {\r\n        throw new SimulationError(`Template ${name} cannot be found`)\r\n    }\r\n\r\n    return template\r\n}\r\n","import './LogicGateModal.scss'\r\nimport React from 'react'\r\nimport { BehaviorSubject } from 'rxjs'\r\nimport { useObservable } from 'rxjs-hooks'\r\nimport { LogicGateList } from '../subjects/LogicGateList'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { addGate } from '../../simulation/helpers/addGate'\r\nimport { randomItem } from '../../internalisation/helpers/randomItem'\r\nimport { gateIcons } from '../constants'\r\nimport { getTemplateSafely } from '../helpers/getTemplateSafely'\r\nimport { getRendererSafely } from '../helpers/getRendererSafely'\r\n\r\n/**\r\n * Subject containing the open state of the modal\r\n */\r\nexport const open = new BehaviorSubject(false)\r\n\r\n/**\r\n * helper to close the modal\r\n */\r\nexport const handleClose = () => {\r\n    open.next(false)\r\n}\r\n\r\n/**\r\n * The component containing the info / actions about all logic gates\r\n */\r\nconst LogicGateModal = () => {\r\n    const openSnapshot = useObservable(() => open, false)\r\n    const gates = useObservable(() => LogicGateList, [])\r\n    const renderer = getRendererSafely()\r\n\r\n    return (\r\n        <div\r\n            className={openSnapshot ? 'visible' : ''}\r\n            id=\"logic-gate-modal-container\"\r\n            onClick={handleClose}\r\n        >\r\n            <div className=\"logic-gate-item\">---</div>\r\n            {gates\r\n                .map(getTemplateSafely)\r\n                .filter(template => {\r\n                    return (\r\n                        renderer.simulation.mode === 'project' ||\r\n                        template.metadata.name !== renderer.simulation.name\r\n                    )\r\n                })\r\n                .map((template, index) => {\r\n                    const { name } = template.metadata\r\n\r\n                    return (\r\n                        <div\r\n                            key={index}\r\n                            className=\"logic-gate-item\"\r\n                            onClick={() => {\r\n                                addGate(renderer, name)\r\n                            }}\r\n                        >\r\n                            <Icon className=\"lgi-icon logic-gate-item-type\">\r\n                                {gateIcons[template.tags[0]]}\r\n                            </Icon>\r\n                            <Typography className=\"logic-gate-item-name\">\r\n                                {name}\r\n                            </Typography>\r\n                            {template.info.length ? (\r\n                                <a\r\n                                    target=\"_blank\"\r\n                                    className=\"logic-gate-item-info\"\r\n                                    href={randomItem(template.info)}\r\n                                    onClick={e => {\r\n                                        e.stopPropagation()\r\n                                        // e.preventDefault()\r\n                                    }}\r\n                                >\r\n                                    <Icon className=\"lgi-icon\">info</Icon>\r\n                                </a>\r\n                            ) : (\r\n                                ''\r\n                            )}\r\n                        </div>\r\n                    )\r\n                })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LogicGateModal\r\n","import { templateStore } from '../../saving/stores/templateStore'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\nimport { Gate } from '../classes/Gate'\r\nimport { add, relativeTo, multiply } from '../../vector2/helpers/basic'\r\nimport { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\nimport { DefaultGateTemplate } from '../constants'\r\nimport { vector2 } from '../../../common/math/classes/Transform'\r\nimport { Screen } from '../../screen/helpers/Screen'\r\n\r\nexport const addGate = (renderer: SimulationRenderer, templateName: string) => {\r\n    const template = templateStore.get(templateName)\r\n\r\n    if (!template)\r\n        throw new SimulationError(`Cannot find template ${templateName}`)\r\n\r\n    const gate = new Gate(template)\r\n\r\n    const gateScale =\r\n        template.shape && template.shape.scale\r\n            ? (template.shape.scale as vector2)\r\n            : DefaultGateTemplate.shape.scale\r\n\r\n    const origin = relativeTo(\r\n        multiply(gateScale, 0.5),\r\n        relativeTo(renderer.camera.transform.position, Screen.center)\r\n    )\r\n\r\n    const scalarOffset = renderer.options.spawning.spawnOffset\r\n    const offset = multiply([scalarOffset, scalarOffset], renderer.spawnCount)\r\n\r\n    gate.transform.position = add(origin, offset)\r\n\r\n    renderer.simulation.push(gate)\r\n    renderer.spawnCount++\r\n}\r\n","import React from 'react'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport { useTranslation } from '../../internalisation/helpers/useLanguage'\r\nimport { open } from '../../logic-gates/components/LogicGateModal'\r\nimport { updateLogicGateList } from '../../logic-gates/subjects/LogicGateList'\r\n\r\n/**\r\n * Component wich contains the sidebar 'Open simulation' button\r\n *\r\n * @throws SimulationError if the data about a simulation cant be found in localStorage\r\n */\r\nconst LogicGates = () => {\r\n    const translation = useTranslation()\r\n\r\n    return (\r\n        <ListItem\r\n            button\r\n            onClick={() => {\r\n                updateLogicGateList()\r\n                open.next(true)\r\n            }}\r\n        >\r\n            <ListItemIcon>\r\n                <Icon>memory</Icon>\r\n            </ListItemIcon>\r\n            <ListItemText>{translation.sidebar.logicGates}</ListItemText>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default LogicGates\r\n","import {\r\n    CurrentLanguage,\r\n    CurrentLanguageLocalStore\r\n} from '../stores/currentLanguage'\r\nimport { allSupportedLanguages } from '../constants'\r\n\r\n/**\r\n * Changes the language to the next one avabile\r\n */\r\nexport const nextLanguage = () => {\r\n    const current = CurrentLanguage.get()\r\n    const index = allSupportedLanguages.indexOf(current)\r\n\r\n    CurrentLanguage.set(\r\n        allSupportedLanguages[(index + 1) % allSupportedLanguages.length]\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemIconText from '@material-ui/core/ListItemText'\r\nimport { useTranslation } from '../../internalisation/helpers/useLanguage'\r\nimport { nextLanguage } from '../../internalisation/helpers/nextLanguage'\r\nimport './Language.scss'\r\n\r\n/**\r\n * The language component from the sidebar\r\n */\r\nconst Language = () => {\r\n    const translation = useTranslation()\r\n\r\n    return (\r\n        <List>\r\n            <ListItem button onClick={nextLanguage} id=\"language-button\">\r\n                <ListItemIcon>\r\n                    <Icon>language</Icon>\r\n                </ListItemIcon>\r\n                <ListItemIconText>\r\n                    {translation.sidebar.language}: {translation.language}\r\n                </ListItemIconText>\r\n            </ListItem>\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default Language\r\n","import { possibleAction } from '../types/possibleAction'\r\nimport { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\nimport { CurrentLanguage } from '../../internalisation/stores/currentLanguage'\r\nimport { getRendererSafely } from '../../logic-gates/helpers/getRendererSafely'\r\nimport { createToastArguments } from '../../toasts/helpers/createToastArguments'\r\nimport { actionIcons } from '../constants'\r\nimport { toast } from 'react-toastify'\r\nimport { Translation } from '../../internalisation/types/TranslationInterface'\r\n\r\n/**\r\n * Map used to get the correct message from any action name\r\n */\r\nexport const actionToMessageMap: Partial<\r\n    Record<possibleAction, keyof Translation['messages']>\r\n> = {\r\n    clean: 'cleaned',\r\n    refresh: 'refreshed',\r\n    undo: 'undone',\r\n    save: 'savedSimulation'\r\n}\r\n\r\nexport const createRendererAction = (\r\n    action: possibleAction,\r\n    callback: (renderer: SimulationRenderer) => void\r\n) => () => {\r\n    const translation = CurrentLanguage.getTranslation()\r\n    const renderer = getRendererSafely()\r\n\r\n    callback(renderer)\r\n\r\n    const messageName = actionToMessageMap[action]\r\n\r\n    if (messageName) {\r\n        toast(\r\n            ...createToastArguments(\r\n                translation.messages[messageName](renderer.simulation.name),\r\n                actionIcons[action]\r\n            )\r\n        )\r\n    }\r\n}\r\n","import { possibleAction } from '../types/possibleAction'\r\nimport { SidebarAction } from '../types/SidebarAction'\r\nimport { actionIcons } from '../constants'\r\nimport { createRendererAction } from './createRendererActions'\r\nimport { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\nimport { getRendererSafely } from '../../logic-gates/helpers/getRendererSafely'\r\n\r\nexport type ActionConfigFunction = (renderer: SimulationRenderer) => void\r\n\r\nexport type ActionConfigCallback =\r\n    | {\r\n          renderer?: boolean\r\n          run: ActionConfigFunction\r\n      }\r\n    | ActionConfigFunction\r\n\r\nexport const createActionConfig = <T extends possibleAction>(\r\n    name: T,\r\n    callback: ActionConfigCallback,\r\n    keybinding: string[] = []\r\n): Record<T, SidebarAction> => {\r\n    let action: ActionConfigFunction\r\n\r\n    if (callback instanceof Function) {\r\n        action = callback\r\n    } else {\r\n        if (callback.renderer !== false) {\r\n            action = createRendererAction(name, callback.run)\r\n        } else {\r\n            action = callback.run\r\n        }\r\n    }\r\n\r\n    return {\r\n        [name]: {\r\n            name,\r\n            action: () => {\r\n                action(getRendererSafely())\r\n            },\r\n            icon: actionIcons[name],\r\n            keybinding\r\n        }\r\n    }\r\n}\r\n","import { SimulationRenderer } from '../classes/SimulationRenderer'\r\nimport { selectionType } from '../types/selectionType'\r\n\r\n/**\r\n * Checks if an id is selected inside a renderer\r\n *\r\n * @param renderer The renderer to check for the id\r\n * @param gateId The id of the gate\r\n */\r\nexport const idIsSelected = (renderer: SimulationRenderer, gateId: number) => {\r\n    return renderer.allSelectedIds().has(gateId)\r\n}\r\n\r\n/**\r\n * Add an id to a selection set\r\n *\r\n * @param renderer The renderer to add the id to the selection set of\r\n * @param type The selection type\r\n * @param id The id to select\r\n */\r\nexport const addIdToSelection = (\r\n    renderer: SimulationRenderer,\r\n    type: selectionType = 'temporary',\r\n    id: number\r\n) => {\r\n    if (idIsSelected(renderer, id)) {\r\n        if (renderer.selectedGates.permanent.has(id)) {\r\n            return\r\n        } else if (type === 'temporary') {\r\n            renderer.selectedGates.temporary.delete(id)\r\n            renderer.selectedGates.permanent.add(id)\r\n        }\r\n    } else {\r\n        renderer.selectedGates[type].add(id)\r\n    }\r\n}\r\n","/**\r\n * Removes element from array efficiently\r\n * Based on a gist by the creator of rollup.\r\n *\r\n * @param arr The array to remove the element from\r\n * @param element The element to remove\r\n */\r\nexport const removeElement = <T>(arr: T[], element: T) => {\r\n    const index = arr.indexOf(element)\r\n    arr[index] = arr[arr.length - 1]\r\n    return arr.pop()\r\n}\r\n","import { SidebarAction } from './types/SidebarAction'\r\nimport { possibleAction } from './types/possibleAction'\r\nimport { save } from '../saving/helpers/save'\r\nimport { refresh } from './helpers/refresh'\r\nimport { undo } from './helpers/undo'\r\nimport { createActionConfig } from './helpers/createActionConfig'\r\nimport { selectAll } from './helpers/selectAll'\r\nimport { deleteSelection } from './helpers/deleteSelection'\r\nimport { cleanRenderer } from './helpers/clean'\r\nimport { deleteSimulation } from './helpers/deleteSimulation'\r\n\r\nexport const actionIcons: Record<possibleAction, string> = {\r\n    clean: 'clear',\r\n    refresh: 'refresh',\r\n    save: 'save',\r\n    undo: 'undo',\r\n    'select all': 'select_all',\r\n    'delete selection': 'delete',\r\n    'delete simulation': 'delete_forever'\r\n}\r\n\r\n/**\r\n * Array with all the actions for the SimulationAction component to render\r\n */\r\nexport const SidebarActions: Record<possibleAction, SidebarAction> = {\r\n    ...createActionConfig('save', save, ['ctrl', 's']),\r\n    ...createActionConfig(\r\n        'refresh',\r\n        {\r\n            run: refresh\r\n        },\r\n        ['ctrl', 'r']\r\n    ),\r\n    ...createActionConfig(\r\n        'undo',\r\n        {\r\n            run: undo\r\n        },\r\n        ['ctrl', 'z']\r\n    ),\r\n    ...createActionConfig(\r\n        'clean',\r\n        {\r\n            run: cleanRenderer\r\n        },\r\n        ['ctrl', 'delete']\r\n    ),\r\n    ...createActionConfig(\r\n        'delete simulation',\r\n        {\r\n            run: deleteSimulation\r\n        },\r\n        ['ctrl', 'shift', 'delete']\r\n    ),\r\n    ...createActionConfig('select all', selectAll, ['ctrl', 'a']),\r\n    ...createActionConfig('delete selection', deleteSelection, ['delete'])\r\n}\r\n","import { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\nimport { currentStore } from '../stores/currentStore'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\nimport { getRendererState } from './getState'\r\nimport { saveStore } from '../stores/saveStore'\r\nimport { toast } from 'react-toastify'\r\nimport { createToastArguments } from '../../toasts/helpers/createToastArguments'\r\nimport { CurrentLanguage } from '../../internalisation/stores/currentLanguage'\r\nimport { compileIc } from '../../integrated-circuits/helpers/compileIc'\r\n\r\n/**\r\n * Saves the state from a renderer in localStorage,\r\n * then notifies the user about it\r\n *\r\n * @throws SimulationError if the simulation name\r\n * cannot found in the currentStore\r\n *\r\n * @param renderer - the renderer to saev the state of\r\n */\r\nexport const save = (renderer: SimulationRenderer) => {\r\n    const current = currentStore.get()\r\n\r\n    if (current) {\r\n        const state = getRendererState(renderer)\r\n        const translation = CurrentLanguage.getTranslation()\r\n\r\n        saveStore.set(current, state)\r\n\r\n        if (state.simulation.mode === 'ic') {\r\n            compileIc(state.simulation)\r\n        }\r\n\r\n        toast(\r\n            ...createToastArguments(\r\n                translation.messages.savedSimulation(current),\r\n                'save'\r\n            )\r\n        )\r\n    } else {\r\n        throw new SimulationError(\r\n            'Cannot save without knowing the name of the active simulation'\r\n        )\r\n    }\r\n}\r\n","import { getRendererState } from '../../saving/helpers/getState'\r\nimport { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\n\r\n/**\r\n * Refreshes a simulations\r\n *\r\n * @param renderer - the renderer to refresh\r\n */\r\nexport const refresh = (renderer: SimulationRenderer) => {\r\n    renderer.loadSave(getRendererState(renderer))\r\n}\r\n","import { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\n\r\n/**\r\n * Undoes a simulation\r\n *\r\n * @param renderer - the renderer to undo the simulation of\r\n */\r\nexport const undo = (renderer: SimulationRenderer) => {\r\n    renderer.reloadSave()\r\n}\r\n","import { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\nimport { saveStore } from '../../saving/stores/saveStore'\r\nimport { removeElement } from '../../../common/lang/arrays/helpers/removeElement'\r\nimport { initSimulation } from '../../saving/helpers/initSimulation'\r\nimport { defaultSimulationName } from '../../saving/constants'\r\nimport { randomItem } from '../../internalisation/helpers/randomItem'\r\nimport { switchTo } from '../../saving/helpers/switchTo'\r\n\r\nexport const deleteSimulation = (renderer: SimulationRenderer) => {\r\n    const current = renderer.simulation.name\r\n\r\n    const others = saveStore.ls()\r\n    removeElement(others, current)\r\n\r\n    if (!others.length) {\r\n        initSimulation(defaultSimulationName, 'project')\r\n    }\r\n\r\n    const switchTarget = randomItem(others)\r\n    switchTo(switchTarget)\r\n\r\n    // actually delete simulation\r\n    saveStore.delete(current)\r\n}\r\n","import { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\nimport { addIdToSelection } from '../../simulationRenderer/helpers/idIsSelected'\r\n\r\n/**\r\n * Selects all the gates of an renderer\r\n *\r\n * @param renderer The renderer to selet all the gates of\r\n */\r\nexport const selectAll = (renderer: SimulationRenderer) => {\r\n    for (const { id } of renderer.simulation.gates) {\r\n        addIdToSelection(renderer, 'permanent', id)\r\n    }\r\n}\r\n","import { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\nimport { deleteGate } from '../../simulationRenderer/helpers/deleteGate'\r\n\r\nexport const deleteSelection = (renderer: SimulationRenderer) => {\r\n    for (const gate of renderer.getSelected()) {\r\n        deleteGate(renderer.simulation, gate)\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Menu from '@material-ui/core/Menu'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport { useTranslation } from '../../internalisation/helpers/useLanguage'\r\nimport { SidebarActions } from '../constants'\r\nimport { possibleAction } from '../types/possibleAction'\r\n\r\n/**\r\n * Component wich contains the sidebar 'Simulation' button\r\n */\r\nconst SimulationActions = () => {\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\r\n\r\n    const translation = useTranslation()\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItem\r\n                button\r\n                onClick={event => {\r\n                    setAnchorEl(event.currentTarget)\r\n                }}\r\n            >\r\n                <ListItemIcon>\r\n                    <Icon>insert_drive_file</Icon>\r\n                </ListItemIcon>\r\n                <ListItemText>{translation.sidebar.simulation}</ListItemText>\r\n            </ListItem>\r\n\r\n            <Menu\r\n                keepMounted\r\n                anchorEl={anchorEl}\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                {Object.values(SidebarActions).map(\r\n                    ({ icon, name, keybinding, action }, index) => {\r\n                        return (\r\n                            <MenuItem key={index} onClick={action}>\r\n                                <ListItemIcon>\r\n                                    <Icon>{icon}</Icon>\r\n                                </ListItemIcon>\r\n\r\n                                <ListItemText\r\n                                    primary={\r\n                                        translation.actions[\r\n                                            name as possibleAction\r\n                                        ]\r\n                                    }\r\n                                    secondary={(keybinding || []).join(' + ')}\r\n                                />\r\n                            </MenuItem>\r\n                        )\r\n                    }\r\n                )}\r\n            </Menu>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SimulationActions\r\n","import React from 'react'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport OpenSimulation from './OpenSimulation'\r\nimport CreateSimulationButton from './CreateSimulationButton'\r\nimport LogicGates from './LogicGates'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\nimport Language from './Language'\r\nimport SimulationActions from '../../simulation-actions/components/SimulationActions'\r\n/**\r\n * The width of the sidebar\r\n */\r\nexport const sidebarWidth = 240\r\n\r\n/**\r\n * The z-index of the sidebar.\r\n */\r\nconst sidebarZIndex = 5\r\n\r\n/**\r\n * The styles for the sidebar component\r\n */\r\nconst useStyles = makeStyles(\r\n    createStyles({\r\n        // This class is applied on the sidebar container\r\n        root: {\r\n            display: 'flex',\r\n            zIndex: sidebarZIndex\r\n        },\r\n\r\n        // This is the class of the actual sidebar\r\n        drawer: {\r\n            width: sidebarWidth,\r\n            zIndex: sidebarZIndex,\r\n            flexShrink: 0\r\n        },\r\n\r\n        // This is the class for the surface of the sidebar\r\n        drawerPaper: {\r\n            background: `#111111`,\r\n            padding: '4px',\r\n            width: sidebarWidth,\r\n            zIndex: sidebarZIndex\r\n        },\r\n\r\n        // This is the class for the main button list\r\n        list: {\r\n            flexGrow: 1\r\n        }\r\n    })\r\n)\r\n\r\n/**\r\n * The sidebar component\r\n */\r\nconst Sidebar = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"right\"\r\n                open={true}\r\n                classes={{\r\n                    paper: classes.drawerPaper\r\n                }}\r\n            >\r\n                <List component=\"nav\" className={classes.list}>\r\n                    <CreateSimulationButton />\r\n                    <OpenSimulation />\r\n                    <LogicGates />\r\n                    <SimulationActions />\r\n                </List>\r\n\r\n                <Language />\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { sidebarWidth } from '../../core/components/Sidebar'\r\n\r\n/**\r\n * Helper to get the width of the canvas\r\n */\r\nexport const getWidth = () => window.innerWidth - sidebarWidth\r\n","import { Transform } from '../../../common/math/classes/Transform'\r\nimport { BehaviorSubject, fromEvent } from 'rxjs'\r\nimport { map } from 'rxjs/operators'\r\nimport { getWidth } from '../helpers/getWidth'\r\n\r\nconst width = new BehaviorSubject(getWidth())\r\nconst height = new BehaviorSubject(window.innerHeight)\r\n\r\nconst resize = fromEvent(window, 'resize')\r\n\r\nresize.pipe(map(getWidth)).subscribe(val => width.next(val))\r\nresize.pipe(map(() => window.innerHeight)).subscribe(val => height.next(val))\r\n\r\n/**\r\n * The main screen transform\r\n */\r\nconst Screen = new Transform()\r\n\r\nwidth.subscribe(currentWidth => {\r\n    Screen.width = currentWidth\r\n})\r\n\r\nheight.subscribe(currentHeight => {\r\n    Screen.height = currentHeight\r\n})\r\n\r\nexport { Screen, height, width }\r\n","import React, { RefObject, forwardRef, MouseEvent, WheelEvent } from 'react'\r\nimport { useObservable } from 'rxjs-hooks'\r\nimport { Subject } from 'rxjs'\r\nimport { mouseButton } from '../types/mouseButton'\r\nimport { MouseEventInfo } from './MouseEventInfo'\r\nimport { width, height } from '../../screen/helpers/Screen'\r\n\r\nexport interface FluidCanvasProps {\r\n    mouseDownOuput: Subject<MouseEventInfo>\r\n    mouseUpOutput: Subject<MouseEventInfo>\r\n    mouseMoveOutput: Subject<MouseEventInfo>\r\n}\r\n\r\nexport const getEventInfo = (\r\n    e: MouseEvent<HTMLCanvasElement>\r\n): MouseEventInfo => {\r\n    return {\r\n        button: e.button as mouseButton,\r\n        position: [e.clientX, e.clientY]\r\n    }\r\n}\r\n\r\nexport const mouseEventHandler = (output: Subject<MouseEventInfo>) => (\r\n    e: MouseEvent<HTMLCanvasElement>\r\n) => {\r\n    output.next(getEventInfo(e))\r\n}\r\n\r\nconst FluidCanvas = forwardRef(\r\n    (props: FluidCanvasProps, ref: RefObject<HTMLCanvasElement>) => {\r\n        const currentWidth = useObservable(() => width, 0)\r\n        const currentHeight = useObservable(() => height, 0)\r\n\r\n        return (\r\n            <canvas\r\n                ref={ref}\r\n                width={currentWidth}\r\n                height={currentHeight}\r\n                onMouseDown={mouseEventHandler(props.mouseDownOuput)}\r\n                onMouseUp={mouseEventHandler(props.mouseUpOutput)}\r\n                onMouseMove={mouseEventHandler(props.mouseMoveOutput)}\r\n            />\r\n        )\r\n    }\r\n)\r\n\r\nexport default FluidCanvas\r\n","import { Transform } from '../classes/Transform'\r\nimport { vector2 } from '../types/vector2'\r\n\r\nexport const pointInSquare = (point: vector2, square: Transform) => {\r\n    return (\r\n        point[0] >= square.minX &&\r\n        point[0] <= square.maxX &&\r\n        point[1] >= square.minY &&\r\n        point[1] <= square.maxY\r\n    )\r\n}\r\n","import { vector2 } from '../../../common/math/types/vector2'\r\nimport { add, invert } from './basic'\r\n\r\nconst { cos, sin } = Math\r\n\r\nexport const rotate = (vector: vector2, angle: number): vector2 => {\r\n    const x = cos(angle) * vector[0] - sin(angle) * vector[1]\r\n    const y = sin(angle) * vector[0] + cos(angle) * vector[1]\r\n\r\n    return [x, y]\r\n}\r\n\r\nexport const rotateAroundVector = (\r\n    vector: vector2,\r\n    around: vector2,\r\n    angle: number\r\n) => {\r\n    const translated = add(vector, invert(around))\r\n    const rotated = rotate(translated, angle)\r\n\r\n    return add(rotated, around)\r\n}\r\n","import { Transform } from '../../../common/math/classes/Transform'\r\nimport { Gate, PinWrapper } from '../../simulation/classes/Gate'\r\nimport { Pin } from '../../simulation/classes/Pin'\r\nimport { SimulationRenderer } from '../classes/SimulationRenderer'\r\nimport { vector2 } from '../../../common/math/types/vector2'\r\nimport { rotateAroundVector } from '../../vector2/helpers/rotate'\r\n\r\nexport const calculatePinY = (\r\n    transform: Transform,\r\n    index: number,\r\n    total: number\r\n) => {\r\n    const space = transform.height / total\r\n\r\n    return (space * (2 * index + 1)) / 2\r\n}\r\n\r\nexport const calculatePinStart = (\r\n    transform: Transform,\r\n    type: number,\r\n    width: number\r\n) => {\r\n    const direction = (type >> 1) & 1\r\n    const start =\r\n        transform.x + direction * transform.width - Number(!direction) * width\r\n\r\n    return start\r\n}\r\n\r\nexport const calculatePinx = (\r\n    start: number,\r\n    type: number,\r\n    connectionLength: number\r\n) => {\r\n    return start + ((type >> 1) & 1) * connectionLength\r\n}\r\n\r\nexport const getPinPosition = (\r\n    renderer: SimulationRenderer,\r\n    transform: Transform,\r\n    pin: PinWrapper\r\n) => {\r\n    const { connectionLength } = renderer.options.gates\r\n\r\n    // render little connection\r\n    const start = calculatePinStart(\r\n        transform,\r\n        pin.value.type,\r\n        renderer.options.gates.connectionLength\r\n    )\r\n\r\n    const height = calculatePinY(transform, pin.index, pin.total)\r\n\r\n    const pinX = calculatePinx(start, pin.value.type, connectionLength)\r\n    const pinY = height + transform.y\r\n\r\n    // rotate\r\n    const notRotated: vector2 = [pinX, pinY]\r\n    const rotated = rotateAroundVector(\r\n        notRotated,\r\n        transform.center,\r\n        transform.rotation\r\n    )\r\n\r\n    return rotated\r\n}\r\n","import { clamp } from '../../simulation/helpers/clamp'\r\nimport { Camera } from '../classes/Camera'\r\nimport { vector2 } from '../../../common/math/classes/Transform'\r\nimport { MouseEventInfo } from '../../core/components/MouseEventInfo'\r\nimport { Screen } from '../../screen/helpers/Screen'\r\n\r\nconst scrollStep = 1.3\r\nconst zoomLimits = [0.1, 10]\r\n\r\nlet absoluteMousePosition = [Screen.width / 2, Screen.height]\r\n\r\nexport const updateMouse = (e: MouseEventInfo) => {\r\n    absoluteMousePosition = e.position\r\n}\r\n\r\nexport const handleScroll = (e: WheelEvent, camera: Camera) => {\r\n    const sign = -e.deltaY / Math.abs(e.deltaY)\r\n    const zoom = scrollStep ** sign\r\n\r\n    const mouseFraction = Screen.scale.map(\r\n        (value, index) => absoluteMousePosition[index] / value\r\n    )\r\n    const newScale = camera.transform.scale.map(value =>\r\n        clamp(zoomLimits[0], zoomLimits[1], value * zoom)\r\n    )\r\n    const delta = camera.transform.scale.map(\r\n        (value, index) =>\r\n            Screen.scale[index] *\r\n            (newScale[index] - value) *\r\n            mouseFraction[index]\r\n    )\r\n\r\n    camera.transform.scale = newScale as vector2\r\n    camera.transform.position = camera.transform.position.map(\r\n        (value, index) => value - delta[index]\r\n    ) as vector2\r\n}\r\n","import { InputStore } from '../../input/stores/InputStore'\r\nimport { open as logicGateModalIsOpen } from '../../logic-gates/components/LogicGateModal'\r\nimport { CreateSimulationStore } from '../../create-simulation/stores/CreateSimulationStore'\r\n\r\nexport const modalIsOpen = () => {\r\n    return (\r\n        InputStore.data.open.value ||\r\n        logicGateModalIsOpen.value ||\r\n        CreateSimulationStore.data.open.value\r\n    )\r\n}\r\n","import { Simulation } from '../classes/Simulation'\r\nimport { Wire } from '../classes/Wire'\r\nimport { removeElement } from '../../../common/lang/arrays/helpers/removeElement'\r\n\r\nexport const deleteWire = (simulation: Simulation, wire: Wire) => {\r\n    removeElement(simulation.wires, wire)\r\n\r\n    wire.dispose()\r\n}\r\n","/**\r\n * Transforms a set into an array\r\n *\r\n * @param set The set to convert\r\n */\r\nexport const setToArray = <T>(set: Set<T>) => Array.from(set.values())\r\n","import { Transform } from '../../../common/math/classes/Transform'\r\n\r\nexport const aabbCollisionDetection = (rect1: Transform, rect2: Transform) => {\r\n    return !(\r\n        rect1.maxX < rect2.minX ||\r\n        rect1.maxY < rect2.minY ||\r\n        rect1.minX > rect2.maxX ||\r\n        rect1.minY > rect2.maxY\r\n    )\r\n}\r\n","import { Gate } from '../../simulation/classes/Gate'\r\nimport { aabbCollisionDetection } from './aabb'\r\nimport { Transform } from '../../../common/math/classes/Transform'\r\nimport { pointInSquare } from '../../../common/math/helpers/pointInSquare'\r\n\r\n/**\r\n * Finds all selections in the selected area\r\n *\r\n * @param renderer The renderer to find the selected gates of\r\n */\r\nexport const gatesInSelection = (\r\n    selectedArea: Transform,\r\n    gates: Gate[] = []\r\n) => {\r\n    return gates.filter(({ transform }) => {\r\n        if (aabbCollisionDetection(transform, selectedArea)) {\r\n            return true\r\n        }\r\n\r\n        for (const point of transform.getPoints()) {\r\n            if (pointInSquare(point, selectedArea)) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    })\r\n}\r\n","import { Camera } from './Camera'\r\nimport { Simulation } from '../../simulation/classes/Simulation'\r\nimport { Subject } from 'rxjs'\r\nimport { MouseEventInfo } from '../../core/components/MouseEventInfo'\r\nimport { pointInSquare } from '../../../common/math/helpers/pointInSquare'\r\nimport { vector2 } from '../../../common/math/types/vector2'\r\nimport { relativeTo, add, invert } from '../../vector2/helpers/basic'\r\nimport { SimulationRendererOptions } from '../types/SimulationRendererOptions'\r\nimport {\r\n    defaultSimulationRendererOptions,\r\n    mouseButtons,\r\n    shiftInput\r\n} from '../constants'\r\nimport { getPinPosition } from '../helpers/pinPosition'\r\nimport { pointInCircle } from '../../../common/math/helpers/pointInCircle'\r\nimport { SelectedPins } from '../types/SelectedPins'\r\nimport { Wire } from '../../simulation/classes/Wire'\r\nimport { currentStore } from '../../saving/stores/currentStore'\r\nimport { saveStore } from '../../saving/stores/saveStore'\r\nimport {\r\n    fromSimulationState,\r\n    fromCameraState\r\n} from '../../saving/helpers/fromState'\r\nimport merge from 'deepmerge'\r\nimport { updateMouse, handleScroll } from '../helpers/scaleCanvas'\r\nimport { RefObject } from 'react'\r\nimport { dumpSimulation } from '../../saving/helpers/dumpSimulation'\r\nimport { modalIsOpen } from '../../modals/helpers/modalIsOpen'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\nimport { deleteWire } from '../../simulation/helpers/deleteWire'\r\nimport { RendererState } from '../../saving/types/SimulationSave'\r\nimport { setToArray } from '../../../common/lang/arrays/helpers/setToArray'\r\nimport { Transform } from '../../../common/math/classes/Transform'\r\nimport { gatesInSelection } from '../helpers/gatesInSelection'\r\nimport { selectionType } from '../types/selectionType'\r\nimport { addIdToSelection, idIsSelected } from '../helpers/idIsSelected'\r\n\r\nexport class SimulationRenderer {\r\n    public mouseDownOutput = new Subject<MouseEventInfo>()\r\n    public mouseUpOutput = new Subject<MouseEventInfo>()\r\n    public mouseMoveOutput = new Subject<MouseEventInfo>()\r\n    public wheelOutput = new Subject<unknown>()\r\n\r\n    public selectedGates: Record<selectionType, Set<number>> = {\r\n        temporary: new Set<number>(),\r\n        permanent: new Set<number>()\r\n    }\r\n\r\n    public options: SimulationRendererOptions\r\n    public camera = new Camera()\r\n\r\n    public selectedArea = new Transform()\r\n\r\n    // first bit = dragging\r\n    // second bit = panning around\r\n    // third bit = selecting\r\n    public mouseState = 0b000\r\n\r\n    public lastMousePosition: vector2 = [0, 0]\r\n\r\n    // this is used for spawning gates\r\n    public spawnCount = 0\r\n\r\n    public selectedPins: SelectedPins = {\r\n        start: null,\r\n        end: null\r\n    }\r\n\r\n    public constructor(\r\n        public ref: RefObject<HTMLCanvasElement>,\r\n        options: Partial<SimulationRendererOptions> = {},\r\n        public simulation = new Simulation('project', 'default')\r\n    ) {\r\n        this.options = merge(defaultSimulationRendererOptions, options)\r\n\r\n        this.init()\r\n    }\r\n\r\n    public init() {\r\n        this.mouseDownOutput.subscribe(event => {\r\n            const worldPosition = this.camera.toWordPostition(event.position)\r\n            const gates = Array.from(this.simulation.gates)\r\n\r\n            this.lastMousePosition = worldPosition\r\n\r\n            // We need to iterate from the last to the first\r\n            // because if we have 2 overlapping gates,\r\n            // we want to select the one on top\r\n            for (let index = gates.length - 1; index >= 0; index--) {\r\n                const { transform, id, pins } = gates[index]\r\n\r\n                if (\r\n                    event.button === mouseButtons.drag &&\r\n                    pointInSquare(worldPosition, transform)\r\n                ) {\r\n                    gates[index].onClick()\r\n\r\n                    this.mouseState |= 1\r\n\r\n                    if (!idIsSelected(this, id)) {\r\n                        this.clearSelection()\r\n                        addIdToSelection(this, 'temporary', id)\r\n                    }\r\n\r\n                    const gateNode = this.simulation.gates.get(id)\r\n\r\n                    if (gateNode) {\r\n                        return this.simulation.gates.moveOnTop(gateNode)\r\n                    } else {\r\n                        throw new SimulationError(\r\n                            `Cannot find gate with id ${id}`\r\n                        )\r\n                    }\r\n                }\r\n\r\n                for (const pin of pins) {\r\n                    const position = getPinPosition(this, transform, pin)\r\n\r\n                    if (\r\n                        pointInCircle(\r\n                            worldPosition,\r\n                            position,\r\n                            this.options.gates.pinRadius\r\n                        )\r\n                    ) {\r\n                        if (pin.value.pairs.size) {\r\n                            if (pin.value.type & 1) {\r\n                                const wire = this.simulation.wires.find(\r\n                                    wire => wire.end.value === pin.value\r\n                                )\r\n\r\n                                if (wire) {\r\n                                    deleteWire(this.simulation, wire)\r\n                                } else {\r\n                                    throw new SimulationError(\r\n                                        `Cannot find wire to remove`\r\n                                    )\r\n                                }\r\n\r\n                                return\r\n                            }\r\n                        }\r\n\r\n                        if (\r\n                            this.selectedPins.start &&\r\n                            pin.value === this.selectedPins.start.wrapper.value\r\n                        ) {\r\n                            this.selectedPins.start = null\r\n                            this.selectedPins.end = null\r\n                        } else if (\r\n                            this.selectedPins.end &&\r\n                            pin.value === this.selectedPins.end.wrapper.value\r\n                        ) {\r\n                            this.selectedPins.start = null\r\n                            this.selectedPins.end = null\r\n                        } else if ((pin.value.type & 2) >> 1) {\r\n                            this.selectedPins.start = {\r\n                                wrapper: pin,\r\n                                transform\r\n                            }\r\n                        } else if (pin.value.type & 1) {\r\n                            this.selectedPins.end = {\r\n                                wrapper: pin,\r\n                                transform\r\n                            }\r\n                        }\r\n\r\n                        if (this.selectedPins.start && this.selectedPins.end) {\r\n                            this.simulation.wires.push(\r\n                                new Wire(\r\n                                    this.selectedPins.start.wrapper,\r\n                                    this.selectedPins.end.wrapper\r\n                                )\r\n                            )\r\n                            this.selectedPins.start = null\r\n                            this.selectedPins.end = null\r\n                        }\r\n\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!shiftInput.value && event.button === mouseButtons.unselect) {\r\n                this.clearSelection()\r\n            }\r\n\r\n            if (event.button === mouseButtons.pan) {\r\n                // the second bit = pannning\r\n                this.mouseState |= 0b10\r\n            } else if (event.button === mouseButtons.select) {\r\n                this.selectedArea.position = this.lastMousePosition\r\n                this.selectedArea.scale = [0, 0]\r\n\r\n                // the third bit = selecting\r\n                this.mouseState |= 0b100\r\n            }\r\n        })\r\n\r\n        this.mouseUpOutput.subscribe(event => {\r\n            if (event.button === mouseButtons.drag) {\r\n                const selected = this.getSelected()\r\n\r\n                for (const gate of selected) {\r\n                    gate.transform.rotation = 0\r\n                }\r\n\r\n                this.selectedGates.temporary.clear()\r\n\r\n                // turn first 2 bits to 0\r\n                this.mouseState &= 1 << 2\r\n\r\n                // for debugging\r\n                if ((this.mouseState >> 1) & 1 || this.mouseState & 1) {\r\n                    throw new SimulationError(\r\n                        'First 2 bits of mouseState need to be set to 0'\r\n                    )\r\n                }\r\n            }\r\n\r\n            if (\r\n                event.button === mouseButtons.select &&\r\n                (this.mouseState >> 2) & 1\r\n            ) {\r\n                // turn the third bit to 0\r\n                this.mouseState &= (1 << 2) - 1\r\n\r\n                const selectedGates = gatesInSelection(\r\n                    this.selectedArea,\r\n                    Array.from(this.simulation.gates)\r\n                )\r\n\r\n                for (const { id } of selectedGates) {\r\n                    addIdToSelection(this, 'permanent', id)\r\n\r\n                    const node = this.simulation.gates.get(id)\r\n\r\n                    if (node) {\r\n                        this.simulation.gates.moveOnTop(node)\r\n                    } else {\r\n                        throw new SimulationError(\r\n                            `Cannot find node in gate storage with id ${id}`\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        this.mouseMoveOutput.subscribe(event => {\r\n            updateMouse(event)\r\n\r\n            const worldPosition = this.camera.toWordPostition(event.position)\r\n\r\n            const offset = invert(\r\n                relativeTo(this.lastMousePosition, worldPosition)\r\n            )\r\n\r\n            const scaledOffset = offset.map(\r\n                (value, index) => value * this.camera.transform.scale[index]\r\n            ) as vector2\r\n\r\n            if (this.mouseState & 1) {\r\n                for (const gate of this.getSelected()) {\r\n                    const { transform } = gate\r\n\r\n                    transform.x -= offset[0]\r\n                    transform.y -= offset[1]\r\n                }\r\n            }\r\n\r\n            if ((this.mouseState >> 1) & 1) {\r\n                this.camera.transform.position = add(\r\n                    this.camera.transform.position,\r\n                    invert(scaledOffset)\r\n                )\r\n\r\n                this.spawnCount = 0\r\n            }\r\n\r\n            if ((this.mouseState >> 2) & 1) {\r\n                this.selectedArea.scale = relativeTo(\r\n                    this.selectedArea.position,\r\n                    this.camera.toWordPostition(event.position)\r\n                )\r\n            }\r\n\r\n            this.lastMousePosition = this.camera.toWordPostition(event.position)\r\n        })\r\n\r\n        this.reloadSave()\r\n    }\r\n\r\n    public updateWheelListener() {\r\n        if (this.ref.current) {\r\n            this.ref.current.addEventListener('wheel', event => {\r\n                if (!modalIsOpen()) {\r\n                    event.preventDefault()\r\n\r\n                    handleScroll(event, this.camera)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    public loadSave(save: RendererState) {\r\n        this.simulation = fromSimulationState(save.simulation)\r\n        this.camera = fromCameraState(save.camera)\r\n    }\r\n\r\n    public reloadSave() {\r\n        try {\r\n            dumpSimulation(this)\r\n\r\n            const current = currentStore.get()\r\n            const save = saveStore.get(current)\r\n\r\n            if (!save) return\r\n            if (!(save.simulation || save.camera)) return\r\n\r\n            this.loadSave(save)\r\n        } catch (e) {\r\n            throw new Error(\r\n                `An error occured while loading the save: ${e as Error}`\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all selected gates in the simulation\r\n     *\r\n     * @throws SimulationError if an id isnt valid\r\n     * @throws SimulationError if the id doesnt have a data prop\r\n     */\r\n    public getSelected() {\r\n        return setToArray(this.allSelectedIds()).map(id => {\r\n            const gate = this.simulation.gates.get(id)\r\n\r\n            if (!gate) {\r\n                throw new SimulationError(`Cannot find gate with id ${id}`)\r\n            } else if (!gate.data) {\r\n                throw new SimulationError(\r\n                    `Cannot find data of gate with id ${id}`\r\n                )\r\n            }\r\n\r\n            return gate.data\r\n        })\r\n    }\r\n\r\n    /**\r\n     * helper to merge the temporary and permanent selection\r\n     */\r\n    public allSelectedIds() {\r\n        return new Set([\r\n            ...setToArray(this.selectedGates.permanent),\r\n            ...setToArray(this.selectedGates.temporary)\r\n        ])\r\n    }\r\n\r\n    /**\r\n     * Helper to clear all selected sets\r\n     */\r\n    public clearSelection() {\r\n        this.selectedGates.permanent.clear()\r\n        this.selectedGates.temporary.clear()\r\n    }\r\n}\r\n","import { vector2 } from '../types/vector2'\r\nimport { length, relativeTo } from '../../../modules/vector2/helpers/basic'\r\n\r\nexport const pointInCircle = (\r\n    point: vector2,\r\n    center: vector2,\r\n    radius: number\r\n) => {\r\n    return length(relativeTo(point, center)) < radius\r\n}\r\n","export const clamp = (low: number, high: number, current: number) => {\r\n    if (current < low) return low\r\n    if (current > high) return high\r\n\r\n    return current\r\n}\r\n","import { Transform } from '../../math/classes/Transform'\r\nimport { multiply } from '../../../modules/vector2/helpers/basic'\r\n\r\n/**\r\n *\r\n * @param ctx The context to use\r\n * @param transform The transform to move relative to\r\n */\r\nexport const useTransform = (\r\n    ctx: CanvasRenderingContext2D,\r\n    { position, rotation, scale }: Transform\r\n) => {\r\n    ctx.translate(...position)\r\n    ctx.translate(scale[0] / 2, scale[1] / 2)\r\n\r\n    ctx.rotate(rotation)\r\n\r\n    return new Transform(multiply(scale, -0.5), scale, 0)\r\n}\r\n","import { Pin } from '../../simulation/classes/Pin'\r\nimport { SimulationRenderer } from '../classes/SimulationRenderer'\r\n\r\nexport const pinFill = (renderer: SimulationRenderer, pin: Pin) => {\r\n    let color = 'rgba(0,0,0,0)'\r\n\r\n    if (pin.pairs.size) {\r\n        if (pin.state.value) {\r\n            color = renderer.options.gates.pinFill.open\r\n        } else {\r\n            color = renderer.options.gates.pinFill.closed\r\n        }\r\n    }\r\n\r\n    return color\r\n}\r\n","import { Gate } from '../../simulation/classes/Gate'\r\nimport { renderPins } from './renderPins'\r\nimport { SimulationRenderer } from '../classes/SimulationRenderer'\r\nimport { useTransform } from '../../../common/canvas/helpers/useTransform'\r\nimport { roundRect } from '../../../common/canvas/helpers/drawRoundedSquare'\r\nimport { roundImage } from '../../../common/canvas/helpers/drawRoundedImage'\r\nimport { ImageStore } from '../stores/imageStore'\r\nimport { gatesInSelection } from './gatesInSelection'\r\nimport { idIsSelected } from './idIsSelected'\r\n\r\nexport const renderGate = (\r\n    ctx: CanvasRenderingContext2D,\r\n    renderer: SimulationRenderer,\r\n    gate: Gate\r\n) => {\r\n    renderPins(ctx, renderer, gate)\r\n\r\n    if (\r\n        (renderer.mouseState >> 2 &&\r\n            gatesInSelection(renderer.selectedArea, [gate]).length) ||\r\n        idIsSelected(renderer, gate.id)\r\n    ) {\r\n        ctx.strokeStyle = renderer.options.gates.gateStroke.active\r\n    } else {\r\n        ctx.strokeStyle = renderer.options.gates.gateStroke.normal\r\n    }\r\n\r\n    ctx.lineWidth = renderer.options.gates.gateStroke.width\r\n\r\n    ctx.save()\r\n\r\n    const r = useTransform(ctx, gate.transform)\r\n    const renderingParameters = [\r\n        r.x,\r\n        r.y,\r\n        r.width,\r\n        r.height,\r\n        gate.template.shape.rounded ? gate.template.shape.radius : 0\r\n    ]\r\n\r\n    if (gate.template.material.type === 'image') {\r\n        roundImage(\r\n            ctx,\r\n            ImageStore.get(gate.template.material.value),\r\n            ...renderingParameters\r\n        )\r\n    }\r\n\r\n    roundRect(ctx, ...renderingParameters)\r\n\r\n    if (gate.template.material.type === 'color') {\r\n        ctx.fillStyle = gate.template.material.value\r\n\r\n        ctx.fill()\r\n    }\r\n\r\n    ctx.stroke()\r\n    ctx.restore()\r\n}\r\n","import { Gate } from '../../simulation/classes/Gate'\r\nimport { SimulationRenderer } from '../classes/SimulationRenderer'\r\nimport { useTransform } from '../../../common/canvas/helpers/useTransform'\r\nimport { calculatePinStart, calculatePinY, calculatePinx } from './pinPosition'\r\nimport { pinFill } from './pinFill'\r\n\r\nexport const renderPins = (\r\n    ctx: CanvasRenderingContext2D,\r\n    renderer: SimulationRenderer,\r\n    gate: Gate\r\n) => {\r\n    ctx.save()\r\n\r\n    const {\r\n        connectionLength,\r\n        pinRadius,\r\n        pinStrokeColor,\r\n        pinStrokeWidth\r\n    } = renderer.options.gates\r\n    const relativeTransform = useTransform(ctx, gate.transform)\r\n\r\n    ctx.strokeStyle = pinStrokeColor\r\n    ctx.lineWidth = pinStrokeWidth\r\n\r\n    for (const pin of gate.pins) {\r\n        ctx.fillStyle = pinFill(renderer, pin.value)\r\n\r\n        // render little connection\r\n        const start = calculatePinStart(\r\n            relativeTransform,\r\n            pin.value.type,\r\n            connectionLength\r\n        )\r\n\r\n        const height = calculatePinY(relativeTransform, pin.index, pin.total)\r\n\r\n        const pinX = calculatePinx(start, pin.value.type, connectionLength)\r\n        const pinY = height + relativeTransform.y\r\n\r\n        ctx.beginPath()\r\n        ctx.moveTo(start, pinY)\r\n        ctx.lineTo(start + connectionLength, pinY)\r\n        ctx.stroke()\r\n\r\n        // render actual pin\r\n        ctx.beginPath()\r\n        ctx.ellipse(pinX, pinY, pinRadius, pinRadius, 0, 0, 2 * Math.PI)\r\n        ctx.fill()\r\n        ctx.stroke()\r\n    }\r\n\r\n    ctx.restore()\r\n}\r\n","/**\r\n *\r\n * @param ctx The context to draw on\r\n * @param x the x of the rect\r\n * @param y the y of the rect\r\n * @param width the width of the rect\r\n * @param height the height of the rect\r\n * @param radius the radius of the corners\r\n */\r\nexport function roundImage(\r\n    ctx: CanvasRenderingContext2D,\r\n    image: HTMLImageElement,\r\n    x: number = 0,\r\n    y: number = 0,\r\n    width: number = 100,\r\n    height: number = 100,\r\n    radius: number = 5\r\n) {\r\n    ctx.beginPath()\r\n    ctx.moveTo(x + radius, y)\r\n    ctx.lineTo(x + width - radius, y)\r\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\r\n    ctx.lineTo(x + width, y + height - radius)\r\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\r\n    ctx.lineTo(x + radius, y + height)\r\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\r\n    ctx.lineTo(x, y + radius)\r\n    ctx.quadraticCurveTo(x, y, x + radius, y)\r\n    ctx.closePath()\r\n\r\n    ctx.save()\r\n    ctx.clip()\r\n    ctx.drawImage(image, x, y, width, height)\r\n    ctx.restore()\r\n}\r\n","/**\r\n * Credit: https://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas\r\n */\r\nexport function roundRect(\r\n    ctx: CanvasRenderingContext2D,\r\n    x: number = 0,\r\n    y: number = 0,\r\n    width: number = 100,\r\n    height: number = 100,\r\n    radius: number = 5\r\n) {\r\n    ctx.beginPath()\r\n    ctx.moveTo(x + radius, y)\r\n    ctx.lineTo(x + width - radius, y)\r\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\r\n    ctx.lineTo(x + width, y + height - radius)\r\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\r\n    ctx.lineTo(x + radius, y + height)\r\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\r\n    ctx.lineTo(x, y + radius)\r\n    ctx.quadraticCurveTo(x, y, x + radius, y)\r\n    ctx.closePath()\r\n}\r\n","import { SimulationRenderer } from '../classes/SimulationRenderer'\r\nimport { pinFill } from './pinFill'\r\nimport { getPinPosition } from './pinPosition'\r\nimport { Wire } from '../../simulation/classes/Wire'\r\nimport { wireRadius } from './wireRadius'\r\nimport { clamp } from '../../simulation/helpers/clamp'\r\n\r\nexport const renderWires = (\r\n    ctx: CanvasRenderingContext2D,\r\n    renderer: SimulationRenderer,\r\n    wire: Wire\r\n) => {\r\n    const { start, end } = wire\r\n    const startPosition = getPinPosition(\r\n        renderer,\r\n        start.value.gate.transform,\r\n        start\r\n    )\r\n    const endPosition = getPinPosition(renderer, end.value.gate.transform, end)\r\n    const length = renderer.options.wires.curvePointOffset\r\n    const centerY = (startPosition[1] + endPosition[1]) / 2\r\n    const controlPostions = [startPosition[0] + length, endPosition[0] - length]\r\n\r\n    ctx.strokeStyle = pinFill(renderer, start.value)\r\n    ctx.lineWidth = wireRadius(renderer)\r\n    ctx.lineCap = 'round'\r\n\r\n    ctx.beginPath()\r\n    ctx.moveTo(...startPosition)\r\n\r\n    if (startPosition[0] < endPosition[0]) {\r\n        ctx.bezierCurveTo(\r\n            controlPostions[0],\r\n            startPosition[1],\r\n            controlPostions[1],\r\n            endPosition[1],\r\n            ...endPosition\r\n        )\r\n    } else {\r\n        const { abs, PI } = Math\r\n\r\n        const baseFactor = startPosition[1] < endPosition[1] ? 1 : -1\r\n        const factors = [baseFactor, baseFactor]\r\n\r\n        const radiuses = [...Array(2)].fill(\r\n            abs((centerY - startPosition[1]) / 2)\r\n        )\r\n\r\n        const limit = 70\r\n        if (radiuses[0] < limit) {\r\n            factors[0] *= -1\r\n            radiuses[0] = limit\r\n            radiuses[1] = abs(\r\n                (startPosition[1] +\r\n                    factors[0] * 2 * radiuses[0] -\r\n                    endPosition[1]) /\r\n                    2\r\n            )\r\n            // radiuses[0] =\r\n        }\r\n\r\n        const centerPosition = [\r\n            startPosition[1] + factors[0] * radiuses[0],\r\n            endPosition[1] - factors[1] * radiuses[1]\r\n        ]\r\n\r\n        ctx.arc(\r\n            controlPostions[0],\r\n            centerPosition[0],\r\n            radiuses[0],\r\n            (-factors[0] * PI) / 2,\r\n            (factors[0] * PI) / 2,\r\n            factors[0] !== 1\r\n        )\r\n\r\n        ctx.lineTo(\r\n            controlPostions[1],\r\n            endPosition[1] - factors[1] * 2 * radiuses[1]\r\n        )\r\n\r\n        ctx.arc(\r\n            controlPostions[1],\r\n            centerPosition[1],\r\n            radiuses[1],\r\n            (-factors[1] * PI) / 2,\r\n            (factors[1] * PI) / 2,\r\n            factors[1] === 1\r\n        )\r\n\r\n        ctx.lineTo(...endPosition)\r\n    }\r\n\r\n    ctx.stroke()\r\n}\r\n","import { SimulationRenderer } from '../classes/SimulationRenderer'\r\n\r\nexport const wireRadius = (renderer: SimulationRenderer) => {\r\n    return (\r\n        2 *\r\n        (renderer.options.gates.pinRadius -\r\n            renderer.options.gates.pinStrokeWidth)\r\n    )\r\n}\r\n","import { SimulationRenderer } from '../classes/SimulationRenderer'\r\nimport { invert, inverse } from '../../vector2/helpers/basic'\r\nimport { renderGate } from './renderGate'\r\nimport { clearCanvas } from '../../../common/canvas/helpers/clearCanvas'\r\nimport { renderClickedPins } from './renderClickedPins'\r\nimport { renderWires } from './renderWires'\r\nimport { renderSelectedArea } from './renderSelectedArea'\r\n\r\nexport const renderSimulation = (\r\n    ctx: CanvasRenderingContext2D,\r\n    renderer: SimulationRenderer\r\n) => {\r\n    clearCanvas(ctx)\r\n\r\n    const transform = renderer.camera.transform\r\n\r\n    ctx.translate(...transform.position)\r\n    ctx.scale(...transform.scale)\r\n\r\n    for (const wire of renderer.simulation.wires) {\r\n        renderWires(ctx, renderer, wire)\r\n    }\r\n\r\n    for (const gate of renderer.simulation.gates) {\r\n        renderGate(ctx, renderer, gate)\r\n    }\r\n\r\n    renderClickedPins(ctx, renderer)\r\n    renderSelectedArea(ctx, renderer)\r\n\r\n    ctx.scale(...inverse(transform.scale))\r\n    ctx.translate(...invert(transform.position))\r\n}\r\n","import { Screen } from '../../../modules/screen/helpers/Screen'\r\n\r\n/**\r\n * Clears the used portion of the canvas\r\n *\r\n * @param ctx the context to clear\r\n */\r\nexport const clearCanvas = (ctx: CanvasRenderingContext2D) => {\r\n    ctx.clearRect(0, 0, Screen.width, Screen.height)\r\n}\r\n","import { SimulationRenderer } from '../classes/SimulationRenderer'\r\nimport { getPinPosition } from './pinPosition'\r\nimport { SelectedPin } from '../types/SelectedPins'\r\n\r\nexport const renderClickedPins = (\r\n    ctx: CanvasRenderingContext2D,\r\n    renderer: SimulationRenderer\r\n) => {\r\n    let pin: SelectedPin | null = null\r\n\r\n    if (renderer.selectedPins.start) {\r\n        pin = renderer.selectedPins.start\r\n    } else if (renderer.selectedPins.end) {\r\n        pin = renderer.selectedPins.end\r\n    }\r\n\r\n    if (pin) {\r\n        const position = getPinPosition(renderer, pin.transform, pin.wrapper)\r\n\r\n        ctx.strokeStyle = renderer.options.wires.temporaryWireColor\r\n        ctx.lineWidth = renderer.options.gates.pinRadius * 2\r\n        ctx.lineCap = 'round'\r\n\r\n        ctx.beginPath()\r\n        ctx.moveTo(...position)\r\n        ctx.lineTo(...renderer.lastMousePosition)\r\n        ctx.stroke()\r\n    }\r\n}\r\n","import { SimulationRenderer } from '../classes/SimulationRenderer'\r\n\r\n/**\r\n * Renders the selected area of a renderer\r\n *\r\n * @param ctx The context to draw on\r\n * @param renderer The renderer to draw the selected area of\r\n */\r\nexport const renderSelectedArea = (\r\n    ctx: CanvasRenderingContext2D,\r\n    renderer: SimulationRenderer\r\n) => {\r\n    if (renderer.mouseState >> 2) {\r\n        ctx.fillStyle = renderer.options.selecting.fill\r\n        ctx.strokeStyle = renderer.options.selecting.stroke\r\n\r\n        ctx.beginPath()\r\n        ctx.rect(...renderer.selectedArea.getBoundingBox())\r\n        ctx.fill()\r\n        ctx.stroke()\r\n    }\r\n}\r\n","import { Subject } from 'rxjs'\r\n\r\nexport const loadSubject = new Subject<true>()\r\n","import React, { Component, createRef, Ref, RefObject } from 'react'\r\nimport FluidCanvas from './FluidCanvas'\r\nimport loop from 'mainloop.js'\r\nimport { SimulationRenderer } from '../../simulationRenderer/classes/SimulationRenderer'\r\nimport { renderSimulation } from '../../simulationRenderer/helpers/renderSimulation'\r\nimport { rendererSubject } from '../subjects/rendererSubject'\r\nimport { loadSubject } from '../subjects/loadedSubject'\r\n\r\nclass Canvas extends Component {\r\n    private canvasRef: RefObject<HTMLCanvasElement> = createRef()\r\n    private renderingContext: CanvasRenderingContext2D | null\r\n    private renderer = new SimulationRenderer(this.canvasRef)\r\n\r\n    public constructor(props: {}) {\r\n        super(props)\r\n\r\n        rendererSubject.next(this.renderer)\r\n\r\n        loop.setDraw(() => {\r\n            if (this.renderingContext) {\r\n                renderSimulation(this.renderingContext, this.renderer)\r\n            }\r\n        })\r\n    }\r\n\r\n    public componentDidMount() {\r\n        loadSubject.next(true)\r\n\r\n        if (this.canvasRef.current) {\r\n            this.renderingContext = this.canvasRef.current.getContext('2d')\r\n            this.renderer.updateWheelListener()\r\n        }\r\n\r\n        loop.start()\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        loop.stop()\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <FluidCanvas\r\n                ref={this.canvasRef}\r\n                mouseDownOuput={this.renderer.mouseDownOutput}\r\n                mouseUpOutput={this.renderer.mouseUpOutput}\r\n                mouseMoveOutput={this.renderer.mouseMoveOutput}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas\r\n","import React from 'react'\r\nimport './CreateSimulation.scss'\r\nimport { useObservable } from 'rxjs-hooks'\r\nimport { CreateSimulationStore } from '../stores/CreateSimulationStore'\r\nimport { simulationMode } from '../../saving/types/SimulationSave'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport { useTranslation } from '../../internalisation/helpers/useLanguage'\r\n\r\nexport interface CreateSimulationOption {\r\n    mode: simulationMode\r\n    icon: string\r\n}\r\n\r\nexport const createSimulationOptions: CreateSimulationOption[] = [\r\n    {\r\n        mode: 'project',\r\n        icon: 'gamepad'\r\n    },\r\n    {\r\n        icon: 'memory',\r\n        mode: 'ic'\r\n    }\r\n]\r\n\r\nconst CreateSimulation = () => {\r\n    const open = useObservable(() => CreateSimulationStore.data.open, false)\r\n    const translation = useTranslation()\r\n\r\n    const closeModal = () => {\r\n        CreateSimulationStore.actions.next('quit')\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={open ? 'shown' : ''}\r\n            id=\"create-content\"\r\n            onClick={closeModal}\r\n        >\r\n            <div id=\"create-title\">\r\n                {translation.createSimulation.mode.question}\r\n            </div>\r\n\r\n            <div id=\"create-options\">\r\n                {createSimulationOptions.map((option, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className=\"create-option\"\r\n                        onClick={e => {\r\n                            e.stopPropagation()\r\n\r\n                            CreateSimulationStore.data.output.next(option.mode)\r\n                            CreateSimulationStore.actions.next('submit')\r\n                        }}\r\n                    >\r\n                        <div className=\"create-option-icon\">\r\n                            <Icon>{option.icon}</Icon>\r\n                        </div>\r\n                        <div className=\"create-option-name\" id={option.mode}>\r\n                            {\r\n                                translation.createSimulation.mode.options[\r\n                                    option.mode\r\n                                ]\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateSimulation\r\n","import React from 'react'\r\nimport keycode from 'keycode'\r\nimport './Input.scss'\r\n\r\nimport { useObservable } from 'rxjs-hooks'\r\nimport { InputStore } from '../stores/InputStore'\r\n\r\nconst Input = () => {\r\n    const open = useObservable(() => InputStore.data.open, false)\r\n    const question = useObservable(() => InputStore.data.question, '')\r\n    const output = useObservable(() => InputStore.data.output, '')\r\n\r\n    const handleQuit = () => {\r\n        InputStore.actions.next('quit')\r\n    }\r\n\r\n    return (\r\n        <div\r\n            id=\"input-container\"\r\n            onClick={handleQuit}\r\n            className={open ? 'visible' : ''}\r\n        >\r\n            <div id=\"input-title\">{question}</div>\r\n            <input\r\n                autoFocus={true}\r\n                value={output}\r\n                onClick={e => {\r\n                    e.stopPropagation()\r\n                }}\r\n                type=\"text\"\r\n                id=\"actual-input\"\r\n                onChange={e => {\r\n                    const element = e.target as HTMLInputElement\r\n\r\n                    InputStore.data.output.next(element.value)\r\n                }}\r\n                onKeyDown={e => {\r\n                    if (keycode('enter') === e.keyCode) {\r\n                        e.preventDefault()\r\n                        return InputStore.actions.next('submit')\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import Helmet from 'react-helmet'\r\nimport React from 'react'\r\n\r\nconst Head = () => {\r\n    return (\r\n        <Helmet>\r\n            <title>Logic gate simulator</title>\r\n\r\n            <link\r\n                rel=\"stylesheet\"\r\n                href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\r\n            />\r\n            <link\r\n                rel=\"stylesheet\"\r\n                href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\r\n            />\r\n            <meta\r\n                name=\"viewport\"\r\n                content=\"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\"\r\n            />\r\n\r\n            <link\r\n                href=\"https://fonts.googleapis.com/css?family=Righteous&display=swap\"\r\n                rel=\"stylesheet\"\r\n            />\r\n\r\n            <link rel=\"icon\" href={require('../../../assets/favicon.ico')} />\r\n        </Helmet>\r\n    )\r\n}\r\n\r\nexport default Head\r\n","import '../styles/reset'\r\nimport './App.scss'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nimport { ToastContainer } from 'react-toastify'\r\nimport { theme as muiTheme } from '../constants'\r\n\r\nimport React from 'react'\r\nimport Canvas from './Canvas'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Theme from '@material-ui/styles/ThemeProvider'\r\nimport Sidebar from './Sidebar'\r\nimport CreateSimulation from '../../create-simulation/components/CreateSimulation'\r\nimport Input from '../../input/components/Input'\r\nimport LogicGateModal from '../../logic-gates/components/LogicGateModal'\r\nimport Head from './Head'\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <Head />\r\n            <CssBaseline />\r\n\r\n            <Theme theme={muiTheme}>\r\n                <CssBaseline />\r\n                <Canvas />\r\n                <Sidebar />\r\n                <CreateSimulation />\r\n                <Input />\r\n                <LogicGateModal />\r\n            </Theme>\r\n\r\n            <ToastContainer\r\n                position=\"top-left\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { toast } from 'react-toastify'\r\nimport { createToastArguments } from '../../toasts/helpers/createToastArguments'\r\n\r\nexport const handleErrors = () => {\r\n    window.onerror = (a, b, c, d, error) => {\r\n        if (error) {\r\n            const args = createToastArguments(error.toString())\r\n\r\n            toast.error(...args)\r\n        }\r\n    }\r\n}\r\n","import { KeyboardInput } from '../classes/KeyboardInput'\r\nimport { KeyBindingMap, KeyBinding } from '../types/KeyBindingMap'\r\nimport { SidebarActions } from '../../simulation-actions/constants'\r\nimport { SidebarAction } from '../../simulation-actions/types/SidebarAction'\r\nimport { modalIsOpen } from '../../modals/helpers/modalIsOpen'\r\n\r\nexport const listeners: Record<string, KeyboardInput> = {}\r\n\r\nconst keyBindings = Object.values(SidebarActions)\r\n    .filter(action => action.keybinding)\r\n    .map(\r\n        (action): KeyBinding => {\r\n            return {\r\n                actions: [action.action],\r\n                keys: action.keybinding || []\r\n            }\r\n        }\r\n    )\r\n\r\nexport const initKeyBindings = (bindings: KeyBindingMap = keyBindings) => {\r\n    const allKeys = new Set<string>()\r\n\r\n    for (const binding of bindings) {\r\n        for (const key of binding.keys) {\r\n            allKeys.add(key)\r\n        }\r\n    }\r\n\r\n    for (const key of allKeys.values()) {\r\n        listeners[key] = new KeyboardInput(key)\r\n    }\r\n\r\n    window.addEventListener('keydown', e => {\r\n        if (!modalIsOpen()) {\r\n            const current: {\r\n                keys: string[]\r\n                callback: Function\r\n            }[] = []\r\n\r\n            for (const keyBinding of bindings) {\r\n                let done = false\r\n\r\n                for (const key of keyBinding.keys) {\r\n                    if (!(done || listeners[key].value)) {\r\n                        done = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                if (done) {\r\n                    continue\r\n                }\r\n\r\n                current.push({\r\n                    keys: keyBinding.keys,\r\n                    callback: () => {\r\n                        for (const action of keyBinding.actions) {\r\n                            action()\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n\r\n            if (current.length) {\r\n                let maxIndex = 0\r\n                let max = current[0].keys.length\r\n\r\n                for (let index = 1; index < current.length; index++) {\r\n                    const element = current[index]\r\n\r\n                    if (element.keys.length > max) {\r\n                        max = element.keys.length\r\n                        maxIndex = index\r\n                    }\r\n                }\r\n\r\n                current[maxIndex].callback()\r\n\r\n                e.preventDefault()\r\n                e.stopPropagation()\r\n            }\r\n        }\r\n    })\r\n}\r\n","import { baseTemplates } from '../constants'\r\nimport { templateStore } from '../stores/templateStore'\r\nimport { SimulationError } from '../../errors/classes/SimulationError'\r\n\r\n/**\r\n * Stores the base logic gate templates into localStorage\r\n *\r\n * @throws SimulationError if something is wrong with the template\r\n */\r\nexport const initBaseTemplates = () => {\r\n    for (const template of baseTemplates) {\r\n        if (template.metadata && template.metadata.name) {\r\n            templateStore.set(template.metadata.name, template)\r\n        } else {\r\n            throw new SimulationError(\r\n                `Template ${JSON.stringify(template)} cannot be stored.`\r\n            )\r\n        }\r\n    }\r\n}\r\n","import React from 'react'\r\nimport App from './modules/core/components/App'\r\n\r\nimport { render } from 'react-dom'\r\nimport { handleErrors } from './modules/errors/helpers/handleErrors'\r\nimport { initKeyBindings } from './modules/keybindings/helpers/initialiseKeyBindings'\r\nimport { initBaseTemplates } from './modules/saving/helpers/initBaseTemplates'\r\nimport { loadSubject } from './modules/core/subjects/loadedSubject'\r\nimport { take } from 'rxjs/operators'\r\nimport { logWelcome } from './modules/core/helpers/logWelcome'\r\n\r\nexport const start = async () => {\r\n    console.clear()\r\n\r\n    const result = loadSubject.pipe(take(1)).toPromise()\r\n\r\n    handleErrors()\r\n    initKeyBindings()\r\n    initBaseTemplates()\r\n    logWelcome()\r\n\r\n    render(<App />, document.getElementById('app'))\r\n\r\n    await result\r\n}\r\n","/**\r\n * In case the guys who look at my projet open the console -_-\r\n */\r\nexport const logWelcome = () => {\r\n    const commonStyles = 'padding: 3px'\r\n    const titleStyles = `font-size: 3em;`\r\n\r\n    // console.log('%c Hello!',` `${titleStyles})\r\n    console.log(\r\n        `%c Hello\r\n        %c I don't know if you see this, \r\n        but if you do than you are probably wondering... \r\n        Why did I include this? The answer is - I don't know. \r\n        At first, it seemed like a good idea to include a welcome message in the console\r\n        (in case someone randomly openes it), but now i don't even know what i'm doing :) \r\n        Anyways, I hope you are having a good time in my simulator!!!`\r\n            .split('\\n')\r\n            .map(s => s.trim())\r\n            .join(' '),\r\n        `${titleStyles}`,\r\n        `${commonStyles}`\r\n    )\r\n}\r\n","module.exports = __webpack_public_path__ + \"fba1e150c35116cf8bc32589d933095d.jpg\";","module.exports = __webpack_public_path__ + \"be700b5a8d385f7549c3cc560425de8b.png\";","module.exports = __webpack_public_path__ + \"434fae6a4b5b48eff5a424e3b5ec95d5.png\";","module.exports = __webpack_public_path__ + \"543554c16bc630835af9efed9e009847.png\";"],"sourceRoot":""}