!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=82)}([function(t,e,n){"use strict";n.d(e,"a",function(){return i});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}},function(t,e,n){"use strict";n.d(e,"a",function(){return l});var r=n(0),i=n(24),o=n(51),s=n(5),u=n(35),c=n(14),a=n(32),l=function(t){function e(n,r,i){var s=t.call(this)||this;switch(s.syncErrorValue=null,s.syncErrorThrown=!1,s.syncErrorThrowable=!1,s.isStopped=!1,arguments.length){case 0:s.destination=o.a;break;case 1:if(!n){s.destination=o.a;break}if("object"==typeof n){n instanceof e?(s.syncErrorThrowable=n.syncErrorThrowable,s.destination=n,n.add(s)):(s.syncErrorThrowable=!0,s.destination=new f(s,n));break}default:s.syncErrorThrowable=!0,s.destination=new f(s,n,r,i)}return s}return r.a(e,t),e.prototype[u.a]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(s.a),f=function(t){function e(e,n,r,s){var u,c=t.call(this)||this;c._parentSubscriber=e;var a=c;return Object(i.a)(n)?u=n:n&&(u=n.next,r=n.error,s=n.complete,n!==o.a&&(a=Object.create(n),Object(i.a)(a.unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=u,c._error=r,c._complete=s,c}return r.a(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;c.a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=c.a.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):Object(a.a)(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;Object(a.a)(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};c.a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),c.a.useDeprecatedSynchronousErrorHandling)throw t;Object(a.a)(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!c.a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return c.a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(Object(a.a)(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(l)},function(t,e,n){"use strict";var r=n(48),i=n(1),o=n(35),s=n(51);var u=n(20),c=n(34),a=n(14);n.d(e,"a",function(){return l});var l=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,u=function(t,e,n){if(t){if(t instanceof i.a)return t;if(t[o.a])return t[o.a]()}return t||e||n?new i.a(t,e,n):new i.a(s.a)}(t,e,n);if(r?u.add(r.call(u,this.source)):u.add(this.source||a.a.useDeprecatedSynchronousErrorHandling&&!u.syncErrorThrowable?this._subscribe(u):this._trySubscribe(u)),a.a.useDeprecatedSynchronousErrorHandling&&u.syncErrorThrowable&&(u.syncErrorThrowable=!1,u.syncErrorThrown))throw u.syncErrorValue;return u},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){a.a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),Object(r.a)(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=f(e))(function(e,r){var i;i=n.subscribe(function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}},r,e)})},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[u.a]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:Object(c.b)(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=f(t))(function(t,n){var r;e.subscribe(function(t){return r=t},function(t){return n(t)},function(){return t(r)})})},t.create=function(e){return new t(e)},t}();function f(t){if(t||(t=a.a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(13),i=n(37),o=n(2);function s(t,e,n,s,u){if(void 0===u&&(u=new r.a(t,n,s)),!u.closed)return e instanceof o.a?e.subscribe(u):Object(i.a)(e)(u)}},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(0),i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(n(1).a)},function(t,e,n){"use strict";n.d(e,"a",function(){return u});var r=n(7),i=n(47),o=n(24),s=n(36),u=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,u=this._unsubscribe,a=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var l=0;l<n.length;++l){n[l].remove(this)}if(Object(o.a)(u))try{u.call(this)}catch(t){e=t instanceof s.a?c(t.errors):[t]}if(Object(r.a)(a)){l=-1;for(var f=a.length;++l<f;){var h=a[l];if(Object(i.a)(h))try{h.unsubscribe()}catch(t){e=e||[],t instanceof s.a?e=e.concat(c(t.errors)):e.push(t)}}}if(e)throw new s.a(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=((e=new t).closed=!0,e),t}();function c(t){return t.reduce(function(t,e){return t.concat(e instanceof s.a?e.errors:e)},[])}},function(t,e,n){"use strict";n.d(e,"b",function(){return l}),n.d(e,"a",function(){return f});var r=n(0),i=n(2),o=n(1),s=n(5),u=n(21),c=n(68),a=n(35),l=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return r.a(e,t),e}(o.a),f=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return r.a(e,t),e.prototype[a.a]=function(){return new l(this)},e.prototype.lift=function(t){var e=new h(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new u.a;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new u.a;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new u.a;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new u.a;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new u.a;return this.hasError?(t.error(this.thrownError),s.a.EMPTY):this.isStopped?(t.complete(),s.a.EMPTY):(this.observers.push(t),new c.a(this,t))},e.prototype.asObservable=function(){var t=new i.a;return t.source=this,t},e.create=function(t,e){return new h(t,e)},e}(i.a),h=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return r.a(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):s.a.EMPTY},e}(f)},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r=Array.isArray||function(t){return t&&"number"==typeof t.length}},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(29),i=new(n(27).a)(r.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(0),i=n(1);function o(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new s(t,e))}}var s=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.project,this.thisArg))},t}(),u=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.a)},function(t,e,n){"use strict";function r(t){return t&&"function"==typeof t.schedule}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";n.d(e,"a",function(){return i}),n.d(e,"b",function(){return o});var r=n(2),i=new r.a(function(t){return t.complete()});function o(t){return t?function(t){return new r.a(function(e){return t.schedule(function(){return e.complete()})})}(t):i}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(2),i=n(37),o=n(66);function s(t,e){return e?Object(o.a)(t,e):t instanceof r.a?t:new r.a(Object(i.a)(t))}},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(0),i=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(n(1).a)},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},function(t,e,n){"use strict";function r(){}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(0),i=n(1);function o(t,e){return function(n){return n.lift(new s(t,e))}}var s=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.predicate,this.thisArg))},t}(),u=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(i.a)},function(t,e,n){"use strict";n.d(e,"b",function(){return r}),n.d(e,"a",function(){return u});var r,i=n(11),o=n(33),s=n(42);r||(r={});var u=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Object(o.a)(this.value);case"E":return Object(s.a)(this.error);case"C":return Object(i.b)()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},function(t,e,n){"use strict";function r(t){return t}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}n.d(e,"a",function(){return i});var i=r()},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r="function"==typeof Symbol&&Symbol.observable||"@@observable"},function(t,e,n){"use strict";function r(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}n.d(e,"a",function(){return i}),r.prototype=Object.create(Error.prototype);var i=r},function(t,e,n){"use strict";n.d(e,"a",function(){return a});var r=n(0),i=n(3),o=n(4),s=n(13),u=n(9),c=n(12);function a(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(r){return r.pipe(a(function(n,r){return Object(c.a)(t(n,r)).pipe(Object(u.a)(function(t,i){return e(n,t,r,i)}))},n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new l(t,n))})}var l=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new f(t,this.project,this.concurrent))},t}(),f=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new s.a(this,void 0,void 0);this.destination.add(r),Object(i.a)(this,t,e,n,r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(o.a)},function(t,e,n){"use strict";function r(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}n.d(e,"a",function(){return i}),r.prototype=Object.create(Error.prototype);var i=r},function(t,e,n){"use strict";function r(t){return"function"==typeof t}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";function r(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}n.d(e,"a",function(){return i}),r.prototype=Object.create(Error.prototype);var i=r},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(2),i=n(69),o=n(49);function s(t,e){return e?Object(o.a)(t,e):new r.a(Object(i.a)(t))}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(0),i=n(54),o=function(t){function e(n,r){void 0===r&&(r=i.a.now);var o=t.call(this,n,function(){return e.delegate&&e.delegate!==o?e.delegate.now():r()})||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.a(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(i.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(0),i=n(6),o=n(5),s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return r.a(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),o.a.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),o.a.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(i.a)},function(t,e,n){"use strict";var r=n(0),i=function(t){function e(e,n){return t.call(this)||this}return r.a(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(n(5).a);n.d(e,"a",function(){return o});var o=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return r.a(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(i)},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(7);function i(t){return!Object(r.a)(t)&&t-parseFloat(t)+1>=0}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(33),i=n(62);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Object(i.a)()(r.a.apply(void 0,t))}},function(t,e,n){"use strict";function r(t){setTimeout(function(){throw t},0)}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(10),i=n(26),o=n(49);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(r.a)(n)?(t.pop(),Object(o.a)(t,n)):Object(i.a)(t)}},function(t,e,n){"use strict";n.d(e,"a",function(){return i}),n.d(e,"b",function(){return o});var r=n(15);function i(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o(t)}function o(t){return t?1===t.length?t[0]:function(e){return t.reduce(function(t,e){return e(t)},e)}:r.a}},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()},function(t,e,n){"use strict";function r(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,e){return e+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}n.d(e,"a",function(){return i}),r.prototype=Object.create(Error.prototype);var i=r},function(t,e,n){"use strict";var r=n(69),i=n(32),o=n(19),s=n(20),u=n(70),c=n(71),a=n(47);n.d(e,"a",function(){return l});var l=function(t){if(t&&"function"==typeof t[s.a])return l=t,function(t){var e=l[s.a]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Object(u.a)(t))return Object(r.a)(t);if(Object(c.a)(t))return n=t,function(t){return n.then(function(e){t.closed||(t.next(e),t.complete())},function(e){return t.error(e)}).then(null,i.a),t};if(t&&"function"==typeof t[o.a])return e=t,function(t){for(var n=e[o.a]();;){var r=n.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add(function(){n.return&&n.return()}),t};var e,n,l,f=Object(a.a)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+f+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},function(t,e,n){"use strict";n.r(e);var r=n(2),i=n(58),o=n(55),s=n(20),u=n(6),c=n(59),a=n(41),l=n(28),f=n(50),h=n(8),p=n(67),d=n(0),v=n(29),b=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return d.a(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame(function(){return e.flush(null)})))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(v.a),y=n(27),m=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d.a(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(y.a))(b),g=function(t){function e(e,n){void 0===e&&(e=w),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,function(){return r.frame})||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return d.a(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(y.a),w=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return d.a(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(v.a),x=n(54),_=n(5),S=n(1),j=n(17),O=n(34),T=n(15),C=n(18);function E(t){return!!t&&(t instanceof r.a||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var N=n(23),k=n(25),A=n(21),I=n(36),P=n(61),D=n(9),M=n(48),V=n(7),L=n(10);function H(t,e,n){if(e){if(!Object(L.a)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return H(t,n).apply(void 0,r).pipe(Object(D.a)(function(t){return Object(V.a)(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o,s=this,u={context:s,subject:o,callbackFunc:t,scheduler:n};return new r.a(function(r){if(n){var i={args:e,subscriber:r,params:u};return n.schedule(R,0,i)}if(!o){o=new l.a;try{t.apply(s,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){Object(M.a)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)})}}function R(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,s=i.context,u=i.scheduler,c=i.subject;if(!c){c=i.subject=new l.a;try{o.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(u.schedule(q,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function q(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function B(t,e,n){if(e){if(!Object(L.a)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return B(t,n).apply(void 0,r).pipe(Object(D.a)(function(t){return Object(V.a)(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new r.a(function(r){var i=o.context,s=o.subject;if(n)return n.schedule(W,0,{params:o,subscriber:r,context:i});if(!s){s=o.subject=new l.a;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){Object(M.a)(s)?s.error(t):console.warn(t)}}return s.subscribe(r)})}}function W(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,s=n.args,u=n.scheduler,c=n.subject;if(!c){c=n.subject=new l.a;try{o.apply(i,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(u.schedule(z,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;e.add(u.schedule(F,0,{value:i,subject:c}))}}]))}catch(t){this.add(u.schedule(z,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function F(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function z(t){var e=t.err;t.subject.error(e)}var $=n(43),U=n(31),Y=n(45),X=n(11),K=n(47),G=n(12);function J(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(Object(V.a)(n))return Q(n,null);if(Object(K.a)(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return Q(r.map(function(t){return n[t]}),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return Q(t=1===t.length&&Object(V.a)(t[0])?t[0]:t,null).pipe(Object(D.a)(function(t){return i.apply(void 0,t)}))}return Q(t,null)}function Q(t,e){return new r.a(function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,s=0,u=function(u){var c=Object(G.a)(t[u]),a=!1;n.add(c.subscribe({next:function(t){a||(a=!0,s++),i[u]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&a||(s===r&&n.next(e?e.reduce(function(t,e,n){return t[e]=i[n],t},{}):i),n.complete())}}))},c=0;c<r;c++)u(c);else n.complete()})}var Z=n(24);Object.prototype.toString;function tt(t,e,n,i){return Object(Z.a)(n)&&(i=n,n=void 0),i?tt(t,e,n).pipe(Object(D.a)(function(t){return Object(V.a)(t)?i.apply(void 0,t):i(t)})):new r.a(function(r){!function t(e,n,r,i,o){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,r,o),s=function(){return u.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(n,r),s=function(){return c.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(n,r),s=function(){return a.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,f=e.length;l<f;l++)t(e[l],n,r,i,o)}i.add(s)}(t,e,function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)},r,n)})}function et(t,e,n){return n?et(t,e).pipe(Object(D.a)(function(t){return Object(V.a)(t)?n.apply(void 0,t):n(t)})):new r.a(function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(Object(Z.a)(e))return function(){return e(i,r)}})}function nt(t,e,n,i,o){var s,u;if(1==arguments.length){var c=t;u=c.initialState,e=c.condition,n=c.iterate,s=c.resultSelector||C.a,o=c.scheduler}else void 0===i||Object(L.a)(i)?(u=t,s=C.a,o=i):(u=t,s=i);return new r.a(function(t){var r=u;if(o)return o.schedule(rt,0,{subscriber:t,iterate:n,condition:e,resultSelector:s,state:r});for(;;){if(e){var i=void 0;try{i=e(r)}catch(e){return void t.error(e)}if(!i){t.complete();break}}var c=void 0;try{c=s(r)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}})}function rt(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function it(t,e,n){return void 0===e&&(e=X.a),void 0===n&&(n=X.a),Object(Y.a)(function(){return t()?e:n})}var ot=n(30);function st(t,e){return void 0===t&&(t=0),void 0===e&&(e=h.a),(!Object(ot.a)(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=h.a),new r.a(function(n){return n.add(e.schedule(ut,t,{subscriber:n,counter:0,period:t})),n})}function ut(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}var ct=n(63),at=new r.a(T.a);function lt(){return at}var ft=n(33);function ht(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return X.a;var n=t[0],i=t.slice(1);return 1===t.length&&Object(V.a)(n)?ht.apply(void 0,n):new r.a(function(t){var e=function(){return t.add(ht.apply(void 0,i).subscribe(t))};return Object(G.a)(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})})}function pt(t,e){return e?new r.a(function(n){var r=Object.keys(t),i=new _.a;return i.add(e.schedule(dt,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i}):new r.a(function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()})}function dt(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var s=e[n];r.next([s,o[s]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var vt=n(72),bt=n(37),yt=n(16);function mt(t,e,n){return[Object(yt.a)(e,n)(new r.a(Object(bt.a)(t))),Object(yt.a)(Object(vt.a)(e,n))(new r.a(Object(bt.a)(t)))]}var gt=n(64);function wt(t,e,n){return void 0===t&&(t=0),new r.a(function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(xt,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}})}function xt(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}var _t=n(42),St=n(65);function jt(t,e){return new r.a(function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Object(G.a)(i):X.a).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}})}var Ot=n(46),Tt=n(66),Ct=n(14);n.d(e,"Observable",function(){return r.a}),n.d(e,"ConnectableObservable",function(){return i.a}),n.d(e,"GroupedObservable",function(){return o.a}),n.d(e,"observable",function(){return s.a}),n.d(e,"Subject",function(){return u.a}),n.d(e,"BehaviorSubject",function(){return c.a}),n.d(e,"ReplaySubject",function(){return a.a}),n.d(e,"AsyncSubject",function(){return l.a}),n.d(e,"asapScheduler",function(){return f.a}),n.d(e,"asyncScheduler",function(){return h.a}),n.d(e,"queueScheduler",function(){return p.a}),n.d(e,"animationFrameScheduler",function(){return m}),n.d(e,"VirtualTimeScheduler",function(){return g}),n.d(e,"VirtualAction",function(){return w}),n.d(e,"Scheduler",function(){return x.a}),n.d(e,"Subscription",function(){return _.a}),n.d(e,"Subscriber",function(){return S.a}),n.d(e,"Notification",function(){return j.a}),n.d(e,"NotificationKind",function(){return j.b}),n.d(e,"pipe",function(){return O.a}),n.d(e,"noop",function(){return T.a}),n.d(e,"identity",function(){return C.a}),n.d(e,"isObservable",function(){return E}),n.d(e,"ArgumentOutOfRangeError",function(){return N.a}),n.d(e,"EmptyError",function(){return k.a}),n.d(e,"ObjectUnsubscribedError",function(){return A.a}),n.d(e,"UnsubscriptionError",function(){return I.a}),n.d(e,"TimeoutError",function(){return P.a}),n.d(e,"bindCallback",function(){return H}),n.d(e,"bindNodeCallback",function(){return B}),n.d(e,"combineLatest",function(){return $.b}),n.d(e,"concat",function(){return U.a}),n.d(e,"defer",function(){return Y.a}),n.d(e,"empty",function(){return X.b}),n.d(e,"forkJoin",function(){return J}),n.d(e,"from",function(){return G.a}),n.d(e,"fromEvent",function(){return tt}),n.d(e,"fromEventPattern",function(){return et}),n.d(e,"generate",function(){return nt}),n.d(e,"iif",function(){return it}),n.d(e,"interval",function(){return st}),n.d(e,"merge",function(){return ct.a}),n.d(e,"never",function(){return lt}),n.d(e,"of",function(){return ft.a}),n.d(e,"onErrorResumeNext",function(){return ht}),n.d(e,"pairs",function(){return pt}),n.d(e,"partition",function(){return mt}),n.d(e,"race",function(){return gt.a}),n.d(e,"range",function(){return wt}),n.d(e,"throwError",function(){return _t.a}),n.d(e,"timer",function(){return St.a}),n.d(e,"using",function(){return jt}),n.d(e,"zip",function(){return Ot.b}),n.d(e,"scheduled",function(){return Tt.a}),n.d(e,"EMPTY",function(){return X.a}),n.d(e,"NEVER",function(){return at}),n.d(e,"config",function(){return Ct.a})},function(t,e,n){"use strict";n.r(e);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const r=new WeakMap,i=t=>(...e)=>{const n=t(...e);return r.set(n,!0),n},o=t=>"function"==typeof t&&r.has(t),s=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,u=(t,e,n=null,r=null)=>{let i=e;for(;i!==n;){const e=i.nextSibling;t.insertBefore(i,r),i=e}},c=(t,e,n=null)=>{let r=e;for(;r!==n;){const e=r.nextSibling;t.removeChild(r),r=e}},a={},l={},f=`{{lit-${String(Math.random()).slice(2)}}}`,h=`\x3c!--${f}--\x3e`,p=new RegExp(`${f}|${h}`),d="$lit$";class v{constructor(t,e){this.parts=[],this.element=e;let n=-1,r=0;const i=[],o=e=>{const s=e.content,u=document.createTreeWalker(s,133,null,!1);let c=0;for(;u.nextNode();){n++;const e=u.currentNode;if(1===e.nodeType){if(e.hasAttributes()){const i=e.attributes;let o=0;for(let t=0;t<i.length;t++)i[t].value.indexOf(f)>=0&&o++;for(;o-- >0;){const i=t.strings[r],o=m.exec(i)[2],s=o.toLowerCase()+d,u=e.getAttribute(s).split(p);this.parts.push({type:"attribute",index:n,name:o,strings:u}),e.removeAttribute(s),r+=u.length-1}}"TEMPLATE"===e.tagName&&o(e)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(f)>=0){const o=e.parentNode,s=t.split(p),u=s.length-1;for(let t=0;t<u;t++)o.insertBefore(""===s[t]?y():document.createTextNode(s[t]),e),this.parts.push({type:"node",index:++n});""===s[u]?(o.insertBefore(y(),e),i.push(e)):e.data=s[u],r+=u}}else if(8===e.nodeType)if(e.data===f){const t=e.parentNode;null!==e.previousSibling&&n!==c||(n++,t.insertBefore(y(),e)),c=n,this.parts.push({type:"node",index:n}),null===e.nextSibling?e.data="":(i.push(e),n--),r++}else{let t=-1;for(;-1!==(t=e.data.indexOf(f,t+1));)this.parts.push({type:"node",index:-1})}}};o(e);for(const t of i)t.parentNode.removeChild(t)}}const b=t=>-1!==t.index,y=()=>document.createComment(""),m=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F \x09\x0a\x0c\x0d"'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class g{constructor(t,e,n){this._parts=[],this.template=t,this.processor=e,this.options=n}update(t){let e=0;for(const n of this._parts)void 0!==n&&n.setValue(t[e]),e++;for(const t of this._parts)void 0!==t&&t.commit()}_clone(){const t=s?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=this.template.parts;let n=0,r=0;const i=t=>{const o=document.createTreeWalker(t,133,null,!1);let s=o.nextNode();for(;n<e.length&&null!==s;){const t=e[n];if(b(t))if(r===t.index){if("node"===t.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(s.previousSibling),this._parts.push(t)}else this._parts.push(...this.processor.handleAttributeExpressions(s,t.name,t.strings,this.options));n++}else r++,"TEMPLATE"===s.nodeName&&i(s.content),s=o.nextNode();else this._parts.push(void 0),n++}};return i(t),s&&(document.adoptNode(t),customElements.upgrade(t)),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */class w{constructor(t,e,n,r){this.strings=t,this.values=e,this.type=n,this.processor=r}getHTML(){const t=this.strings.length-1;let e="";for(let n=0;n<t;n++){const t=this.strings[n],r=m.exec(t);e+=r?t.substr(0,r.index)+r[1]+r[2]+d+r[3]+f:t+h}return e+this.strings[t]}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}class x extends w{getHTML(){return`<svg>${super.getHTML()}</svg>`}getTemplateElement(){const t=super.getTemplateElement(),e=t.content,n=e.firstChild;return e.removeChild(n),u(e,n.firstChild),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const _=t=>null===t||!("object"==typeof t||"function"==typeof t);class S{constructor(t,e,n){this.dirty=!0,this.element=t,this.name=e,this.strings=n,this.parts=[];for(let t=0;t<n.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new j(this)}_getValue(){const t=this.strings,e=t.length-1;let n="";for(let r=0;r<e;r++){n+=t[r];const e=this.parts[r];if(void 0!==e){const t=e.value;if(null!=t&&(Array.isArray(t)||"string"!=typeof t&&t[Symbol.iterator]))for(const e of t)n+="string"==typeof e?e:String(e);else n+="string"==typeof t?t:String(t)}}return n+=t[e]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class j{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===a||_(t)&&t===this.value||(this.value=t,o(t)||(this.committer.dirty=!0))}commit(){for(;o(this.value);){const t=this.value;this.value=a,t(this)}this.value!==a&&this.committer.commit()}}class O{constructor(t){this.value=void 0,this._pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(y()),this.endNode=t.appendChild(y())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t._insert(this.startNode=y()),t._insert(this.endNode=y())}insertAfterPart(t){t._insert(this.startNode=y()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this._pendingValue=t}commit(){for(;o(this._pendingValue);){const t=this._pendingValue;this._pendingValue=a,t(this)}const t=this._pendingValue;t!==a&&(_(t)?t!==this.value&&this._commitText(t):t instanceof w?this._commitTemplateResult(t):t instanceof Node?this._commitNode(t):Array.isArray(t)||t[Symbol.iterator]?this._commitIterable(t):t===l?(this.value=l,this.clear()):this._commitText(t))}_insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}_commitNode(t){this.value!==t&&(this.clear(),this._insert(t),this.value=t)}_commitText(t){const e=this.startNode.nextSibling;t=null==t?"":t,e===this.endNode.previousSibling&&3===e.nodeType?e.data=t:this._commitNode(document.createTextNode("string"==typeof t?t:String(t))),this.value=t}_commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof g&&this.value.template===e)this.value.update(t.values);else{const n=new g(e,t.processor,this.options),r=n._clone();n.update(t.values),this._commitNode(r),this.value=n}}_commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let n,r=0;for(const i of t)void 0===(n=e[r])&&(n=new O(this.options),e.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(e[r-1])),n.setValue(i),n.commit(),r++;r<e.length&&(e.length=r,this.clear(n&&n.endNode))}clear(t=this.startNode){c(this.startNode.parentNode,t.nextSibling,this.endNode)}}class T{constructor(t,e,n){if(this.value=void 0,this._pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=n}setValue(t){this._pendingValue=t}commit(){for(;o(this._pendingValue);){const t=this._pendingValue;this._pendingValue=a,t(this)}if(this._pendingValue===a)return;const t=!!this._pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name)),this.value=t,this._pendingValue=a}}class C extends S{constructor(t,e,n){super(t,e,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new E(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class E extends j{}let N=!1;try{const t={get capture(){return N=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}class k{constructor(t,e,n){this.value=void 0,this._pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=n,this._boundHandleEvent=(t=>this.handleEvent(t))}setValue(t){this._pendingValue=t}commit(){for(;o(this._pendingValue);){const t=this._pendingValue;this._pendingValue=a,t(this)}if(this._pendingValue===a)return;const t=this._pendingValue,e=this.value,n=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),r=null!=t&&(null==e||n);n&&this.element.removeEventListener(this.eventName,this._boundHandleEvent,this._options),r&&(this._options=A(t),this.element.addEventListener(this.eventName,this._boundHandleEvent,this._options)),this.value=t,this._pendingValue=a}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const A=t=>t&&(N?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */class I{handleAttributeExpressions(t,e,n,r){const i=e[0];if("."===i){return new C(t,e.slice(1),n).parts}return"@"===i?[new k(t,e.slice(1),r.eventContext)]:"?"===i?[new T(t,e.slice(1),n)]:new S(t,e,n).parts}handleTextExpression(t){return new O(t)}}const P=new I;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function D(t){let e=M.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},M.set(t.type,e));let n=e.stringsArray.get(t.strings);if(void 0!==n)return n;const r=t.strings.join(f);return void 0===(n=e.keyString.get(r))&&(n=new v(t,t.getTemplateElement()),e.keyString.set(r,n)),e.stringsArray.set(t.strings,n),n}const M=new Map,V=new WeakMap,L=(t,e,n)=>{let r=V.get(e);void 0===r&&(c(e,e.firstChild),V.set(e,r=new O(Object.assign({templateFactory:D},n))),r.appendInto(e)),r.setValue(t),r.commit()};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */n.d(e,"html",function(){return H}),n.d(e,"svg",function(){return R}),n.d(e,"DefaultTemplateProcessor",function(){return I}),n.d(e,"defaultTemplateProcessor",function(){return P}),n.d(e,"directive",function(){return i}),n.d(e,"isDirective",function(){return o}),n.d(e,"removeNodes",function(){return c}),n.d(e,"reparentNodes",function(){return u}),n.d(e,"noChange",function(){return a}),n.d(e,"nothing",function(){return l}),n.d(e,"AttributeCommitter",function(){return S}),n.d(e,"AttributePart",function(){return j}),n.d(e,"BooleanAttributePart",function(){return T}),n.d(e,"EventPart",function(){return k}),n.d(e,"isPrimitive",function(){return _}),n.d(e,"NodePart",function(){return O}),n.d(e,"PropertyCommitter",function(){return C}),n.d(e,"PropertyPart",function(){return E}),n.d(e,"parts",function(){return V}),n.d(e,"render",function(){return L}),n.d(e,"templateCaches",function(){return M}),n.d(e,"templateFactory",function(){return D}),n.d(e,"TemplateInstance",function(){return g}),n.d(e,"SVGTemplateResult",function(){return x}),n.d(e,"TemplateResult",function(){return w}),n.d(e,"createMarker",function(){return y}),n.d(e,"isTemplatePartActive",function(){return b}),n.d(e,"Template",function(){return v}),
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.0.0");const H=(t,...e)=>new w(t,e,"html",P),R=(t,...e)=>new x(t,e,"svg",P)},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(0),i=n(1);function o(){return function(t){return t.lift(new s(t))}}var s=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new u(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),u=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.a(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(i.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return l});var r=n(0),i=n(6),o=n(67),s=n(5),u=n(60),c=n(21),a=n(68),l=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.a(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new f(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new c.a;if(this.isStopped||this.hasError?e=s.a.EMPTY:(this.observers.push(t),e=new a.a(this,t)),i&&t.add(t=new u.a(t,i)),n)for(var l=0;l<o&&!t.closed;l++)t.next(r[l]);else for(l=0;l<o&&!t.closed;l++)t.next(r[l].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||o.a).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(i.a),f=function(){return function(t,e){this.time=t,this.value=e}}()},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(2);function i(t,e){return e?new r.a(function(n){return e.schedule(o,0,{error:t,subscriber:n})}):new r.a(function(e){return e.error(t)})}function o(t){var e=t.error;t.subscriber.error(e)}},function(t,e,n){"use strict";n.d(e,"b",function(){return l}),n.d(e,"a",function(){return f});var r=n(0),i=n(10),o=n(7),s=n(4),u=n(3),c=n(26),a={};function l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null,r=null;return Object(i.a)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(o.a)(t[0])&&(t=t[0]),Object(c.a)(t,r).lift(new f(n))}var f=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return r.a(e,t),e.prototype._next=function(t){this.values.push(a),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Object(u.a)(this,r,r,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.values,s=o[n],u=this.toRespond?s===a?--this.toRespond:this.toRespond:0;o[n]=e,0===u&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(22),i=n(18);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Object(r.a)(i.a,t)}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(2),i=n(12),o=n(11);function s(t){return new r.a(function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Object(i.a)(n):Object(o.b)()).subscribe(e)})}},function(t,e,n){"use strict";n.d(e,"b",function(){return l}),n.d(e,"a",function(){return f});var r=n(0),i=n(26),o=n(7),s=n(1),u=n(4),c=n(3),a=n(19);function l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),Object(i.a)(t,void 0).lift(new f(n))}var f=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:null,i.values=r,i}return r.a(e,t),e.prototype._next=function(t){var e=this.iterators;Object(o.a)(t)?e.push(new d(t)):"function"==typeof t[a.a]?e.push(new p(t[a.a]())):e.push(new v(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,n));else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return}var i=!1,o=[];for(r=0;r<e;r++){var s,u=(s=t[r]).next();if(s.hasCompleted()&&(i=!0),u.done)return void n.complete();o.push(u.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.a),p=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),d=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[a.a]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),v=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.a(e,t),e.prototype[a.a]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return Object(c.a)(this,this.observable,this,e)},e}(u.a)},function(t,e,n){"use strict";function r(t){return null!==t&&"object"==typeof t}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(1);function i(t){for(;t;){var e=t,n=e.closed,i=e.destination,o=e.isStopped;if(n||o)return!1;t=i&&i instanceof r.a?i:null}return!0}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(2),i=n(5);function o(t,e){return new r.a(function(n){var r=new i.a,o=0;return r.add(e.schedule(function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()})),r})}},function(t,e,n){"use strict";var r=n(0),i=1,o={};var s=function(t){var e=i++;return o[e]=t,Promise.resolve().then(function(){return function(t){var e=o[t];e&&e()}(e)}),e},u=function(t){delete o[t]},c=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.a(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=s(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(u(n),e.scheduled=void 0)},e}(n(29).a),a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(n(27).a);n.d(e,"a",function(){return l});var l=new a(c)},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(14),i=n(32),o={closed:!0,next:function(t){},error:function(t){if(r.a.useDeprecatedSynchronousErrorHandling)throw t;Object(i.a)(t)},complete:function(){}}},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(86)),r(n(75))},function(t,e,n){var r,i;n(90),r=[n(89)],void 0===(i=function(t){return function(){var e,n,r,i=0,o={error:"error",info:"info",success:"success",warning:"warning"},s={clear:function(n,r){var i=f();e||u(i),c(n,i,r)||function(n){for(var r=e.children(),i=r.length-1;i>=0;i--)c(t(r[i]),n)}(i)},remove:function(n){var r=f();e||u(r),n&&0===t(":focus",n).length?h(n):e.children().length&&e.remove()},error:function(t,e,n){return l({type:o.error,iconClass:f().iconClasses.error,message:t,optionsOverride:n,title:e})},getContainer:u,info:function(t,e,n){return l({type:o.info,iconClass:f().iconClasses.info,message:t,optionsOverride:n,title:e})},options:{},subscribe:function(t){n=t},success:function(t,e,n){return l({type:o.success,iconClass:f().iconClasses.success,message:t,optionsOverride:n,title:e})},version:"2.1.4",warning:function(t,e,n){return l({type:o.warning,iconClass:f().iconClasses.warning,message:t,optionsOverride:n,title:e})}};return s;function u(n,r){return n||(n=f()),(e=t("#"+n.containerId)).length?e:(r&&(e=function(n){return(e=t("<div/>").attr("id",n.containerId).addClass(n.positionClass)).appendTo(t(n.target)),e}(n)),e)}function c(e,n,r){var i=!(!r||!r.force)&&r.force;return!(!e||!i&&0!==t(":focus",e).length||(e[n.hideMethod]({duration:n.hideDuration,easing:n.hideEasing,complete:function(){h(e)}}),0))}function a(t){n&&n(t)}function l(n){var o=f(),s=n.iconClass||o.iconClass;if(void 0!==n.optionsOverride&&(o=t.extend(o,n.optionsOverride),s=n.optionsOverride.iconClass||s),!function(t,e){if(t.preventDuplicates){if(e.message===r)return!0;r=e.message}return!1}(o,n)){i++,e=u(o,!0);var c=null,l=t("<div/>"),p=t("<div/>"),d=t("<div/>"),v=t("<div/>"),b=t(o.closeHtml),y={intervalId:null,hideEta:null,maxHideTime:null},m={toastId:i,state:"visible",startTime:new Date,options:o,map:n};return n.iconClass&&l.addClass(o.toastClass).addClass(s),function(){if(n.title){var t=n.title;o.escapeHtml&&(t=g(n.title)),p.append(t).addClass(o.titleClass),l.append(p)}}(),function(){if(n.message){var t=n.message;o.escapeHtml&&(t=g(n.message)),d.append(t).addClass(o.messageClass),l.append(d)}}(),o.closeButton&&(b.addClass(o.closeClass).attr("role","button"),l.prepend(b)),o.progressBar&&(v.addClass(o.progressClass),l.prepend(v)),o.rtl&&l.addClass("rtl"),o.newestOnTop?e.prepend(l):e.append(l),function(){var t="";switch(n.iconClass){case"toast-success":case"toast-info":t="polite";break;default:t="assertive"}l.attr("aria-live",t)}(),l.hide(),l[o.showMethod]({duration:o.showDuration,easing:o.showEasing,complete:o.onShown}),o.timeOut>0&&(c=setTimeout(w,o.timeOut),y.maxHideTime=parseFloat(o.timeOut),y.hideEta=(new Date).getTime()+y.maxHideTime,o.progressBar&&(y.intervalId=setInterval(S,10))),o.closeOnHover&&l.hover(_,x),!o.onclick&&o.tapToDismiss&&l.click(w),o.closeButton&&b&&b.click(function(t){t.stopPropagation?t.stopPropagation():void 0!==t.cancelBubble&&!0!==t.cancelBubble&&(t.cancelBubble=!0),o.onCloseClick&&o.onCloseClick(t),w(!0)}),o.onclick&&l.click(function(t){o.onclick(t),w()}),a(m),o.debug&&console&&console.log(m),l}function g(t){return null==t&&(t=""),t.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function w(e){var n=e&&!1!==o.closeMethod?o.closeMethod:o.hideMethod,r=e&&!1!==o.closeDuration?o.closeDuration:o.hideDuration,i=e&&!1!==o.closeEasing?o.closeEasing:o.hideEasing;if(!t(":focus",l).length||e)return clearTimeout(y.intervalId),l[n]({duration:r,easing:i,complete:function(){h(l),clearTimeout(c),o.onHidden&&"hidden"!==m.state&&o.onHidden(),m.state="hidden",m.endTime=new Date,a(m)}})}function x(){(o.timeOut>0||o.extendedTimeOut>0)&&(c=setTimeout(w,o.extendedTimeOut),y.maxHideTime=parseFloat(o.extendedTimeOut),y.hideEta=(new Date).getTime()+y.maxHideTime)}function _(){clearTimeout(c),y.hideEta=0,l.stop(!0,!0)[o.showMethod]({duration:o.showDuration,easing:o.showEasing})}function S(){var t=(y.hideEta-(new Date).getTime())/y.maxHideTime*100;v.width(t+"%")}}function f(){return t.extend({},{tapToDismiss:!0,toastClass:"toast",containerId:"toast-container",debug:!1,showMethod:"fadeIn",showDuration:300,showEasing:"swing",onShown:void 0,hideMethod:"fadeOut",hideDuration:1e3,hideEasing:"swing",onHidden:void 0,closeMethod:!1,closeDuration:!1,closeEasing:!1,closeOnHover:!0,extendedTimeOut:1e3,iconClasses:{error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"},iconClass:"toast-info",positionClass:"toast-top-right",timeOut:5e3,titleClass:"toast-title",messageClass:"toast-message",escapeHtml:!1,target:"body",closeHtml:'<button type="button">&times;</button>',closeClass:"toast-close-button",newestOnTop:!0,preventDuplicates:!1,progressBar:!1,progressClass:"toast-progress",rtl:!1},s.options)}function h(t){e||(e=u()),t.is(":visible")||(t.remove(),t=null,0===e.children().length&&(e.remove(),r=void 0))}}()}.apply(e,r))||(t.exports=i)},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}()},function(t,e,n){"use strict";n.d(e,"b",function(){return c}),n.d(e,"a",function(){return h});var r=n(0),i=n(1),o=n(5),s=n(2),u=n(6);function c(t,e,n,r){return function(i){return i.lift(new a(t,e,n,r))}}var a=function(){function t(t,e,n,r){this.keySelector=t,this.elementSelector=e,this.durationSelector=n,this.subjectSelector=r}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),l=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.keySelector=n,s.elementSelector=r,s.durationSelector=i,s.subjectSelector=o,s.groups=null,s.attemptedToUnsubscribe=!1,s.count=0,s}return r.a(e,t),e.prototype._next=function(t){var e;try{e=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,e)},e.prototype._group=function(t,e){var n=this.groups;n||(n=this.groups=new Map);var r,i=n.get(e);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new u.a,n.set(e,i);var o=new h(e,i,this);if(this.destination.next(o),this.durationSelector){var s=void 0;try{s=this.durationSelector(new h(e,i))}catch(t){return void this.error(t)}this.add(s.subscribe(new f(e,i,this)))}}i.closed||i.next(r)},e.prototype._error=function(t){var e=this.groups;e&&(e.forEach(function(e,n){e.error(t)}),e.clear()),this.destination.error(t)},e.prototype._complete=function(){var t=this.groups;t&&(t.forEach(function(t,e){t.complete()}),t.clear()),this.destination.complete()},e.prototype.removeGroup=function(t){this.groups.delete(t)},e.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},e}(i.a),f=function(t){function e(e,n,r){var i=t.call(this,n)||this;return i.key=e,i.group=n,i.parent=r,i}return r.a(e,t),e.prototype._next=function(t){this.complete()},e.prototype._unsubscribe=function(){var t=this.parent,e=this.key;this.key=this.parent=null,t&&t.removeGroup(e)},e}(i.a),h=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return r.a(e,t),e.prototype._subscribe=function(t){var e=new o.a,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new p(n)),e.add(r.subscribe(t)),e},e}(s.a),p=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return r.a(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(o.a)},function(t,e,n){"use strict";n.r(e);var r=n(0),i=n(4),o=n(3);function s(t){return function(e){return e.lift(new u(t))}}var u=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new c(t,this.durationSelector))},t}(),c=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r}return r.a(e,t),e.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var e=void 0;try{e=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var n=Object(o.a)(this,e);!n||n.closed?this.clearThrottle():this.add(this.throttled=n)}},e.prototype.clearThrottle=function(){var t=this.value,e=this.hasValue,n=this.throttled;n&&(this.remove(n),this.throttled=null,n.unsubscribe()),e&&(this.value=null,this.hasValue=!1,this.destination.next(t))},e.prototype.notifyNext=function(t,e,n,r){this.clearThrottle()},e.prototype.notifyComplete=function(){this.clearThrottle()},e}(i.a),a=n(8),l=n(65);function f(t,e){return void 0===e&&(e=a.a),s(function(){return Object(l.a)(t,e)})}function h(t){return function(e){return e.lift(new p(t))}}var p=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,e){return e.subscribe(new d(t,this.closingNotifier))},t}(),d=function(t){function e(e,n){var r=t.call(this,e)||this;return r.buffer=[],r.add(Object(o.a)(r,n)),r}return r.a(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.buffer;this.buffer=[],this.destination.next(o)},e}(i.a),v=n(1);function b(t,e){return void 0===e&&(e=null),function(n){return n.lift(new y(t,e))}}var y=function(){function t(t,e){this.bufferSize=t,this.startBufferEvery=e,this.subscriberClass=e&&t!==e?g:m}return t.prototype.call=function(t,e){return e.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),m=function(t){function e(e,n){var r=t.call(this,e)||this;return r.bufferSize=n,r.buffer=[],r}return r.a(e,t),e.prototype._next=function(t){var e=this.buffer;e.push(t),e.length==this.bufferSize&&(this.destination.next(e),this.buffer=[])},e.prototype._complete=function(){var e=this.buffer;e.length>0&&this.destination.next(e),t.prototype._complete.call(this)},e}(v.a),g=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.bufferSize=n,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.a(e,t),e.prototype._next=function(t){var e=this.bufferSize,n=this.startBufferEvery,r=this.buffers,i=this.count;this.count++,i%n==0&&r.push([]);for(var o=r.length;o--;){var s=r[o];s.push(t),s.length===e&&(r.splice(o,1),this.destination.next(s))}},e.prototype._complete=function(){for(var e=this.buffers,n=this.destination;e.length>0;){var r=e.shift();r.length>0&&n.next(r)}t.prototype._complete.call(this)},e}(v.a),w=n(10);function x(t){var e=arguments.length,n=a.a;Object(w.a)(arguments[arguments.length-1])&&(n=arguments[arguments.length-1],e--);var r=null;e>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return e>=3&&(i=arguments[2]),function(e){return e.lift(new _(t,r,i,n))}}var _=function(){function t(t,e,n,r){this.bufferTimeSpan=t,this.bufferCreationInterval=e,this.maxBufferSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new j(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),S=function(){return function(){this.buffer=[]}}(),j=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;s.bufferTimeSpan=n,s.bufferCreationInterval=r,s.maxBufferSize=i,s.scheduler=o,s.contexts=[];var u=s.openContext();if(s.timespanOnly=null==r||r<0,s.timespanOnly){var c={subscriber:s,context:u,bufferTimeSpan:n};s.add(u.closeAction=o.schedule(O,n,c))}else{var a={subscriber:s,context:u},l={bufferTimeSpan:n,bufferCreationInterval:r,subscriber:s,scheduler:o};s.add(u.closeAction=o.schedule(C,n,a)),s.add(o.schedule(T,r,l))}return s}return r.a(e,t),e.prototype._next=function(t){for(var e,n=this.contexts,r=n.length,i=0;i<r;i++){var o=n[i],s=o.buffer;s.push(t),s.length==this.maxBufferSize&&(e=o)}e&&this.onBufferFull(e)},e.prototype._error=function(e){this.contexts.length=0,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts,n=this.destination;e.length>0;){var r=e.shift();n.next(r.buffer)}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.contexts=null},e.prototype.onBufferFull=function(t){this.closeContext(t);var e=t.closeAction;if(e.unsubscribe(),this.remove(e),!this.closed&&this.timespanOnly){t=this.openContext();var n=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:n};this.add(t.closeAction=this.scheduler.schedule(O,n,r))}},e.prototype.openContext=function(){var t=new S;return this.contexts.push(t),t},e.prototype.closeContext=function(t){this.destination.next(t.buffer);var e=this.contexts;(e?e.indexOf(t):-1)>=0&&e.splice(e.indexOf(t),1)},e}(v.a);function O(t){var e=t.subscriber,n=t.context;n&&e.closeContext(n),e.closed||(t.context=e.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function T(t){var e=t.bufferCreationInterval,n=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(C,n,{subscriber:r,context:o})),this.schedule(t,e))}function C(t){var e=t.subscriber,n=t.context;e.closeContext(n)}var E=n(5);function N(t,e){return function(n){return n.lift(new k(t,e))}}var k=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new A(t,this.openings,this.closingSelector))},t}(),A=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(Object(o.a)(i,n)),i}return r.a(e,t),e.prototype._next=function(t){for(var e=this.contexts,n=e.length,r=0;r<n;r++)e[r].buffer.push(t)},e.prototype._error=function(e){for(var n=this.contexts;n.length>0;){var r=n.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts;e.length>0;){var n=e.shift();this.destination.next(n.buffer),n.subscription.unsubscribe(),n.buffer=null,n.subscription=null}this.contexts=null,t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,r,i){t?this.closeBuffer(t):this.openBuffer(e)},e.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},e.prototype.openBuffer=function(t){try{var e=this.closingSelector.call(this,t);e&&this.trySubscribe(e)}catch(t){this._error(t)}},e.prototype.closeBuffer=function(t){var e=this.contexts;if(e&&t){var n=t.buffer,r=t.subscription;this.destination.next(n),e.splice(e.indexOf(t),1),this.remove(r),r.unsubscribe()}},e.prototype.trySubscribe=function(t){var e=this.contexts,n=new E.a,r={buffer:[],subscription:n};e.push(r);var i=Object(o.a)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),n.add(i))},e}(i.a);function I(t){return function(e){return e.lift(new P(t))}}var P=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new D(t,this.closingSelector))},t}(),D=function(t){function e(e,n){var r=t.call(this,e)||this;return r.closingSelector=n,r.subscribing=!1,r.openBuffer(),r}return r.a(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype._complete=function(){var e=this.buffer;e&&this.destination.next(e),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},e.prototype.notifyNext=function(t,e,n,r,i){this.openBuffer()},e.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},e.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var e,n=this.buffer;this.buffer&&this.destination.next(n),this.buffer=[];try{e=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new E.a,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add(Object(o.a)(this,e)),this.subscribing=!1},e}(i.a),M=n(13);function V(t){return function(e){var n=new L(t),r=e.lift(n);return n.caught=r}}var L=function(){function t(t){this.selector=t}return t.prototype.call=function(t,e){return e.subscribe(new H(t,this.selector,this.caught))},t}(),H=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.selector=n,i.caught=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=void 0;try{n=this.selector(e,this.caught)}catch(e){return void t.prototype.error.call(this,e)}this._unsubscribeAndRecycle();var r=new M.a(this,void 0,void 0);this.add(r),Object(o.a)(this,n,void 0,void 0,r)}},e}(i.a),R=n(43);function q(t){return function(e){return e.lift(new R.a(t))}}var B=n(7),W=n(12);function F(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null;return"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(B.a)(t[0])&&(t=t[0].slice()),function(e){return e.lift.call(Object(W.a)([e].concat(t)),new R.a(n))}}var z=n(31);function $(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(z.a.apply(void 0,[e].concat(t)))}}var U=n(62),Y=n(22);function X(t,e){return Object(Y.a)(t,e,1)}function K(t,e){return X(function(){return t},e)}function G(t){return function(e){return e.lift(new J(t,e))}}var J=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Q(t,this.predicate,this.source))},t}(),Q=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.count=0,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},e.prototype._tryPredicate=function(t){var e;try{e=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e&&this.count++},e.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},e}(v.a);function Z(t){return function(e){return e.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new et(t,this.durationSelector))},t}(),et=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r.durationSubscription=null,r}return r.a(e,t),e.prototype._next=function(t){try{var e=this.durationSelector.call(this,t);e&&this._tryNext(t,e)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.emitValue(),this.destination.complete()},e.prototype._tryNext=function(t,e){var n=this.durationSubscription;this.value=t,this.hasValue=!0,n&&(n.unsubscribe(),this.remove(n)),(n=Object(o.a)(this,e))&&!n.closed&&this.add(this.durationSubscription=n)},e.prototype.notifyNext=function(t,e,n,r,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){if(this.hasValue){var e=this.value,n=this.durationSubscription;n&&(this.durationSubscription=null,n.unsubscribe(),this.remove(n)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,e)}},e}(i.a);function nt(t,e){return void 0===e&&(e=a.a),function(n){return n.lift(new rt(t,e))}}var rt=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.dueTime=n,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.a(e,t),e.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},e.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},e.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},e.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},e}(v.a);function ot(t){t.debouncedNext()}function st(t){return void 0===t&&(t=null),function(e){return e.lift(new ut(t))}}var ut=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,e){return e.subscribe(new ct(t,this.defaultValue))},t}(),ct=function(t){function e(e,n){var r=t.call(this,e)||this;return r.defaultValue=n,r.isEmpty=!0,r}return r.a(e,t),e.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},e.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},e}(v.a);function at(t){return t instanceof Date&&!isNaN(+t)}var lt=n(17);function ft(t,e){void 0===e&&(e=a.a);var n=at(t)?+t-e.now():Math.abs(t);return function(t){return t.lift(new ht(n,e))}}var ht=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new pt(t,this.delay,this.scheduler))},t}(),pt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.delay=n,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.a(e,t),e.dispatch=function(t){for(var e=t.source,n=e.queue,r=t.scheduler,i=t.destination;n.length>0&&n[0].time-r.now()<=0;)n.shift().notification.observe(i);if(n.length>0){var o=Math.max(0,n[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,n=new dt(e.now()+this.delay,t);this.queue.push(n),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(lt.a.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(lt.a.createComplete()),this.unsubscribe()},e}(v.a),dt=function(){return function(t,e){this.time=t,this.notification=e}}(),vt=n(2);function bt(t,e){return e?function(n){return new gt(n,e).lift(new yt(t))}:function(e){return e.lift(new yt(t))}}var yt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new mt(t,this.delayDurationSelector))},t}(),mt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.delayDurationSelector=n,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){var e=this.removeSubscription(t);e&&this.destination.next(e),this.tryComplete()},e.prototype._next=function(t){var e=this.index++;try{var n=this.delayDurationSelector(t,e);n&&this.tryDelay(n,t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},e.prototype.removeSubscription=function(t){t.unsubscribe();var e=this.delayNotifierSubscriptions.indexOf(t);return-1!==e&&this.delayNotifierSubscriptions.splice(e,1),t.outerValue},e.prototype.tryDelay=function(t,e){var n=Object(o.a)(this,t,e);n&&!n.closed&&(this.destination.add(n),this.delayNotifierSubscriptions.push(n))},e.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},e}(i.a),gt=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subscriptionDelay=n,r}return r.a(e,t),e.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new wt(t,this.source))},e}(vt.a),wt=function(t){function e(e,n){var r=t.call(this)||this;return r.parent=e,r.source=n,r.sourceSubscribed=!1,r}return r.a(e,t),e.prototype._next=function(t){this.subscribeToSource()},e.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},e.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},e.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},e}(v.a);function xt(){return function(t){return t.lift(new _t)}}var _t=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new St(t))},t}(),St=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype._next=function(t){t.observe(this.destination)},e}(v.a);function jt(t,e){return function(n){return n.lift(new Ot(t,e))}}var Ot=function(){function t(t,e){this.keySelector=t,this.flushes=e}return t.prototype.call=function(t,e){return e.subscribe(new Tt(t,this.keySelector,this.flushes))},t}(),Tt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.keySelector=n,i.values=new Set,r&&i.add(Object(o.a)(i,r)),i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.values.clear()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},e.prototype._useKeySelector=function(t){var e,n=this.destination;try{e=this.keySelector(t)}catch(t){return void n.error(t)}this._finalizeNext(e,t)},e.prototype._finalizeNext=function(t,e){var n=this.values;n.has(t)||(n.add(t),this.destination.next(e))},e}(i.a);function Ct(t,e){return function(n){return n.lift(new Et(t,e))}}var Et=function(){function t(t,e){this.compare=t,this.keySelector=e}return t.prototype.call=function(t,e){return e.subscribe(new Nt(t,this.compare,this.keySelector))},t}(),Nt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.keySelector=r,i.hasKey=!1,"function"==typeof n&&(i.compare=n),i}return r.a(e,t),e.prototype.compare=function(t,e){return t===e},e.prototype._next=function(t){var e;try{var n=this.keySelector;e=n?n(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,e)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=e,this.destination.next(t))},e}(v.a);function kt(t,e){return Ct(function(n,r){return e?e(n[t],r[t]):n[t]===r[t]})}var At=n(23),It=n(16),Pt=n(25);function Dt(t){return void 0===t&&(t=Lt),function(e){return e.lift(new Mt(t))}}var Mt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,e){return e.subscribe(new Vt(t,this.errorFactory))},t}(),Vt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.errorFactory=n,r.hasValue=!1,r}return r.a(e,t),e.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},e.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(e){t=e}this.destination.error(t)},e}(v.a);function Lt(){return new Pt.a}var Ht=n(11);function Rt(t){return function(e){return 0===t?Object(Ht.b)():e.lift(new qt(t))}}var qt=function(){function t(t){if(this.total=t,this.total<0)throw new At.a}return t.prototype.call=function(t,e){return e.subscribe(new Bt(t,this.total))},t}(),Bt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))},e}(v.a);function Wt(t,e){if(t<0)throw new At.a;var n=arguments.length>=2;return function(r){return r.pipe(Object(It.a)(function(e,n){return n===t}),Rt(1),n?st(e):Dt(function(){return new At.a}))}}var Ft=n(33);function zt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return Object(z.a)(e,Ft.a.apply(void 0,t))}}function $t(t,e){return function(n){return n.lift(new Ut(t,e,n))}}var Ut=function(){function t(t,e,n){this.predicate=t,this.thisArg=e,this.source=n}return t.prototype.call=function(t,e){return e.subscribe(new Yt(t,this.predicate,this.thisArg,this.source))},t}(),Yt=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.predicate=n,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.a(e,t),e.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},e.prototype._next=function(t){var e=!1;try{e=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e||this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(v.a);function Xt(){return function(t){return t.lift(new Kt)}}var Kt=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Gt(t))},t}(),Gt=function(t){function e(e){var n=t.call(this,e)||this;return n.hasCompleted=!1,n.hasSubscription=!1,n}return r.a(e,t),e.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add(Object(o.a)(this,t)))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},e.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.a),Jt=n(9);function Qt(t,e){return e?function(n){return n.pipe(Qt(function(n,r){return Object(W.a)(t(n,r)).pipe(Object(Jt.a)(function(t,i){return e(n,t,r,i)}))}))}:function(e){return e.lift(new Zt(t))}}var Zt=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new te(t,this.project))},t}(),te=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},e.prototype.tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new M.a(this,void 0,void 0);this.destination.add(r),Object(o.a)(this,t,e,n,r)},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.a);function ee(t,e,n){return void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=void 0),e=(e||0)<1?Number.POSITIVE_INFINITY:e,function(r){return r.lift(new ne(t,e,n))}}var ne=function(){function t(t,e,n){this.project=t,this.concurrent=e,this.scheduler=n}return t.prototype.call=function(t,e){return e.subscribe(new re(t,this.project,this.concurrent,this.scheduler))},t}(),re=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.project=n,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.a(e,t),e.dispatch=function(t){var e=t.subscriber,n=t.result,r=t.value,i=t.index;e.subscribeToProjection(n,r,i)},e.prototype._next=function(t){var n=this.destination;if(n.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){n.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(e.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){n.error(t)}}else this.buffer.push(t)}},e.prototype.subscribeToProjection=function(t,e,n){this.active++,this.destination.add(Object(o.a)(this,t,e,n))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this._next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e&&e.length>0&&this._next(e.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},e}(i.a);function ie(t){return function(e){return e.lift(new oe(t))}}var oe=function(){function t(t){this.callback=t}return t.prototype.call=function(t,e){return e.subscribe(new se(t,this.callback))},t}(),se=function(t){function e(e,n){var r=t.call(this,e)||this;return r.add(new E.a(n)),r}return r.a(e,t),e}(v.a);function ue(t,e){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(n){return n.lift(new ce(t,n,!1,e))}}var ce=function(){function t(t,e,n,r){this.predicate=t,this.source=e,this.yieldIndex=n,this.thisArg=r}return t.prototype.call=function(t,e){return e.subscribe(new ae(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),ae=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.predicate=n,s.source=r,s.yieldIndex=i,s.thisArg=o,s.index=0,s}return r.a(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete(),this.unsubscribe()},e.prototype._next=function(t){var e=this.predicate,n=this.thisArg,r=this.index++;try{e.call(n||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},e}(v.a);function le(t,e){return function(n){return n.lift(new ce(t,n,!0,e))}}var fe=n(18);function he(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?Object(It.a)(function(e,n){return t(e,n,r)}):fe.a,Rt(1),n?st(e):Dt(function(){return new Pt.a}))}}var pe=n(55);function de(){return function(t){return t.lift(new ve)}}var ve=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new be(t))},t}(),be=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e.prototype._next=function(t){},e}(v.a);function ye(){return function(t){return t.lift(new me)}}var me=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new ge(t))},t}(),ge=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype._next=function(t){this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(v.a);function we(t){return function(e){return 0===t?Object(Ht.b)():e.lift(new xe(t))}}var xe=function(){function t(t){if(this.total=t,this.total<0)throw new At.a}return t.prototype.call=function(t,e){return e.subscribe(new _e(t,this.total))},t}(),_e=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.ring=new Array,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.ring,n=this.total,r=this.count++;e.length<n?e.push(t):e[r%n]=t},e.prototype._complete=function(){var t=this.destination,e=this.count;if(e>0)for(var n=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<n;i++){var o=e++%n;t.next(r[o])}t.complete()},e}(v.a);function Se(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?Object(It.a)(function(e,n){return t(e,n,r)}):fe.a,we(1),n?st(e):Dt(function(){return new Pt.a}))}}function je(t){return function(e){return e.lift(new Oe(t))}}var Oe=function(){function t(t){this.value=t}return t.prototype.call=function(t,e){return e.subscribe(new Te(t,this.value))},t}(),Te=function(t){function e(e,n){var r=t.call(this,e)||this;return r.value=n,r}return r.a(e,t),e.prototype._next=function(t){this.destination.next(this.value)},e}(v.a);function Ce(){return function(t){return t.lift(new Ee)}}var Ee=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ne(t))},t}(),Ne=function(t){function e(e){return t.call(this,e)||this}return r.a(e,t),e.prototype._next=function(t){this.destination.next(lt.a.createNext(t))},e.prototype._error=function(t){var e=this.destination;e.next(lt.a.createError(t)),e.complete()},e.prototype._complete=function(){var t=this.destination;t.next(lt.a.createComplete()),t.complete()},e}(v.a);function ke(t,e){var n=!1;return arguments.length>=2&&(n=!0),function(r){return r.lift(new Ae(t,e,n))}}var Ae=function(){function t(t,e,n){void 0===n&&(n=!1),this.accumulator=t,this.seed=e,this.hasSeed=n}return t.prototype.call=function(t,e){return e.subscribe(new Ie(t,this.accumulator,this.seed,this.hasSeed))},t}(),Ie=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o._seed=r,o.hasSeed=i,o.index=0,o}return r.a(e,t),Object.defineProperty(e.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),e.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.accumulator(this.seed,t,n)}catch(t){this.destination.error(t)}this.seed=e,this.destination.next(e)},e}(v.a),Pe=n(34);function De(t,e){return arguments.length>=2?function(n){return Object(Pe.a)(ke(t,e),we(1),st(e))(n)}:function(e){return Object(Pe.a)(ke(function(e,n,r){return t(e,n,r+1)}),we(1))(e)}}function Me(t){return De("function"==typeof t?function(e,n){return t(e,n)>0?e:n}:function(t,e){return t>e?t:e})}var Ve=n(63);function Le(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(Ve.a.apply(void 0,[e].concat(t)))}}var He=n(44);function Re(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?Object(Y.a)(function(){return t},e,n):("number"==typeof e&&(n=e),Object(Y.a)(function(){return t},n))}function qe(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),function(r){return r.lift(new Be(t,e,n))}}var Be=function(){function t(t,e,n){this.accumulator=t,this.seed=e,this.concurrent=n}return t.prototype.call=function(t,e){return e.subscribe(new We(t,this.accumulator,this.seed,this.concurrent))},t}(),We=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.a(e,t),e.prototype._next=function(t){if(this.active<this.concurrent){var e=this.index++,n=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,e)}catch(t){return n.error(t)}this.active++,this._innerSub(r,t,e)}else this.buffer.push(t)},e.prototype._innerSub=function(t,e,n){var r=new M.a(this,void 0,void 0);this.destination.add(r),Object(o.a)(this,t,e,n,r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.destination;this.acc=e,this.hasValue=!0,o.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},e}(i.a);function Fe(t){return De("function"==typeof t?function(e,n){return t(e,n)<0?e:n}:function(t,e){return t<e?t:e})}var ze=n(58);function $e(t,e){return function(n){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof e)return n.lift(new Ue(r,e));var i=Object.create(n,ze.b);return i.source=n,i.subjectFactory=r,i}}var Ue=function(){function t(t,e){this.subjectFactory=t,this.selector=e}return t.prototype.call=function(t,e){var n=this.selector,r=this.subjectFactory(),i=n(r).subscribe(t);return i.add(e.subscribe(r)),i},t}(),Ye=n(60);function Xe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===t.length&&Object(B.a)(t[0])&&(t=t[0]),function(e){return e.lift(new Ke(t))}}var Ke=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,e){return e.subscribe(new Ge(t,this.nextSources))},t}(),Ge=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.nextSources=n,r}return r.a(e,t),e.prototype.notifyError=function(t,e){this.subscribeToNextSource()},e.prototype.notifyComplete=function(t){this.subscribeToNextSource()},e.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},e.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},e.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var e=new M.a(this,void 0,void 0);this.destination.add(e),Object(o.a)(this,t,void 0,void 0,e)}else this.destination.complete()},e}(i.a);function Je(){return function(t){return t.lift(new Qe)}}var Qe=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ze(t))},t}(),Ze=function(t){function e(e){var n=t.call(this,e)||this;return n.hasPrev=!1,n}return r.a(e,t),e.prototype._next=function(t){var e;this.hasPrev?e=[this.prev,t]:this.hasPrev=!0,this.prev=t,e&&this.destination.next(e)},e}(v.a),tn=n(72);function en(t,e){return function(n){return[Object(It.a)(t,e)(n),Object(It.a)(Object(tn.a)(t,e))(n)]}}function nn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.length;if(0===n)throw new Error("list of properties cannot be empty.");return function(e){return Object(Jt.a)(function(t,e){return function(n){for(var r=n,i=0;i<e;i++){var o=r[t[i]];if(void 0===o)return;r=o}return r}}(t,n))(e)}}var rn=n(6);function on(t){return t?$e(function(){return new rn.a},t):$e(new rn.a)}var sn=n(59);function un(t){return function(e){return $e(new sn.a(t))(e)}}var cn=n(28);function an(){return function(t){return $e(new cn.a)(t)}}var ln=n(41);function fn(t,e,n,r){n&&"function"!=typeof n&&(r=n);var i="function"==typeof n?n:void 0,o=new ln.a(t,e,r);return function(t){return $e(function(){return o},i)(t)}}var hn=n(64);function pn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return 1===t.length&&Object(B.a)(t[0])&&(t=t[0]),e.lift.call(hn.a.apply(void 0,[e].concat(t)))}}function dn(t){return void 0===t&&(t=-1),function(e){return 0===t?Object(Ht.b)():t<0?e.lift(new vn(-1,e)):e.lift(new vn(t-1,e))}}var vn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new bn(t,this.count,this.source))},t}(),bn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.a(e,t),e.prototype.complete=function(){if(!this.isStopped){var e=this.source,n=this.count;if(0===n)return t.prototype.complete.call(this);n>-1&&(this.count=n-1),e.subscribe(this._unsubscribeAndRecycle())}},e}(v.a);function yn(t){return function(e){return e.lift(new mn(t))}}var mn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new gn(t,this.notifier,e))},t}(),gn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},e.prototype.notifyComplete=function(e){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},e.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},e.prototype._unsubscribe=function(){var t=this.notifications,e=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype._unsubscribeAndRecycle=function(){var e=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=e,this},e.prototype.subscribeToRetries=function(){var e;this.notifications=new rn.a;try{e=(0,this.notifier)(this.notifications)}catch(e){return t.prototype.complete.call(this)}this.retries=e,this.retriesSubscription=Object(o.a)(this,e)},e}(i.a);function wn(t){return void 0===t&&(t=-1),function(e){return e.lift(new xn(t,e))}}var xn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new _n(t,this.count,this.source))},t}(),_n=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,e);r>-1&&(this.count=r-1),n.subscribe(this._unsubscribeAndRecycle())}},e}(v.a);function Sn(t){return function(e){return e.lift(new jn(t,e))}}var jn=function(){function t(t,e){this.notifier=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new On(t,this.notifier,this.source))},t}(),On=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i}return r.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.errors,r=this.retries,i=this.retriesSubscription;if(r)this.errors=null,this.retriesSubscription=null;else{n=new rn.a;try{r=(0,this.notifier)(n)}catch(e){return t.prototype.error.call(this,e)}i=Object(o.a)(this,r)}this._unsubscribeAndRecycle(),this.errors=n,this.retries=r,this.retriesSubscription=i,n.next(e)}},e.prototype._unsubscribe=function(){var t=this.errors,e=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype.notifyNext=function(t,e,n,r,i){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},e}(i.a),Tn=n(40);function Cn(t){return function(e){return e.lift(new En(t))}}var En=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new Nn(t),r=e.subscribe(n);return r.add(Object(o.a)(n,this.notifier)),r},t}(),Nn=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.hasValue=!1,e}return r.a(e,t),e.prototype._next=function(t){this.value=t,this.hasValue=!0},e.prototype.notifyNext=function(t,e,n,r,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},e}(i.a);function kn(t,e){return void 0===e&&(e=a.a),function(n){return n.lift(new An(t,e))}}var An=function(){function t(t,e){this.period=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new In(t,this.period,this.scheduler))},t}(),In=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.period=n,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(Pn,n,{subscriber:i,period:n})),i}return r.a(e,t),e.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},e.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},e}(v.a);function Pn(t){var e=t.subscriber,n=t.period;e.notifyNext(),this.schedule(t,n)}function Dn(t,e){return function(n){return n.lift(new Mn(t,e))}}var Mn=function(){function t(t,e){this.compareTo=t,this.comparator=e}return t.prototype.call=function(t,e){return e.subscribe(new Vn(t,this.compareTo,this.comparator))},t}(),Vn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.compareTo=n,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(n.subscribe(new Ln(e,i))),i}return r.a(e,t),e.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},e.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},e.prototype.checkValues=function(){for(var t=this._a,e=this._b,n=this.comparator;t.length>0&&e.length>0;){var r=t.shift(),i=e.shift(),o=!1;try{o=n?n(r,i):r===i}catch(t){this.destination.error(t)}o||this.emit(!1)}},e.prototype.emit=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},e.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},e}(v.a),Ln=function(t){function e(e,n){var r=t.call(this,e)||this;return r.parent=n,r}return r.a(e,t),e.prototype._next=function(t){this.parent.nextB(t)},e.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},e}(v.a);function Hn(){return new rn.a}function Rn(){return function(t){return Object(Tn.a)()($e(Hn)(t))}}function qn(t,e,n){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:e,refCount:!1,scheduler:n},function(t){return t.lift((o=(e=r).bufferSize,s=void 0===o?Number.POSITIVE_INFINITY:o,u=e.windowTime,c=void 0===u?Number.POSITIVE_INFINITY:u,a=e.refCount,l=e.scheduler,f=0,h=!1,p=!1,function(t){f++,n&&!h||(h=!1,n=new ln.a(s,c,l),i=t.subscribe({next:function(t){n.next(t)},error:function(t){h=!0,n.error(t)},complete:function(){p=!0,n.complete()}}));var e=n.subscribe(this);this.add(function(){f--,e.unsubscribe(),i&&!p&&a&&0===f&&(i.unsubscribe(),i=void 0,n=void 0)})}));var e,n,i,o,s,u,c,a,l,f,h,p}}function Bn(t){return function(e){return e.lift(new Wn(t,e))}}var Wn=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Fn(t,this.predicate,this.source))},t}(),Fn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.seenValue=!1,i.index=0,i}return r.a(e,t),e.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},e.prototype._next=function(t){var e=this.index++;this.predicate?this.tryNext(t,e):this.applySingleValue(t)},e.prototype.tryNext=function(t,e){try{this.predicate(t,e,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new Pt.a)},e}(v.a);function zn(t){return function(e){return e.lift(new $n(t))}}var $n=function(){function t(t){this.total=t}return t.prototype.call=function(t,e){return e.subscribe(new Un(t,this.total))},t}(),Un=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.a(e,t),e.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},e}(v.a);function Yn(t){return function(e){return e.lift(new Xn(t))}}var Xn=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new At.a}return t.prototype.call=function(t,e){return 0===this._skipCount?e.subscribe(new v.a(t)):e.subscribe(new Kn(t,this._skipCount))},t}(),Kn=function(t){function e(e,n){var r=t.call(this,e)||this;return r._skipCount=n,r._count=0,r._ring=new Array(n),r}return r.a(e,t),e.prototype._next=function(t){var e=this._skipCount,n=this._count++;if(n<e)this._ring[n]=t;else{var r=n%e,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},e}(v.a);function Gn(t){return function(e){return e.lift(new Jn(t))}}var Jn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new Qn(t,this.notifier))},t}(),Qn=function(t){function e(e,n){var r=t.call(this,e)||this;r.hasValue=!1;var i=new M.a(r,void 0,void 0);return r.add(i),r.innerSubscription=i,Object(o.a)(r,n,void 0,void 0,i),r}return r.a(e,t),e.prototype._next=function(e){this.hasValue&&t.prototype._next.call(this,e)},e.prototype.notifyNext=function(t,e,n,r,i){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},e.prototype.notifyComplete=function(){},e}(i.a);function Zn(t){return function(e){return e.lift(new tr(t))}}var tr=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,e){return e.subscribe(new er(t,this.predicate))},t}(),er=function(t){function e(e,n){var r=t.call(this,e)||this;return r.predicate=n,r.skipping=!0,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){var e=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||e.next(t)},e.prototype.tryCallPredicate=function(t){try{var e=this.predicate(t,this.index++);this.skipping=Boolean(e)}catch(t){this.destination.error(t)}},e}(v.a);function nr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(w.a)(n)?(t.pop(),function(e){return Object(z.a)(t,e,n)}):function(e){return Object(z.a)(t,e)}}var rr=n(50),ir=n(30),or=function(t){function e(e,n,r){void 0===n&&(n=0),void 0===r&&(r=rr.a);var i=t.call(this)||this;return i.source=e,i.delayTime=n,i.scheduler=r,(!Object(ir.a)(n)||n<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=rr.a),i}return r.a(e,t),e.create=function(t,n,r){return void 0===n&&(n=0),void 0===r&&(r=rr.a),new e(t,n,r)},e.dispatch=function(t){var e=t.source,n=t.subscriber;return this.add(e.subscribe(n))},e.prototype._subscribe=function(t){var n=this.delayTime,r=this.source;return this.scheduler.schedule(e.dispatch,n,{source:r,subscriber:t})},e}(vt.a);function sr(t,e){return void 0===e&&(e=0),function(n){return n.lift(new ur(t,e))}}var ur=function(){function t(t,e){this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return new or(e,this.delay,this.scheduler).subscribe(t)},t}();function cr(t,e){return"function"==typeof e?function(n){return n.pipe(cr(function(n,r){return Object(W.a)(t(n,r)).pipe(Object(Jt.a)(function(t,i){return e(n,t,r,i)}))}))}:function(e){return e.lift(new ar(t))}}var ar=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new lr(t,this.project))},t}(),lr=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.index=0,r}return r.a(e,t),e.prototype._next=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=this.innerSubscription;r&&r.unsubscribe();var i=new M.a(this,void 0,void 0);this.destination.add(i),this.innerSubscription=Object(o.a)(this,t,e,n,i)},e.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this),this.unsubscribe()},e.prototype._unsubscribe=function(){this.innerSubscription=null},e.prototype.notifyComplete=function(e){this.destination.remove(e),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e}(i.a);function fr(){return cr(fe.a)}function hr(t,e){return e?cr(function(){return t},e):cr(function(){return t})}function pr(t){return function(e){return e.lift(new dr(t))}}var dr=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new vr(t),r=Object(o.a)(n,this.notifier);return r&&!n.seenValue?(n.add(r),e.subscribe(n)):n},t}(),vr=function(t){function e(e){var n=t.call(this,e)||this;return n.seenValue=!1,n}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.seenValue=!0,this.complete()},e.prototype.notifyComplete=function(){},e}(i.a);function br(t,e){return void 0===e&&(e=!1),function(n){return n.lift(new yr(t,e))}}var yr=function(){function t(t,e){this.predicate=t,this.inclusive=e}return t.prototype.call=function(t,e){return e.subscribe(new mr(t,this.predicate,this.inclusive))},t}(),mr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.inclusive=r,i.index=0,i}return r.a(e,t),e.prototype._next=function(t){var e,n=this.destination;try{e=this.predicate(t,this.index++)}catch(t){return void n.error(t)}this.nextOrComplete(t,e)},e.prototype.nextOrComplete=function(t,e){var n=this.destination;Boolean(e)?n.next(t):(this.inclusive&&n.next(t),n.complete())},e}(v.a),gr=n(15),wr=n(24);function xr(t,e,n){return function(r){return r.lift(new _r(t,e,n))}}var _r=function(){function t(t,e,n){this.nextOrObserver=t,this.error=e,this.complete=n}return t.prototype.call=function(t,e){return e.subscribe(new Sr(t,this.nextOrObserver,this.error,this.complete))},t}(),Sr=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o._tapNext=gr.a,o._tapError=gr.a,o._tapComplete=gr.a,o._tapError=r||gr.a,o._tapComplete=i||gr.a,Object(wr.a)(n)?(o._context=o,o._tapNext=n):n&&(o._context=n,o._tapNext=n.next||gr.a,o._tapError=n.error||gr.a,o._tapComplete=n.complete||gr.a),o}return r.a(e,t),e.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},e.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},e.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},e}(v.a),jr={leading:!0,trailing:!1};function Or(t,e){return void 0===e&&(e=jr),function(n){return n.lift(new Tr(t,e.leading,e.trailing))}}var Tr=function(){function t(t,e,n){this.durationSelector=t,this.leading=e,this.trailing=n}return t.prototype.call=function(t,e){return e.subscribe(new Cr(t,this.durationSelector,this.leading,this.trailing))},t}(),Cr=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.destination=e,o.durationSelector=n,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.a(e,t),e.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},e.prototype.send=function(){var t=this._hasValue,e=this._sendValue;t&&(this.destination.next(e),this.throttle(e)),this._hasValue=!1,this._sendValue=null},e.prototype.throttle=function(t){var e=this.tryDurationSelector(t);e&&this.add(this._throttled=Object(o.a)(this,e))},e.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},e.prototype.throttlingDone=function(){var t=this._throttled,e=this._trailing;t&&t.unsubscribe(),this._throttled=null,e&&this.send()},e.prototype.notifyNext=function(t,e,n,r,i){this.throttlingDone()},e.prototype.notifyComplete=function(){this.throttlingDone()},e}(i.a);function Er(t,e,n){return void 0===e&&(e=a.a),void 0===n&&(n=jr),function(r){return r.lift(new Nr(t,e,n.leading,n.trailing))}}var Nr=function(){function t(t,e,n,r){this.duration=t,this.scheduler=e,this.leading=n,this.trailing=r}return t.prototype.call=function(t,e){return e.subscribe(new kr(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),kr=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.duration=n,s.scheduler=r,s.leading=i,s.trailing=o,s._hasTrailingValue=!1,s._trailingValue=null,s}return r.a(e,t),e.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(Ar,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},e.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},e.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},e}(v.a);function Ar(t){t.subscriber.clearThrottle()}var Ir=n(45);function Pr(t){return void 0===t&&(t=a.a),function(e){return Object(Ir.a)(function(){return e.pipe(ke(function(e,n){var r=e.current;return{value:n,current:t.now(),last:r}},{current:t.now(),value:void 0,last:void 0}),Object(Jt.a)(function(t){var e=t.current,n=t.last,r=t.value;return new Dr(r,e-n)}))})}}var Dr=function(){return function(t,e){this.value=t,this.interval=e}}(),Mr=n(61);function Vr(t,e,n){return void 0===n&&(n=a.a),function(r){var i=at(t),o=i?+t-n.now():Math.abs(t);return r.lift(new Lr(o,i,e,n))}}var Lr=function(){function t(t,e,n,r){this.waitFor=t,this.absoluteTimeout=e,this.withObservable=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new Hr(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Hr=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.absoluteTimeout=n,s.waitFor=r,s.withObservable=i,s.scheduler=o,s.action=null,s.scheduleTimeout(),s}return r.a(e,t),e.dispatchTimeout=function(t){var e=t.withObservable;t._unsubscribeAndRecycle(),t.add(Object(o.a)(t,e))},e.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(e.dispatchTimeout,this.waitFor,this))},e.prototype._next=function(e){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,e)},e.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},e}(i.a),Rr=n(42);function qr(t,e){return void 0===e&&(e=a.a),Vr(t,Object(Rr.a)(new Mr.a),e)}function Br(t){return void 0===t&&(t=a.a),Object(Jt.a)(function(e){return new Wr(e,t.now())})}var Wr=function(){return function(t,e){this.value=t,this.timestamp=e}}();function Fr(t,e,n){return 0===n?[e]:(t.push(e),t)}function zr(){return De(Fr,[])}function $r(t){return function(e){return e.lift(new Ur(t))}}var Ur=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,e){var n=new Yr(t),r=e.subscribe(n);return r.closed||n.add(Object(o.a)(n,this.windowBoundaries)),r},t}(),Yr=function(t){function e(e){var n=t.call(this,e)||this;return n.window=new rn.a,e.next(n.window),n}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this._complete()},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t)},e.prototype._complete=function(){this.window.complete(),this.destination.complete()},e.prototype._unsubscribe=function(){this.window=null},e.prototype.openWindow=function(){var t=this.window;t&&t.complete();var e=this.destination,n=this.window=new rn.a;e.next(n)},e}(i.a);function Xr(t,e){return void 0===e&&(e=0),function(n){return n.lift(new Kr(t,e))}}var Kr=function(){function t(t,e){this.windowSize=t,this.startWindowEvery=e}return t.prototype.call=function(t,e){return e.subscribe(new Gr(t,this.windowSize,this.startWindowEvery))},t}(),Gr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.destination=e,i.windowSize=n,i.startWindowEvery=r,i.windows=[new rn.a],i.count=0,e.next(i.windows[0]),i}return r.a(e,t),e.prototype._next=function(t){for(var e=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,n=this.destination,r=this.windowSize,i=this.windows,o=i.length,s=0;s<o&&!this.closed;s++)i[s].next(t);var u=this.count-r+1;if(u>=0&&u%e==0&&!this.closed&&i.shift().complete(),++this.count%e==0&&!this.closed){var c=new rn.a;i.push(c),n.next(c)}},e.prototype._error=function(t){var e=this.windows;if(e)for(;e.length>0&&!this.closed;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},e.prototype._unsubscribe=function(){this.count=0,this.windows=null},e}(v.a);function Jr(t){var e=a.a,n=null,r=Number.POSITIVE_INFINITY;return Object(w.a)(arguments[3])&&(e=arguments[3]),Object(w.a)(arguments[2])?e=arguments[2]:Object(ir.a)(arguments[2])&&(r=arguments[2]),Object(w.a)(arguments[1])?e=arguments[1]:Object(ir.a)(arguments[1])&&(n=arguments[1]),function(i){return i.lift(new Qr(t,n,r,e))}}var Qr=function(){function t(t,e,n,r){this.windowTimeSpan=t,this.windowCreationInterval=e,this.maxWindowSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new ti(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),Zr=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._numberOfNextedValues=0,e}return r.a(e,t),e.prototype.next=function(e){this._numberOfNextedValues++,t.prototype.next.call(this,e)},Object.defineProperty(e.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),e}(rn.a),ti=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;s.destination=e,s.windowTimeSpan=n,s.windowCreationInterval=r,s.maxWindowSize=i,s.scheduler=o,s.windows=[];var u=s.openWindow();if(null!==r&&r>=0){var c={subscriber:s,window:u,context:null},a={windowTimeSpan:n,windowCreationInterval:r,subscriber:s,scheduler:o};s.add(o.schedule(ri,n,c)),s.add(o.schedule(ni,r,a))}else{var l={subscriber:s,window:u,windowTimeSpan:n};s.add(o.schedule(ei,n,l))}return s}return r.a(e,t),e.prototype._next=function(t){for(var e=this.windows,n=e.length,r=0;r<n;r++){var i=e[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},e.prototype._error=function(t){for(var e=this.windows;e.length>0;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){for(var t=this.windows;t.length>0;){var e=t.shift();e.closed||e.complete()}this.destination.complete()},e.prototype.openWindow=function(){var t=new Zr;return this.windows.push(t),this.destination.next(t),t},e.prototype.closeWindow=function(t){t.complete();var e=this.windows;e.splice(e.indexOf(t),1)},e}(v.a);function ei(t){var e=t.subscriber,n=t.windowTimeSpan,r=t.window;r&&e.closeWindow(r),t.window=e.openWindow(),this.schedule(t,n)}function ni(t){var e=t.windowTimeSpan,n=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=n.openWindow(),s={action:this,subscription:null},u={subscriber:n,window:o,context:s};s.subscription=r.schedule(ri,e,u),this.add(s.subscription),this.schedule(t,i)}function ri(t){var e=t.subscriber,n=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),e.closeWindow(n)}function ii(t,e){return function(n){return n.lift(new oi(t,e))}}var oi=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new si(t,this.openings,this.closingSelector))},t}(),si=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=Object(o.a)(i,n,n)),i}return r.a(e,t),e.prototype._next=function(t){var e=this.contexts;if(e)for(var n=e.length,r=0;r<n;r++)e[r].window.next(t)},e.prototype._error=function(e){var n=this.contexts;if(this.contexts=null,n)for(var r=n.length,i=-1;++i<r;){var o=n[i];o.window.error(e),o.subscription.unsubscribe()}t.prototype._error.call(this,e)},e.prototype._complete=function(){var e=this.contexts;if(this.contexts=null,e)for(var n=e.length,r=-1;++r<n;){var i=e[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var e=t.length,n=-1;++n<e;){var r=t[n];r.window.unsubscribe(),r.subscription.unsubscribe()}},e.prototype.notifyNext=function(t,e,n,r,i){if(t===this.openings){var s=void 0;try{s=(0,this.closingSelector)(e)}catch(t){return this.error(t)}var u=new rn.a,c=new E.a,a={window:u,subscription:c};this.contexts.push(a);var l=Object(o.a)(this,s,a);l.closed?this.closeWindow(this.contexts.length-1):(l.context=a,c.add(l)),this.destination.next(u)}else this.closeWindow(this.contexts.indexOf(t))},e.prototype.notifyError=function(t){this.error(t)},e.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},e.prototype.closeWindow=function(t){if(-1!==t){var e=this.contexts,n=e[t],r=n.window,i=n.subscription;e.splice(t,1),r.complete(),i.unsubscribe()}},e}(i.a);function ui(t){return function(e){return e.lift(new ci(t))}}var ci=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new ai(t,this.closingSelector))},t}(),ai=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.closingSelector=n,r.openWindow(),r}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow(i)},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this.openWindow(t)},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},e.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},e.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},e.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var e=this.window;e&&e.complete();var n,r=this.window=new rn.a;this.destination.next(r);try{n=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=Object(o.a)(this,n))},e}(i.a);function li(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){var n;"function"==typeof t[t.length-1]&&(n=t.pop());var r=t;return e.lift(new fi(r,n))}}var fi=function(){function t(t,e){this.observables=t,this.project=e}return t.prototype.call=function(t,e){return e.subscribe(new hi(t,this.observables,this.project))},t}(),hi=function(t){function e(e,n,r){var i=t.call(this,e)||this;i.observables=n,i.project=r,i.toRespond=[];var s=n.length;i.values=new Array(s);for(var u=0;u<s;u++)i.toRespond.push(u);for(u=0;u<s;u++){var c=n[u];i.add(Object(o.a)(i,c,c,u))}return i}return r.a(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.values[n]=e;var o=this.toRespond;if(o.length>0){var s=o.indexOf(n);-1!==s&&o.splice(s,1)}},e.prototype.notifyComplete=function(){},e.prototype._next=function(t){if(0===this.toRespond.length){var e=[t].concat(this.values);this.project?this._tryProject(e):this.destination.next(e)}},e.prototype._tryProject=function(t){var e;try{e=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.a),pi=n(46);function di(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(pi.b.apply(void 0,[e].concat(t)))}}function vi(t){return function(e){return e.lift(new pi.a(t))}}n.d(e,"audit",function(){return s}),n.d(e,"auditTime",function(){return f}),n.d(e,"buffer",function(){return h}),n.d(e,"bufferCount",function(){return b}),n.d(e,"bufferTime",function(){return x}),n.d(e,"bufferToggle",function(){return N}),n.d(e,"bufferWhen",function(){return I}),n.d(e,"catchError",function(){return V}),n.d(e,"combineAll",function(){return q}),n.d(e,"combineLatest",function(){return F}),n.d(e,"concat",function(){return $}),n.d(e,"concatAll",function(){return U.a}),n.d(e,"concatMap",function(){return X}),n.d(e,"concatMapTo",function(){return K}),n.d(e,"count",function(){return G}),n.d(e,"debounce",function(){return Z}),n.d(e,"debounceTime",function(){return nt}),n.d(e,"defaultIfEmpty",function(){return st}),n.d(e,"delay",function(){return ft}),n.d(e,"delayWhen",function(){return bt}),n.d(e,"dematerialize",function(){return xt}),n.d(e,"distinct",function(){return jt}),n.d(e,"distinctUntilChanged",function(){return Ct}),n.d(e,"distinctUntilKeyChanged",function(){return kt}),n.d(e,"elementAt",function(){return Wt}),n.d(e,"endWith",function(){return zt}),n.d(e,"every",function(){return $t}),n.d(e,"exhaust",function(){return Xt}),n.d(e,"exhaustMap",function(){return Qt}),n.d(e,"expand",function(){return ee}),n.d(e,"filter",function(){return It.a}),n.d(e,"finalize",function(){return ie}),n.d(e,"find",function(){return ue}),n.d(e,"findIndex",function(){return le}),n.d(e,"first",function(){return he}),n.d(e,"groupBy",function(){return pe.b}),n.d(e,"ignoreElements",function(){return de}),n.d(e,"isEmpty",function(){return ye}),n.d(e,"last",function(){return Se}),n.d(e,"map",function(){return Jt.a}),n.d(e,"mapTo",function(){return je}),n.d(e,"materialize",function(){return Ce}),n.d(e,"max",function(){return Me}),n.d(e,"merge",function(){return Le}),n.d(e,"mergeAll",function(){return He.a}),n.d(e,"mergeMap",function(){return Y.a}),n.d(e,"flatMap",function(){return Y.a}),n.d(e,"mergeMapTo",function(){return Re}),n.d(e,"mergeScan",function(){return qe}),n.d(e,"min",function(){return Fe}),n.d(e,"multicast",function(){return $e}),n.d(e,"observeOn",function(){return Ye.b}),n.d(e,"onErrorResumeNext",function(){return Xe}),n.d(e,"pairwise",function(){return Je}),n.d(e,"partition",function(){return en}),n.d(e,"pluck",function(){return nn}),n.d(e,"publish",function(){return on}),n.d(e,"publishBehavior",function(){return un}),n.d(e,"publishLast",function(){return an}),n.d(e,"publishReplay",function(){return fn}),n.d(e,"race",function(){return pn}),n.d(e,"reduce",function(){return De}),n.d(e,"repeat",function(){return dn}),n.d(e,"repeatWhen",function(){return yn}),n.d(e,"retry",function(){return wn}),n.d(e,"retryWhen",function(){return Sn}),n.d(e,"refCount",function(){return Tn.a}),n.d(e,"sample",function(){return Cn}),n.d(e,"sampleTime",function(){return kn}),n.d(e,"scan",function(){return ke}),n.d(e,"sequenceEqual",function(){return Dn}),n.d(e,"share",function(){return Rn}),n.d(e,"shareReplay",function(){return qn}),n.d(e,"single",function(){return Bn}),n.d(e,"skip",function(){return zn}),n.d(e,"skipLast",function(){return Yn}),n.d(e,"skipUntil",function(){return Gn}),n.d(e,"skipWhile",function(){return Zn}),n.d(e,"startWith",function(){return nr}),n.d(e,"subscribeOn",function(){return sr}),n.d(e,"switchAll",function(){return fr}),n.d(e,"switchMap",function(){return cr}),n.d(e,"switchMapTo",function(){return hr}),n.d(e,"take",function(){return Rt}),n.d(e,"takeLast",function(){return we}),n.d(e,"takeUntil",function(){return pr}),n.d(e,"takeWhile",function(){return br}),n.d(e,"tap",function(){return xr}),n.d(e,"throttle",function(){return Or}),n.d(e,"throttleTime",function(){return Er}),n.d(e,"throwIfEmpty",function(){return Dt}),n.d(e,"timeInterval",function(){return Pr}),n.d(e,"timeout",function(){return qr}),n.d(e,"timeoutWith",function(){return Vr}),n.d(e,"timestamp",function(){return Br}),n.d(e,"toArray",function(){return zr}),n.d(e,"window",function(){return $r}),n.d(e,"windowCount",function(){return Xr}),n.d(e,"windowTime",function(){return Jr}),n.d(e,"windowToggle",function(){return ii}),n.d(e,"windowWhen",function(){return ui}),n.d(e,"withLatestFrom",function(){return li}),n.d(e,"zip",function(){return di}),n.d(e,"zipAll",function(){return vi})},function(t,e,n){"use strict";n.r(e);var r=n(39);const i=new WeakMap,o=Object(r.directive)(t=>e=>{if(!("then"in t||"subscribe"in t))throw new Error("subscribableOrPromiseLike must be a subscribable or a promise like");const n=i.get(e);if(void 0!==n&&t===n.subscribableOrPromiseLike)return;const r=r=>{void 0!==n&&e.value===n.value&&t===n.subscribableOrPromiseLike||(e.setValue(r),e.commit(),i.set(e,{value:r,subscribableOrPromiseLike:t}))};"then"in t?t.then(r):t.subscribe(r)});n.d(e,"subscribe",function(){return o})},function(t,e,n){"use strict";n.d(e,"a",function(){return a}),n.d(e,"b",function(){return f});var r=n(0),i=n(6),o=n(2),s=n(1),u=n(5),c=n(40),a=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return r.a(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new u.a).add(this.source.subscribe(new h(this.getSubject(),this))),t.closed&&(this._connection=null,t=u.a.EMPTY)),t},e.prototype.refCount=function(){return Object(c.a)()(this)},e}(o.a),l=a.prototype,f={operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:l._subscribe},_isComplete:{value:l._isComplete,writable:!0},getSubject:{value:l.getSubject},connect:{value:l.connect},refCount:{value:l.refCount}},h=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.a(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(i.b);s.a},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(0),i=n(6),o=n(21),s=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return r.a(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.a;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(i.a)},function(t,e,n){"use strict";n.d(e,"b",function(){return s}),n.d(e,"a",function(){return c});var r=n(0),i=n(1),o=n(17);function s(t,e){return void 0===e&&(e=0),function(n){return n.lift(new u(t,e))}}var u=function(){function t(t,e){void 0===e&&(e=0),this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return e.subscribe(new c(t,this.scheduler,this.delay))},t}(),c=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return r.a(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new a(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(o.a.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(o.a.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(o.a.createComplete()),this.unsubscribe()},e}(i.a),a=function(){return function(t,e){this.notification=t,this.destination=e}}()},function(t,e,n){"use strict";function r(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}n.d(e,"a",function(){return i}),r.prototype=Object.create(Error.prototype);var i=r},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(44);function i(){return Object(r.a)(1)}},function(t,e,n){"use strict";n.d(e,"a",function(){return u});var r=n(2),i=n(10),o=n(44),s=n(26);function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,u=null,c=t[t.length-1];return Object(i.a)(c)?(u=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof c&&(n=t.pop()),null===u&&1===t.length&&t[0]instanceof r.a?t[0]:Object(o.a)(n)(Object(s.a)(t,u))}},function(t,e,n){"use strict";n.d(e,"a",function(){return c});var r=n(0),i=n(7),o=n(26),s=n(4),u=n(3);function c(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!Object(i.a)(t[0]))return t[0];t=t[0]}return Object(o.a)(t,void 0).lift(new a)}var a=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new l(t))},t}(),l=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return r.a(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=t[n],i=Object(u.a)(this,r,r,n);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(t,e,n,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==n){var s=this.subscriptions[o];s.unsubscribe(),this.remove(s)}this.subscriptions=null}this.destination.next(e)},e}(s.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return u});var r=n(2),i=n(8),o=n(30),s=n(10);function u(t,e,n){void 0===t&&(t=0);var u=-1;return Object(o.a)(e)?u=Number(e)<1?1:Number(e):Object(s.a)(e)&&(n=e),Object(s.a)(n)||(n=i.a),new r.a(function(e){var r=Object(o.a)(t)?t:+t-n.now();return n.schedule(c,r,{index:0,period:u,subscriber:e})})}function c(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}},function(t,e,n){"use strict";var r=n(2),i=n(5),o=n(20);var s=n(49),u=n(19);var c=n(71),a=n(70);function l(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[o.a]}(t))return function(t,e){return new r.a(function(n){var r=new i.a;return r.add(e.schedule(function(){var i=t[o.a]();r.add(i.subscribe({next:function(t){r.add(e.schedule(function(){return n.next(t)}))},error:function(t){r.add(e.schedule(function(){return n.error(t)}))},complete:function(){r.add(e.schedule(function(){return n.complete()}))}}))})),r})}(t,e);if(Object(c.a)(t))return function(t,e){return new r.a(function(n){var r=new i.a;return r.add(e.schedule(function(){return t.then(function(t){r.add(e.schedule(function(){n.next(t),r.add(e.schedule(function(){return n.complete()}))}))},function(t){r.add(e.schedule(function(){return n.error(t)}))})})),r})}(t,e);if(Object(a.a)(t))return Object(s.a)(t,e);if(function(t){return t&&"function"==typeof t[u.a]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new r.a(function(n){var r,o=new i.a;return o.add(function(){r&&"function"==typeof r.return&&r.return()}),o.add(e.schedule(function(){r=t[u.a](),o.add(e.schedule(function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}}))})),o})}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}n.d(e,"a",function(){return l})},function(t,e,n){"use strict";var r=n(0),i=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.a(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(n(29).a),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.a(e,t),e}(n(27).a);n.d(e,"a",function(){return s});var s=new o(i)},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(0),i=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return r.a(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(n(5).a)},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}}},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},function(t,e,n){"use strict";function r(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";function r(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(85))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(88))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.debugKey=Symbol("debugKey")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){return e<n?t<e?e:t>n?n:t:t<n?n:t>e?e:t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(87))},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__decorate||function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(i=t[u])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};Object.defineProperty(e,"__esModule",{value:!0});var o=n(52),s=n(74),u=n(53),c=function(){function t(){var t=this;this.store=new s.Store("componentTemplate"),this.commands={template:function(e,n,i){var o=n[0];switch(o){case void 0:for(var s=0,c=i;s<c.length;s++){var a=c[s];if("--version"===a||"-v"===a)return u.success("1.0.1","",e.alertOptions)}u.error("Welcome to the component template program! \n                        To get started, try running this basic commands:\n                            "+["--version","ls"].map(function(t){return""+t}).join(" ")+"\n                    ","",r({},e.alertOptions,{timeOut:7500}));break;case"ls":u.success("Here is a list of all the current registered component templates (including ics):\n                        <ul>\n                            "+t.store.ls().map(function(t){return"\n                                <li>\n                                    "+t+"\n                                </li>\n                            "}).join(" ")+"\n                        </ul>\n                    ","",e.alertOptions);break;case"info":if(!n[1])return u.error("You need to specify a template name","",e.alertOptions);var l=t.store.get(n[1]);if(!l)return u.error("Component "+n[1]+" doesnt exist","",e.alertOptions);var f=i.find(function(t){return"-sf"===t||"--showFunctions"===t});u.success("\n                        Name: "+l.name+" <br>\n                        Inputs: "+l.inputs+" <br>\n                        Outputs: "+l.outputs+"\n                        "+(f?"<br> Activation: "+l.activation:"")+"\n                    ","",e.alertOptions);break;default:u.error(o+" is not a valid command for the template program","",e.alertOptions)}}},this.store.set("buffer",{inputs:1,outputs:1,name:"buffer",version:"1.0.0",activation:"\n                ctx.outputs[0].value = ctx.inputs[0].value\n            ".trim()}),this.store.set("not",{inputs:1,outputs:1,name:"buffer",version:"1.0.0",activation:"\n                ctx.outputs[0].value = !ctx.inputs[0].value\n            ".trim()}),this.store.set("and",{inputs:2,outputs:1,name:"and",version:"1.0.0",activation:"\n                ctx.outputs[0].value = ctx.inputs[0].value && ctx.inputs[1].value\n            ".trim()}),this.store.set("true",{inputs:0,outputs:1,name:"true",version:"1.0.0",activation:"\n                ctx.outputs[0].value = true\n            ".trim()})}return t=i([o.Singleton],t)}();e.ComponentTemplateStore=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.alertOptions={positionClass:"toast-bottom-right",toastClass:"toasts"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(93))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(74);e.runCounter={store:new r.Store("runCounter"),get:function(){return e.runCounter.store.get("main")},increase:function(){e.runCounter.store.set("main",e.runCounter.store.get("main")+1)}},e.runCounter.get()||e.runCounter.store.set("main",1)},function(t,e,n){t.exports=n(83)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(84),n(104)},function(t,e,n){"use strict";var r=this&&this.__makeTemplateObject||function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t};Object.defineProperty(e,"__esModule",{value:!0});var i=n(39),o=n(57),s=n(73),u=n(77),c=n(95),a=n(56),l=new s.Screen,f=new c.ComponentManager;f.components.push(new u.Component("and",[200,100],[100,100])),f.components.push(new u.Component("not",[200,500],[100,100])),f.components.push(new u.Component("true",[200,500],[100,100])),f.update();var h,p=function(t,e){"0"==f.barAlpha.value?e(t):"1"==f.barAlpha.value&&"mousedown"==t.type&&t.target!=document.getElementById("nameInput")&&f.barAlpha.next("0")};i.render(i.html(h||(h=r(["\n    <div @mousemove=","\n        @mousedown=","\n        @mouseup=","\n        @wheel=",">\n\n        <div id=",'\n        class=createBar>\n            <div class="topContainer">\n                <div>\n                    <input name="ComponentName" id="nameInput"\n                        placeholder=',"\n                    ></input>\n                </div>\n            </div>\n        </div>\n        <svg height="," \n            width=","\n            viewBox=",">\n            ","\n        </svg>\n    </div>\n"],["\n    <div @mousemove=","\n        @mousedown=","\n        @mouseup=","\n        @wheel=",">\n\n        <div id=",'\n        class=createBar>\n            <div class="topContainer">\n                <div>\n                    <input name="ComponentName" id="nameInput"\n                        placeholder=',"\n                    ></input>\n                </div>\n            </div>\n        </div>\n        <svg height="," \n            width=","\n            viewBox=",">\n            ","\n        </svg>\n    </div>\n"])),function(t){return p(t,function(t){f.handleMouseMove(t),l.updateMouse(t)})},function(t){return p(t,function(t){return f.handleMouseDown(t)})},function(t){return p(t,function(t){return f.handleMouseUp(t)})},function(t){return p(t,function(t){return l.handleScroll(t)})},o.subscribe(f.barAlpha.pipe(a.map(function(t){return"1"==t?"shown":""}))),o.subscribe(f.placeholder),o.subscribe(l.height),o.subscribe(l.width),o.subscribe(l.viewBox),o.subscribe(f.svgs)),document.body),f.update()},function(t,e,n){"use strict";var r=this&&this.__decorate||function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(i=t[u])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(38),s=n(52),u=n(56),c=i(n(76)),a=function(){function t(){var t=this;this.width=new o.BehaviorSubject(0),this.height=new o.BehaviorSubject(0),this.viewBox=o.combineLatest(this.width,this.height).pipe(u.map(function(e){return t.getViewBox.apply(t,e)})),this.position=[0,0],this.scale=[2,2],this.zoomLimits=[.1,10],this.scrollStep=1.3,this.mousePosition=[this.width.value/2,this.height.value/2],this.update(),o.fromEvent(window,"resize").subscribe(function(){return t.update()})}return t.prototype.updateMouse=function(t){this.mousePosition=[t.clientX,t.clientY]},t.prototype.handleScroll=function(t){var e=this;t.preventDefault();var n=[this.width.value,this.height.value],r=n.map(function(t,n){return e.mousePosition[n]/t}),i=t.deltaY/Math.abs(t.deltaY),o=Math.pow(this.scrollStep,i),s=this.scale.map(function(t){return c.default.apply(void 0,[t*o].concat(e.zoomLimits))}),u=this.scale.map(function(t,i){return n[i]*(s[i]-e.scale[i])*r[i]});this.scale=s,this.position=this.position.map(function(t,e){return t-u[e]}),this.update()},t.prototype.move=function(t,e){this.position[0]+=t*this.scale[0],this.position[1]+=e*this.scale[1],this.update()},t.prototype.getViewBox=function(t,e){return[this.position[0],this.position[1],this.scale[0]*t,this.scale[1]*e].join(" ")},t.prototype.update=function(){this.height.next(window.innerHeight),this.width.next(window.innerWidth)},t.prototype.getWorldPosition=function(t,e){return[t*this.scale[0],e*this.scale[1]]},t=r([s.Singleton],t)}();e.Screen=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(75);e.Singleton=function(t){let e;return class extends t{constructor(...t){if(e)return e;super(...t),this[r.debugKey]||(e=this)}}}},function(t,e,n){"use strict";var r=this&&this.__makeTemplateObject||function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t};Object.defineProperty(e,"__esModule",{value:!0});var i,o=n(38),s=n(56),u=n(73),c=n(78),a=n(39),l=n(57),f=n(91),h=n(53),p=n(79),d=n(80),v=n(81),b=function(){function t(e,n,r,i){var u=this;void 0===n&&(n=[0,0]),void 0===r&&(r=[0,0]),this.template=e,this.position=new o.BehaviorSubject(null),this.scale=new o.BehaviorSubject(null),this.clicked=!1,this.strokeColor="#888888",this.subscriptions=[],this.inputPins=[],this.outputPins=[],this.position.next(n),this.scale.next(r),this.id="number"==typeof i?i:t.lastId++;var c=t.store.store.get(e);if(!c)throw new Error("Template "+e+" doesnt exist");this.inputs=c.inputs,this.outputs=c.outputs,this.inputPins=Array(this.inputs).slice().fill(!0).map(function(t){return new f.Pin(!1,u)}),this.outputPins=Array(this.outputs).slice().fill(!0).map(function(t){return new f.Pin(!0,u)}),this.activation=new Function("return (ctx) => {\n            try{\n                "+c.activation+'\n            }\n            catch(err){\n                ctx.error(err,"",ctx.alertOptions)\n            }\n        }')(),this.inputPins.forEach(function(t){var e=t.valueChanges.pipe(s.debounce(function(){return o.timer(1e3/60)})).subscribe(function(t){return u.activate()});u.subscriptions.push(e)}),this.activate()}return t.prototype.dispose=function(){this.subscriptions.forEach(function(t){return t.unsubscribe()})},t.prototype.handleMouseUp=function(t){this.clicked=!1},t.prototype.activate=function(){this.activation({outputs:this.outputPins,inputs:this.inputPins,succes:function(t){h.success(t,"",p.alertOptions)},error:function(t){h.error(t,"",p.alertOptions)}})},t.prototype.move=function(e){var n=this,r=t.screen.getWorldPosition(e.clientX,e.clientY);this.position.next(r.map(function(t,e){return t-n.mouserDelta[e]}))},t.prototype.handleClick=function(e){var n=t.screen.getWorldPosition(e.clientX,e.clientY);this.mouserDelta=this.position.value.map(function(t,e){return n[e]-t}),this.clicked=!0},t.prototype.handlePinClick=function(e,n){t.wireManager.add(n)},Object.defineProperty(t.prototype,"state",{get:function(){return{position:this.position.value,scale:this.scale.value,template:this.template,id:this.id}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"x",{get:function(){return this.position.pipe(s.map(function(t){return t[0]}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.pipe(s.map(function(t){return t[1]}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.scale.pipe(s.map(function(t){return t[0]}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.scale.pipe(s.map(function(t){return t[1]}))},enumerable:!0,configurable:!0}),t.prototype.pinsSvg=function(t,e,n){var o=this;void 0===e&&(e=20),void 0===n&&(n="input");return("input"===n?this.inputPins:this.outputPins).map(function(u,c){var f=l.subscribe(o.piny("input"===n,c)),h=l.subscribe(o.pinx("input"===n,e)),p=l.subscribe(o.x.pipe(s.map(function(t){return t+("input"===n?-e:e+o.scale.value[0])}))),d=l.subscribe(o.x.pipe(s.map(function(t){return t+o.scale.value[0]/2})));return a.svg(i||(i=r(["\n                    <line stroke="," y1="," y2=","\n                    x1=","\n                    x2="," \n                    stroke-width=","></line>\n                    \n                    <circle fill="," \n                    stroke=","\n                    r=","\n                    cx=","\n                    cy="," stroke-width=","\n                    @click=","\n                    ></circle>\n                "],["\n                    <line stroke="," y1="," y2=","\n                    x1=","\n                    x2="," \n                    stroke-width=","></line>\n                    \n                    <circle fill="," \n                    stroke=","\n                    r=","\n                    cx=","\n                    cy="," stroke-width=","\n                    @click=","\n                    ></circle>\n                "])),o.strokeColor,f,f,"input"===n?p:d,"input"!==n?p:d,3,l.subscribe(u.svgColor),o.strokeColor,t,h,f,3,function(t){return o.handlePinClick(t,u)})})},t.prototype.pinx=function(t,e){var n=this;return void 0===t&&(t=!0),void 0===e&&(e=15),this.x.pipe(s.map(function(r){return r+(t?-e:n.scale.value[0]+e)}))},t.prototype.piny=function(t,e){void 0===t&&(t=!0);var n=this.scale.value[1]/(t?this.inputs:this.outputs);return this.y.pipe(s.map(function(t){return t+n*(2*e+1)/2}))},t.fromState=function(e){return new t(e.template,e.position,e.scale,e.id)},t.store=new c.ComponentTemplateStore,t.screen=new u.Screen,t.wireManager=new d.WireManager,t.lastId=v.runCounter.get()+1,t}();e.Component=b},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.name=t}return t.prototype.get=function(t){var e=localStorage[this.name+"/"+t];return e?JSON.parse(e).value:null},t.prototype.set=function(t,e){return localStorage[this.name+"/"+t]=JSON.stringify({value:e}),this},t.prototype.ls=function(){var t=[];for(var e in localStorage)0==e.indexOf(this.name)&&t.push(e.substr(this.name.length+1));return t},t}();e.Store=r},function(t,e,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,i){"use strict";var o=[],s=n.document,u=Object.getPrototypeOf,c=o.slice,a=o.concat,l=o.push,f=o.indexOf,h={},p=h.toString,d=h.hasOwnProperty,v=d.toString,b=v.call(Object),y={},m=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},g=function(t){return null!=t&&t===t.window},w={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,n){var r,i,o=(n=n||s).createElement("script");if(o.text=t,e)for(r in w)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function _(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[p.call(t)]||"object":typeof t}var S=function(t,e){return new S.fn.init(t,e)},j=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function O(t){var e=!!t&&"length"in t&&t.length,n=_(t);return!m(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}S.fn=S.prototype={jquery:"3.4.1",constructor:S,length:0,toArray:function(){return c.call(this)},get:function(t){return null==t?c.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=S.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return S.each(this,t)},map:function(t){return this.pushStack(S.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(c.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},S.extend=S.fn.extend=function(){var t,e,n,r,i,o,s=arguments[0]||{},u=1,c=arguments.length,a=!1;for("boolean"==typeof s&&(a=s,s=arguments[u]||{},u++),"object"==typeof s||m(s)||(s={}),u===c&&(s=this,u--);u<c;u++)if(null!=(t=arguments[u]))for(e in t)r=t[e],"__proto__"!==e&&s!==r&&(a&&r&&(S.isPlainObject(r)||(i=Array.isArray(r)))?(n=s[e],o=i&&!Array.isArray(n)?[]:i||S.isPlainObject(n)?n:{},i=!1,s[e]=S.extend(a,o,r)):void 0!==r&&(s[e]=r));return s},S.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==p.call(t))&&(!(e=u(t))||"function"==typeof(n=d.call(e,"constructor")&&e.constructor)&&v.call(n)===b)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){x(t,{nonce:e&&e.nonce})},each:function(t,e){var n,r=0;if(O(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(j,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(O(Object(t))?S.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:f.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,s=!n;i<o;i++)!e(t[i],i)!==s&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,s=[];if(O(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&s.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:y}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=o[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){h["[object "+e+"]"]=e.toLowerCase()});var T=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(t){var e,n,r,i,o,s,u,c,a,l,f,h,p,d,v,b,y,m,g,w="sizzle"+1*new Date,x=t.document,_=0,S=0,j=ct(),O=ct(),T=ct(),C=ct(),E=function(t,e){return t===e&&(f=!0),0},N={}.hasOwnProperty,k=[],A=k.pop,I=k.push,P=k.push,D=k.slice,M=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},V="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+L+"*("+H+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+L+"*\\]",q=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",B=new RegExp(L+"+","g"),W=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),F=new RegExp("^"+L+"*,"+L+"*"),z=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),$=new RegExp(L+"|>"),U=new RegExp(q),Y=new RegExp("^"+H+"$"),X={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+V+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),nt=function(t,e,n){var r="0x"+e-65536;return r!=r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},rt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,it=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){h()},st=wt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{P.apply(k=D.call(x.childNodes),x.childNodes),k[x.childNodes.length].nodeType}catch(t){P={apply:k.length?function(t,e){I.apply(t,D.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}function ut(t,e,r,i){var o,u,a,l,f,d,y,m=e&&e.ownerDocument,_=e?e.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==_&&9!==_&&11!==_)return r;if(!i&&((e?e.ownerDocument||e:x)!==p&&h(e),e=e||p,v)){if(11!==_&&(f=Z.exec(t)))if(o=f[1]){if(9===_){if(!(a=e.getElementById(o)))return r;if(a.id===o)return r.push(a),r}else if(m&&(a=m.getElementById(o))&&g(e,a)&&a.id===o)return r.push(a),r}else{if(f[2])return P.apply(r,e.getElementsByTagName(t)),r;if((o=f[3])&&n.getElementsByClassName&&e.getElementsByClassName)return P.apply(r,e.getElementsByClassName(o)),r}if(n.qsa&&!C[t+" "]&&(!b||!b.test(t))&&(1!==_||"object"!==e.nodeName.toLowerCase())){if(y=t,m=e,1===_&&$.test(t)){for((l=e.getAttribute("id"))?l=l.replace(rt,it):e.setAttribute("id",l=w),u=(d=s(t)).length;u--;)d[u]="#"+l+" "+gt(d[u]);y=d.join(","),m=tt.test(t)&&yt(e.parentNode)||e}try{return P.apply(r,m.querySelectorAll(y)),r}catch(e){C(t,!0)}finally{l===w&&e.removeAttribute("id")}}}return c(t.replace(W,"$1"),e,r,i)}function ct(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function at(t){return t[w]=!0,t}function lt(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ft(t,e){for(var n=t.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=e}function ht(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function vt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&st(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function bt(t){return at(function(e){return e=+e,at(function(n,r){for(var i,o=t([],n.length,e),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function yt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=ut.support={},o=ut.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!K.test(e||n&&n.nodeName||"HTML")},h=ut.setDocument=function(t){var e,i,s=t?t.ownerDocument||t:x;return s!==p&&9===s.nodeType&&s.documentElement?(d=(p=s).documentElement,v=!o(p),x!==p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ot,!1):i.attachEvent&&i.attachEvent("onunload",ot)),n.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=lt(function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=Q.test(p.getElementsByClassName),n.getById=lt(function(t){return d.appendChild(t).id=w,!p.getElementsByName||!p.getElementsByName(w).length}),n.getById?(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&v){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&v){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&v)return e.getElementsByClassName(t)},y=[],b=[],(n.qsa=Q.test(p.querySelectorAll))&&(lt(function(t){d.appendChild(t).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&b.push("[*^$]="+L+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||b.push("\\["+L+"*(?:value|"+V+")"),t.querySelectorAll("[id~="+w+"-]").length||b.push("~="),t.querySelectorAll(":checked").length||b.push(":checked"),t.querySelectorAll("a#"+w+"+*").length||b.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&b.push("name"+L+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&b.push(":enabled",":disabled"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&b.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),b.push(",.*:")})),(n.matchesSelector=Q.test(m=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&lt(function(t){n.disconnectedMatch=m.call(t,"*"),m.call(t,"[s!='']:x"),y.push("!=",q)}),b=b.length&&new RegExp(b.join("|")),y=y.length&&new RegExp(y.join("|")),e=Q.test(d.compareDocumentPosition),g=e||Q.test(d.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},E=e?function(t,e){if(t===e)return f=!0,0;var r=!t.compareDocumentPosition-!e.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===r?t===p||t.ownerDocument===x&&g(x,t)?-1:e===p||e.ownerDocument===x&&g(x,e)?1:l?M(l,t)-M(l,e):0:4&r?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,s=[t],u=[e];if(!i||!o)return t===p?-1:e===p?1:i?-1:o?1:l?M(l,t)-M(l,e):0;if(i===o)return ht(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;s[r]===u[r];)r++;return r?ht(s[r],u[r]):s[r]===x?-1:u[r]===x?1:0},p):p},ut.matches=function(t,e){return ut(t,null,null,e)},ut.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&h(t),n.matchesSelector&&v&&!C[e+" "]&&(!y||!y.test(e))&&(!b||!b.test(e)))try{var r=m.call(t,e);if(r||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){C(e,!0)}return ut(e,p,null,[t]).length>0},ut.contains=function(t,e){return(t.ownerDocument||t)!==p&&h(t),g(t,e)},ut.attr=function(t,e){(t.ownerDocument||t)!==p&&h(t);var i=r.attrHandle[e.toLowerCase()],o=i&&N.call(r.attrHandle,e.toLowerCase())?i(t,e,!v):void 0;return void 0!==o?o:n.attributes||!v?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},ut.escape=function(t){return(t+"").replace(rt,it)},ut.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ut.uniqueSort=function(t){var e,r=[],i=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&t.slice(0),t.sort(E),f){for(;e=t[o++];)e===t[o]&&(i=r.push(o));for(;i--;)t.splice(r[i],1)}return l=null,t},i=ut.getText=function(t){var e,n="",r=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=i(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[r++];)n+=i(e);return n},(r=ut.selectors={cacheLength:50,createPseudo:at,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ut.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ut.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&U.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=j[t+" "];return e||(e=new RegExp("(^|"+L+")"+t+"("+L+"|$)"))&&j(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(r){var i=ut.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(B," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),u="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,c){var a,l,f,h,p,d,v=o!==s?"nextSibling":"previousSibling",b=e.parentNode,y=u&&e.nodeName.toLowerCase(),m=!c&&!u,g=!1;if(b){if(o){for(;v;){for(h=e;h=h[v];)if(u?h.nodeName.toLowerCase()===y:1===h.nodeType)return!1;d=v="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?b.firstChild:b.lastChild],s&&m){for(g=(p=(a=(l=(f=(h=b)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===_&&a[1])&&a[2],h=p&&b.childNodes[p];h=++p&&h&&h[v]||(g=p=0)||d.pop();)if(1===h.nodeType&&++g&&h===e){l[t]=[_,p,g];break}}else if(m&&(g=p=(a=(l=(f=(h=e)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===_&&a[1]),!1===g)for(;(h=++p&&h&&h[v]||(g=p=0)||d.pop())&&((u?h.nodeName.toLowerCase()!==y:1!==h.nodeType)||!++g||(m&&((l=(f=h[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]=[_,g]),h!==e)););return(g-=i)===r||g%r==0&&g/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||ut.error("unsupported pseudo: "+t);return i[w]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,n){for(var r,o=i(t,e),s=o.length;s--;)t[r=M(t,o[s])]=!(n[r]=o[s])}):function(t){return i(t,0,n)}):i}},pseudos:{not:at(function(t){var e=[],n=[],r=u(t.replace(W,"$1"));return r[w]?at(function(t,e,n,i){for(var o,s=r(t,null,i,[]),u=t.length;u--;)(o=s[u])&&(t[u]=!(e[u]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:at(function(t){return function(e){return ut(t,e).length>0}}),contains:at(function(t){return t=t.replace(et,nt),function(e){return(e.textContent||i(e)).indexOf(t)>-1}}),lang:at(function(t){return Y.test(t||"")||ut.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=v?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===d},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:vt(!1),disabled:vt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return J.test(t.nodeName)},input:function(t){return G.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:bt(function(){return[0]}),last:bt(function(t,e){return[e-1]}),eq:bt(function(t,e,n){return[n<0?n+e:n]}),even:bt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:bt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:bt(function(t,e,n){for(var r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t}),gt:bt(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=dt(e);function mt(){}function gt(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function wt(t,e,n){var r=e.dir,i=e.next,o=i||r,s=n&&"parentNode"===o,u=S++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||s)return t(e,n,i);return!1}:function(e,n,c){var a,l,f,h=[_,u];if(c){for(;e=e[r];)if((1===e.nodeType||s)&&t(e,n,c))return!0}else for(;e=e[r];)if(1===e.nodeType||s)if(l=(f=e[w]||(e[w]={}))[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((a=l[o])&&a[0]===_&&a[1]===u)return h[2]=a[2];if(l[o]=h,h[2]=t(e,n,c))return!0}return!1}}function xt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function _t(t,e,n,r,i){for(var o,s=[],u=0,c=t.length,a=null!=e;u<c;u++)(o=t[u])&&(n&&!n(o,r,i)||(s.push(o),a&&e.push(u)));return s}function St(t,e,n,r,i,o){return r&&!r[w]&&(r=St(r)),i&&!i[w]&&(i=St(i,o)),at(function(o,s,u,c){var a,l,f,h=[],p=[],d=s.length,v=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)ut(t,e[r],n);return n}(e||"*",u.nodeType?[u]:u,[]),b=!t||!o&&e?v:_t(v,h,t,u,c),y=n?i||(o?t:d||r)?[]:s:b;if(n&&n(b,y,u,c),r)for(a=_t(y,p),r(a,[],u,c),l=a.length;l--;)(f=a[l])&&(y[p[l]]=!(b[p[l]]=f));if(o){if(i||t){if(i){for(a=[],l=y.length;l--;)(f=y[l])&&a.push(b[l]=f);i(null,y=[],a,c)}for(l=y.length;l--;)(f=y[l])&&(a=i?M(o,f):h[l])>-1&&(o[a]=!(s[a]=f))}}else y=_t(y===s?y.splice(d,y.length):y),i?i(null,s,y,c):P.apply(s,y)})}function jt(t){for(var e,n,i,o=t.length,s=r.relative[t[0].type],u=s||r.relative[" "],c=s?1:0,l=wt(function(t){return t===e},u,!0),f=wt(function(t){return M(e,t)>-1},u,!0),h=[function(t,n,r){var i=!s&&(r||n!==a)||((e=n).nodeType?l(t,n,r):f(t,n,r));return e=null,i}];c<o;c++)if(n=r.relative[t[c].type])h=[wt(xt(h),n)];else{if((n=r.filter[t[c].type].apply(null,t[c].matches))[w]){for(i=++c;i<o&&!r.relative[t[i].type];i++);return St(c>1&&xt(h),c>1&&gt(t.slice(0,c-1).concat({value:" "===t[c-2].type?"*":""})).replace(W,"$1"),n,c<i&&jt(t.slice(c,i)),i<o&&jt(t=t.slice(i)),i<o&&gt(t))}h.push(n)}return xt(h)}return mt.prototype=r.filters=r.pseudos,r.setFilters=new mt,s=ut.tokenize=function(t,e){var n,i,o,s,u,c,a,l=O[t+" "];if(l)return e?0:l.slice(0);for(u=t,c=[],a=r.preFilter;u;){for(s in n&&!(i=F.exec(u))||(i&&(u=u.slice(i[0].length)||u),c.push(o=[])),n=!1,(i=z.exec(u))&&(n=i.shift(),o.push({value:n,type:i[0].replace(W," ")}),u=u.slice(n.length)),r.filter)!(i=X[s].exec(u))||a[s]&&!(i=a[s](i))||(n=i.shift(),o.push({value:n,type:s,matches:i}),u=u.slice(n.length));if(!n)break}return e?u.length:u?ut.error(t):O(t,c).slice(0)},u=ut.compile=function(t,e){var n,i=[],o=[],u=T[t+" "];if(!u){for(e||(e=s(t)),n=e.length;n--;)(u=jt(e[n]))[w]?i.push(u):o.push(u);(u=T(t,function(t,e){var n=e.length>0,i=t.length>0,o=function(o,s,u,c,l){var f,d,b,y=0,m="0",g=o&&[],w=[],x=a,S=o||i&&r.find.TAG("*",l),j=_+=null==x?1:Math.random()||.1,O=S.length;for(l&&(a=s===p||s||l);m!==O&&null!=(f=S[m]);m++){if(i&&f){for(d=0,s||f.ownerDocument===p||(h(f),u=!v);b=t[d++];)if(b(f,s||p,u)){c.push(f);break}l&&(_=j)}n&&((f=!b&&f)&&y--,o&&g.push(f))}if(y+=m,n&&m!==y){for(d=0;b=e[d++];)b(g,w,s,u);if(o){if(y>0)for(;m--;)g[m]||w[m]||(w[m]=A.call(c));w=_t(w)}P.apply(c,w),l&&!o&&w.length>0&&y+e.length>1&&ut.uniqueSort(c)}return l&&(_=j,a=x),g};return n?at(o):o}(o,i))).selector=t}return u},c=ut.select=function(t,e,n,i){var o,c,a,l,f,h="function"==typeof t&&t,p=!i&&s(t=h.selector||t);if(n=n||[],1===p.length){if((c=p[0]=p[0].slice(0)).length>2&&"ID"===(a=c[0]).type&&9===e.nodeType&&v&&r.relative[c[1].type]){if(!(e=(r.find.ID(a.matches[0].replace(et,nt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(c.shift().value.length)}for(o=X.needsContext.test(t)?0:c.length;o--&&(a=c[o],!r.relative[l=a.type]);)if((f=r.find[l])&&(i=f(a.matches[0].replace(et,nt),tt.test(c[0].type)&&yt(e.parentNode)||e))){if(c.splice(o,1),!(t=i.length&&gt(c)))return P.apply(n,i),n;break}}return(h||u(t,p))(i,e,!v,n,!e||tt.test(t)&&yt(e.parentNode)||e),n},n.sortStable=w.split("").sort(E).join("")===w,n.detectDuplicates=!!f,h(),n.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ft("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ft("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||ft(V,function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),ut}(n);S.find=T,S.expr=T.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=T.uniqueSort,S.text=T.getText,S.isXMLDoc=T.isXML,S.contains=T.contains,S.escapeSelector=T.escape;var C=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&S(t).is(n))break;r.push(t)}return r},E=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},N=S.expr.match.needsContext;function k(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(t,e,n){return m(e)?S.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?S.grep(t,function(t){return t===e!==n}):"string"!=typeof e?S.grep(t,function(t){return f.call(e,t)>-1!==n}):S.filter(e,t,n)}S.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?S.find.matchesSelector(r,t)?[r]:[]:S.find.matches(t,S.grep(e,function(t){return 1===t.nodeType}))},S.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(S(t).filter(function(){for(e=0;e<r;e++)if(S.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)S.find(t,i[e],n);return r>1?S.uniqueSort(n):n},filter:function(t){return this.pushStack(I(this,t||[],!1))},not:function(t){return this.pushStack(I(this,t||[],!0))},is:function(t){return!!I(this,"string"==typeof t&&N.test(t)?S(t):t||[],!1).length}});var P,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||P,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:D.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof S?e[0]:e,S.merge(this,S.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:s,!0)),A.test(r[1])&&S.isPlainObject(e))for(r in e)m(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=s.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):m(t)?void 0!==n.ready?n.ready(t):t(S):S.makeArray(t,this)}).prototype=S.fn,P=S(s);var M=/^(?:parents|prev(?:Until|All))/,V={children:!0,contents:!0,next:!0,prev:!0};function L(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}S.fn.extend({has:function(t){var e=S(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(S.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],s="string"!=typeof t&&S(t);if(!N.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&S.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?S.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?f.call(S(t),this[0]):f.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),S.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return C(t,"parentNode")},parentsUntil:function(t,e,n){return C(t,"parentNode",n)},next:function(t){return L(t,"nextSibling")},prev:function(t){return L(t,"previousSibling")},nextAll:function(t){return C(t,"nextSibling")},prevAll:function(t){return C(t,"previousSibling")},nextUntil:function(t,e,n){return C(t,"nextSibling",n)},prevUntil:function(t,e,n){return C(t,"previousSibling",n)},siblings:function(t){return E((t.parentNode||{}).firstChild,t)},children:function(t){return E(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(k(t,"template")&&(t=t.content||t),S.merge([],t.childNodes))}},function(t,e){S.fn[t]=function(n,r){var i=S.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=S.filter(r,i)),this.length>1&&(V[t]||S.uniqueSort(i),M.test(t)&&i.reverse()),this.pushStack(i)}});var H=/[^\x20\t\r\n\f]+/g;function R(t){return t}function q(t){throw t}function B(t,e,n,r){var i;try{t&&m(i=t.promise)?i.call(t).done(e).fail(n):t&&m(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}S.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return S.each(t.match(H)||[],function(t,n){e[n]=!0}),e}(t):S.extend({},t);var e,n,r,i,o=[],s=[],u=-1,c=function(){for(i=i||t.once,r=e=!0;s.length;u=-1)for(n=s.shift();++u<o.length;)!1===o[u].apply(n[0],n[1])&&t.stopOnFalse&&(u=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},a={add:function(){return o&&(n&&!e&&(u=o.length-1,s.push(n)),function e(n){S.each(n,function(n,r){m(r)?t.unique&&a.has(r)||o.push(r):r&&r.length&&"string"!==_(r)&&e(r)})}(arguments),n&&!e&&c()),this},remove:function(){return S.each(arguments,function(t,e){for(var n;(n=S.inArray(e,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(t){return t?S.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||c()),this},fire:function(){return a.fireWith(this,arguments),this},fired:function(){return!!r}};return a},S.extend({Deferred:function(t){var e=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return S.Deferred(function(n){S.each(e,function(e,r){var i=m(t[r[4]])&&t[r[4]];o[r[1]](function(){var t=i&&i.apply(this,arguments);t&&m(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(t,r,i){var o=0;function s(t,e,r,i){return function(){var u=this,c=arguments,a=function(){var n,a;if(!(t<o)){if((n=r.apply(u,c))===e.promise())throw new TypeError("Thenable self-resolution");a=n&&("object"==typeof n||"function"==typeof n)&&n.then,m(a)?i?a.call(n,s(o,e,R,i),s(o,e,q,i)):(o++,a.call(n,s(o,e,R,i),s(o,e,q,i),s(o,e,R,e.notifyWith))):(r!==R&&(u=void 0,c=[n]),(i||e.resolveWith)(u,c))}},l=i?a:function(){try{a()}catch(n){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(n,l.stackTrace),t+1>=o&&(r!==q&&(u=void 0,c=[n]),e.rejectWith(u,c))}};t?l():(S.Deferred.getStackHook&&(l.stackTrace=S.Deferred.getStackHook()),n.setTimeout(l))}}return S.Deferred(function(n){e[0][3].add(s(0,n,m(i)?i:R,n.notifyWith)),e[1][3].add(s(0,n,m(t)?t:R)),e[2][3].add(s(0,n,m(r)?r:q))}).promise()},promise:function(t){return null!=t?S.extend(t,i):i}},o={};return S.each(e,function(t,n){var s=n[2],u=n[5];i[n[1]]=s.add,u&&s.add(function(){r=u},e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=c.call(arguments),o=S.Deferred(),s=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?c.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(B(t,o.done(s(n)).resolve,o.reject,!e),"pending"===o.state()||m(i[n]&&i[n].then)))return o.then();for(;n--;)B(i[n],s(n),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&W.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},S.readyException=function(t){n.setTimeout(function(){throw t})};var F=S.Deferred();function z(){s.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),S.ready()}S.fn.ready=function(t){return F.then(t).catch(function(t){S.readyException(t)}),this},S.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==t&&--S.readyWait>0||F.resolveWith(s,[S]))}}),S.ready.then=F.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(S.ready):(s.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var $=function(t,e,n,r,i,o,s){var u=0,c=t.length,a=null==n;if("object"===_(n))for(u in i=!0,n)$(t,e,u,n[u],!0,o,s);else if(void 0!==r&&(i=!0,m(r)||(s=!0),a&&(s?(e.call(t,r),e=null):(a=e,e=function(t,e,n){return a.call(S(t),n)})),e))for(;u<c;u++)e(t[u],n,s?r:r.call(t[u],u,e(t[u],n)));return i?t:a?e.call(t):c?e(t[0],n):o},U=/^-ms-/,Y=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function K(t){return t.replace(U,"ms-").replace(Y,X)}var G=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function J(){this.expando=S.expando+J.uid++}J.uid=1,J.prototype={cache:function(t){var e=t[this.expando];return e||(e={},G(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[K(e)]=n;else for(r in e)i[K(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][K(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(K):(e=K(e))in r?[e]:e.match(H)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||S.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!S.isEmptyObject(e)}};var Q=new J,Z=new J,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}S.extend({hasData:function(t){return Z.hasData(t)||Q.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return Q.access(t,e,n)},_removeData:function(t,e){Q.remove(t,e)}}),S.fn.extend({data:function(t,e){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(i=Z.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=K(r.slice(5)),nt(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){Z.set(this,t)}):$(this,function(e){var n;if(o&&void 0===e)return void 0!==(n=Z.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each(function(){Z.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Z.remove(this,t)})}}),S.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=Q.get(t,e),n&&(!r||Array.isArray(n)?r=Q.access(t,e,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=S.queue(t,e),r=n.length,i=n.shift(),o=S._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,function(){S.dequeue(t,e)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Q.get(t,n)||Q.access(t,n,{empty:S.Callbacks("once memory").add(function(){Q.remove(t,[e+"queue",n])})})}}),S.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?S.queue(this[0],t):void 0===e?this:this.each(function(){var n=S.queue(this,t,e);S._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&S.dequeue(this,t)})},dequeue:function(t){return this.each(function(){S.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=S.Deferred(),o=this,s=this.length,u=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=Q.get(o[s],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(u));return u(),i.promise(e)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],st=s.documentElement,ut=function(t){return S.contains(t.ownerDocument,t)},ct={composed:!0};st.getRootNode&&(ut=function(t){return S.contains(t.ownerDocument,t)||t.getRootNode(ct)===t.ownerDocument});var at=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&ut(t)&&"none"===S.css(t,"display")},lt=function(t,e,n,r){var i,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];for(o in i=n.apply(t,r||[]),e)t.style[o]=s[o];return i};function ft(t,e,n,r){var i,o,s=20,u=r?function(){return r.cur()}:function(){return S.css(t,e,"")},c=u(),a=n&&n[3]||(S.cssNumber[e]?"":"px"),l=t.nodeType&&(S.cssNumber[e]||"px"!==a&&+c)&&it.exec(S.css(t,e));if(l&&l[3]!==a){for(c/=2,a=a||l[3],l=+c||1;s--;)S.style(t,e,l+a),(1-o)*(1-(o=u()/c||.5))<=0&&(s=0),l/=o;l*=2,S.style(t,e,l+a),n=n||[]}return n&&(l=+l||+c||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=a,r.start=l,r.end=i)),i}var ht={};function pt(t){var e,n=t.ownerDocument,r=t.nodeName,i=ht[r];return i||(e=n.body.appendChild(n.createElement(r)),i=S.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),ht[r]=i,i)}function dt(t,e){for(var n,r,i=[],o=0,s=t.length;o<s;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=Q.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&at(r)&&(i[o]=pt(r))):"none"!==n&&(i[o]="none",Q.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}S.fn.extend({show:function(){return dt(this,!0)},hide:function(){return dt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){at(this)?S(this).show():S(this).hide()})}});var vt=/^(?:checkbox|radio)$/i,bt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,yt=/^$|^module$|\/(?:java|ecma)script/i,mt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function gt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&k(t,e)?S.merge([t],n):n}function wt(t,e){for(var n=0,r=t.length;n<r;n++)Q.set(t[n],"globalEval",!e||Q.get(e[n],"globalEval"))}mt.optgroup=mt.option,mt.tbody=mt.tfoot=mt.colgroup=mt.caption=mt.thead,mt.th=mt.td;var xt,_t,St=/<|&#?\w+;/;function jt(t,e,n,r,i){for(var o,s,u,c,a,l,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===_(o))S.merge(h,o.nodeType?[o]:o);else if(St.test(o)){for(s=s||f.appendChild(e.createElement("div")),u=(bt.exec(o)||["",""])[1].toLowerCase(),c=mt[u]||mt._default,s.innerHTML=c[1]+S.htmlPrefilter(o)+c[2],l=c[0];l--;)s=s.lastChild;S.merge(h,s.childNodes),(s=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&S.inArray(o,r)>-1)i&&i.push(o);else if(a=ut(o),s=gt(f.appendChild(o),"script"),a&&wt(s),n)for(l=0;o=s[l++];)yt.test(o.type||"")&&n.push(o);return f}xt=s.createDocumentFragment().appendChild(s.createElement("div")),(_t=s.createElement("input")).setAttribute("type","radio"),_t.setAttribute("checked","checked"),_t.setAttribute("name","t"),xt.appendChild(_t),y.checkClone=xt.cloneNode(!0).cloneNode(!0).lastChild.checked,xt.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!xt.cloneNode(!0).lastChild.defaultValue;var Ot=/^key/,Tt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ct=/^([^.]*)(?:\.(.+)|)/;function Et(){return!0}function Nt(){return!1}function kt(t,e){return t===function(){try{return s.activeElement}catch(t){}}()==("focus"===e)}function At(t,e,n,r,i,o){var s,u;if("object"==typeof e){for(u in"string"!=typeof n&&(r=r||n,n=void 0),e)At(t,u,n,r,e[u],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Nt;else if(!i)return t;return 1===o&&(s=i,(i=function(t){return S().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=S.guid++)),t.each(function(){S.event.add(this,e,i,r,n)})}function It(t,e,n){n?(Q.set(t,e,!1),S.event.add(t,e,{namespace:!1,handler:function(t){var r,i,o=Q.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(S.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=c.call(arguments),Q.set(this,e,o),r=n(this,e),this[e](),o!==(i=Q.get(this,e))||r?Q.set(this,e,!1):i={},o!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else o.length&&(Q.set(this,e,{value:S.event.trigger(S.extend(o[0],S.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Q.get(t,e)&&S.event.add(t,e,Et)}S.event={global:{},add:function(t,e,n,r,i){var o,s,u,c,a,l,f,h,p,d,v,b=Q.get(t);if(b)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&S.find.matchesSelector(st,i),n.guid||(n.guid=S.guid++),(c=b.events)||(c=b.events={}),(s=b.handle)||(s=b.handle=function(e){return void 0!==S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),a=(e=(e||"").match(H)||[""]).length;a--;)p=v=(u=Ct.exec(e[a])||[])[1],d=(u[2]||"").split(".").sort(),p&&(f=S.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=S.event.special[p]||{},l=S.extend({type:p,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&S.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=c[p])||((h=c[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,d,s)||t.addEventListener&&t.addEventListener(p,s)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,l):h.push(l),S.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,s,u,c,a,l,f,h,p,d,v,b=Q.hasData(t)&&Q.get(t);if(b&&(c=b.events)){for(a=(e=(e||"").match(H)||[""]).length;a--;)if(p=v=(u=Ct.exec(e[a])||[])[1],d=(u[2]||"").split(".").sort(),p){for(f=S.event.special[p]||{},h=c[p=(r?f.delegateType:f.bindType)||p]||[],u=u[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=h.length;o--;)l=h[o],!i&&v!==l.origType||n&&n.guid!==l.guid||u&&!u.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(t,l));s&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,d,b.handle)||S.removeEvent(t,p,b.handle),delete c[p])}else for(p in c)S.event.remove(t,p+e[a],n,r,!0);S.isEmptyObject(c)&&Q.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,s,u=S.event.fix(t),c=new Array(arguments.length),a=(Q.get(this,"events")||{})[u.type]||[],l=S.event.special[u.type]||{};for(c[0]=u,e=1;e<arguments.length;e++)c[e]=arguments[e];if(u.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,u)){for(s=S.event.handlers.call(this,u,a),e=0;(i=s[e++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((S.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,c))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(t,e){var n,r,i,o,s,u=[],c=e.delegateCount,a=t.target;if(c&&a.nodeType&&!("click"===t.type&&t.button>=1))for(;a!==this;a=a.parentNode||this)if(1===a.nodeType&&("click"!==t.type||!0!==a.disabled)){for(o=[],s={},n=0;n<c;n++)void 0===s[i=(r=e[n]).selector+" "]&&(s[i]=r.needsContext?S(i,this).index(a)>-1:S.find(i,this,null,[a]).length),s[i]&&o.push(r);o.length&&u.push({elem:a,handlers:o})}return a=this,c<e.length&&u.push({elem:a,handlers:e.slice(c)}),u},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[S.expando]?t:new S.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return vt.test(e.type)&&e.click&&k(e,"input")&&It(e,"click",Et),!1},trigger:function(t){var e=this||t;return vt.test(e.type)&&e.click&&k(e,"input")&&It(e,"click"),!0},_default:function(t){var e=t.target;return vt.test(e.type)&&e.click&&k(e,"input")&&Q.get(e,"click")||k(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},S.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},S.Event=function(t,e){if(!(this instanceof S.Event))return new S.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Et:Nt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&S.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:Nt,isPropagationStopped:Nt,isImmediatePropagationStopped:Nt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Et,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Et,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Et,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ot.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Tt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},function(t,e){S.event.special[t]={setup:function(){return It(this,t,kt),!1},trigger:function(){return It(this,t),!0},delegateType:e}}),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){S.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||S.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}}),S.fn.extend({on:function(t,e,n,r){return At(this,t,e,n,r)},one:function(t,e,n,r){return At(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,S(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Nt),this.each(function(){S.event.remove(this,t,n,e)})}});var Pt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Dt=/<script|<style|<link/i,Mt=/checked\s*(?:[^=]|=\s*.checked.)/i,Vt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Lt(t,e){return k(t,"table")&&k(11!==e.nodeType?e:e.firstChild,"tr")&&S(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Rt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function qt(t,e){var n,r,i,o,s,u,c,a;if(1===e.nodeType){if(Q.hasData(t)&&(o=Q.access(t),s=Q.set(e,o),a=o.events))for(i in delete s.handle,s.events={},a)for(n=0,r=a[i].length;n<r;n++)S.event.add(e,i,a[i][n]);Z.hasData(t)&&(u=Z.access(t),c=S.extend({},u),Z.set(e,c))}}function Bt(t,e,n,r){e=a.apply([],e);var i,o,s,u,c,l,f=0,h=t.length,p=h-1,d=e[0],v=m(d);if(v||h>1&&"string"==typeof d&&!y.checkClone&&Mt.test(d))return t.each(function(i){var o=t.eq(i);v&&(e[0]=d.call(this,i,o.html())),Bt(o,e,n,r)});if(h&&(o=(i=jt(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=(s=S.map(gt(i,"script"),Ht)).length;f<h;f++)c=i,f!==p&&(c=S.clone(c,!0,!0),u&&S.merge(s,gt(c,"script"))),n.call(t[f],c,f);if(u)for(l=s[s.length-1].ownerDocument,S.map(s,Rt),f=0;f<u;f++)c=s[f],yt.test(c.type||"")&&!Q.access(c,"globalEval")&&S.contains(l,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?S._evalUrl&&!c.noModule&&S._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")}):x(c.textContent.replace(Vt,""),c,l))}return t}function Wt(t,e,n){for(var r,i=e?S.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||S.cleanData(gt(r)),r.parentNode&&(n&&ut(r)&&wt(gt(r,"script")),r.parentNode.removeChild(r));return t}S.extend({htmlPrefilter:function(t){return t.replace(Pt,"<$1></$2>")},clone:function(t,e,n){var r,i,o,s,u,c,a,l=t.cloneNode(!0),f=ut(t);if(!(y.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||S.isXMLDoc(t)))for(s=gt(l),r=0,i=(o=gt(t)).length;r<i;r++)u=o[r],c=s[r],a=void 0,"input"===(a=c.nodeName.toLowerCase())&&vt.test(u.type)?c.checked=u.checked:"input"!==a&&"textarea"!==a||(c.defaultValue=u.defaultValue);if(e)if(n)for(o=o||gt(t),s=s||gt(l),r=0,i=o.length;r<i;r++)qt(o[r],s[r]);else qt(t,l);return(s=gt(l,"script")).length>0&&wt(s,!f&&gt(t,"script")),l},cleanData:function(t){for(var e,n,r,i=S.event.special,o=0;void 0!==(n=t[o]);o++)if(G(n)){if(e=n[Q.expando]){if(e.events)for(r in e.events)i[r]?S.event.remove(n,r):S.removeEvent(n,r,e.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),S.fn.extend({detach:function(t){return Wt(this,t,!0)},remove:function(t){return Wt(this,t)},text:function(t){return $(this,function(t){return void 0===t?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Bt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Lt(this,t).appendChild(t)})},prepend:function(){return Bt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Lt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Bt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Bt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(S.cleanData(gt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return S.clone(this,t,e)})},html:function(t){return $(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Dt.test(t)&&!mt[(bt.exec(t)||["",""])[1].toLowerCase()]){t=S.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(S.cleanData(gt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return Bt(this,arguments,function(e){var n=this.parentNode;S.inArray(this,t)<0&&(S.cleanData(gt(this)),n&&n.replaceChild(e,this))},t)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){S.fn[t]=function(t){for(var n,r=[],i=S(t),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),S(i[s])[e](n),l.apply(r,n.get());return this.pushStack(r)}});var Ft=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),zt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},$t=new RegExp(ot.join("|"),"i");function Ut(t,e,n){var r,i,o,s,u=t.style;return(n=n||zt(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||ut(t)||(s=S.style(t,e)),!y.pixelBoxStyles()&&Ft.test(s)&&$t.test(e)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=s,s=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==s?s+"":s}function Yt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",st.appendChild(a).appendChild(l);var t=n.getComputedStyle(l);r="1%"!==t.top,c=12===e(t.marginLeft),l.style.right="60%",u=36===e(t.right),i=36===e(t.width),l.style.position="absolute",o=12===e(l.offsetWidth/3),st.removeChild(a),l=null}}function e(t){return Math.round(parseFloat(t))}var r,i,o,u,c,a=s.createElement("div"),l=s.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===l.style.backgroundClip,S.extend(y,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),u},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),c},scrollboxSize:function(){return t(),o}}))}();var Xt=["Webkit","Moz","ms"],Kt=s.createElement("div").style,Gt={};function Jt(t){var e=S.cssProps[t]||Gt[t];return e||(t in Kt?t:Gt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Xt.length;n--;)if((t=Xt[n]+e)in Kt)return t}(t)||t)}var Qt=/^(none|table(?!-c[ea]).+)/,Zt=/^--/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"};function ne(t,e,n){var r=it.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function re(t,e,n,r,i,o){var s="width"===e?1:0,u=0,c=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(c+=S.css(t,n+ot[s],!0,i)),r?("content"===n&&(c-=S.css(t,"padding"+ot[s],!0,i)),"margin"!==n&&(c-=S.css(t,"border"+ot[s]+"Width",!0,i))):(c+=S.css(t,"padding"+ot[s],!0,i),"padding"!==n?c+=S.css(t,"border"+ot[s]+"Width",!0,i):u+=S.css(t,"border"+ot[s]+"Width",!0,i));return!r&&o>=0&&(c+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-c-u-.5))||0),c}function ie(t,e,n){var r=zt(t),i=(!y.boxSizingReliable()||n)&&"border-box"===S.css(t,"boxSizing",!1,r),o=i,s=Ut(t,e,r),u="offset"+e[0].toUpperCase()+e.slice(1);if(Ft.test(s)){if(!n)return s;s="auto"}return(!y.boxSizingReliable()&&i||"auto"===s||!parseFloat(s)&&"inline"===S.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===S.css(t,"boxSizing",!1,r),(o=u in t)&&(s=t[u])),(s=parseFloat(s)||0)+re(t,e,n||(i?"border":"content"),o,r,s)+"px"}function oe(t,e,n,r,i){return new oe.prototype.init(t,e,n,r,i)}S.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Ut(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,s,u=K(e),c=Zt.test(e),a=t.style;if(c||(e=Jt(u)),s=S.cssHooks[e]||S.cssHooks[u],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(t,!1,r))?i:a[e];"string"===(o=typeof n)&&(i=it.exec(n))&&i[1]&&(n=ft(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||c||(n+=i&&i[3]||(S.cssNumber[u]?"":"px")),y.clearCloneStyle||""!==n||0!==e.indexOf("background")||(a[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,r))||(c?a.setProperty(e,n):a[e]=n))}},css:function(t,e,n,r){var i,o,s,u=K(e);return Zt.test(e)||(e=Jt(u)),(s=S.cssHooks[e]||S.cssHooks[u])&&"get"in s&&(i=s.get(t,!0,n)),void 0===i&&(i=Ut(t,e,r)),"normal"===i&&e in ee&&(i=ee[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),S.each(["height","width"],function(t,e){S.cssHooks[e]={get:function(t,n,r){if(n)return!Qt.test(S.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ie(t,e,r):lt(t,te,function(){return ie(t,e,r)})},set:function(t,n,r){var i,o=zt(t),s=!y.scrollboxSize()&&"absolute"===o.position,u=(s||r)&&"border-box"===S.css(t,"boxSizing",!1,o),c=r?re(t,e,r,u,o):0;return u&&s&&(c-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-re(t,e,"border",!1,o)-.5)),c&&(i=it.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=S.css(t,e)),ne(0,n,c)}}}),S.cssHooks.marginLeft=Yt(y.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Ut(t,"marginLeft"))||t.getBoundingClientRect().left-lt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(t,e){S.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ot[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(S.cssHooks[t+e].set=ne)}),S.fn.extend({css:function(t,e){return $(this,function(t,e,n){var r,i,o={},s=0;if(Array.isArray(e)){for(r=zt(t),i=e.length;s<i;s++)o[e[s]]=S.css(t,e[s],!1,r);return o}return void 0!==n?S.style(t,e,n):S.css(t,e)},t,e,arguments.length>1)}}),S.Tween=oe,oe.prototype={constructor:oe,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||S.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(S.cssNumber[n]?"":"px")},cur:function(){var t=oe.propHooks[this.prop];return t&&t.get?t.get(this):oe.propHooks._default.get(this)},run:function(t){var e,n=oe.propHooks[this.prop];return this.options.duration?this.pos=e=S.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):oe.propHooks._default.set(this),this}},oe.prototype.init.prototype=oe.prototype,oe.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=S.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){S.fx.step[t.prop]?S.fx.step[t.prop](t):1!==t.elem.nodeType||!S.cssHooks[t.prop]&&null==t.elem.style[Jt(t.prop)]?t.elem[t.prop]=t.now:S.style(t.elem,t.prop,t.now+t.unit)}}},oe.propHooks.scrollTop=oe.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},S.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},S.fx=oe.prototype.init,S.fx.step={};var se,ue,ce=/^(?:toggle|show|hide)$/,ae=/queueHooks$/;function le(){ue&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(le):n.setTimeout(le,S.fx.interval),S.fx.tick())}function fe(){return n.setTimeout(function(){se=void 0}),se=Date.now()}function he(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ot[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function pe(t,e,n){for(var r,i=(de.tweeners[e]||[]).concat(de.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,e,t))return r}function de(t,e,n){var r,i,o=0,s=de.prefilters.length,u=S.Deferred().always(function(){delete c.elem}),c=function(){if(i)return!1;for(var e=se||fe(),n=Math.max(0,a.startTime+a.duration-e),r=1-(n/a.duration||0),o=0,s=a.tweens.length;o<s;o++)a.tweens[o].run(r);return u.notifyWith(t,[a,r,n]),r<1&&s?n:(s||u.notifyWith(t,[a,1,0]),u.resolveWith(t,[a]),!1)},a=u.promise({elem:t,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||fe(),duration:n.duration,tweens:[],createTween:function(e,n){var r=S.Tween(t,a.opts,e,n,a.opts.specialEasing[e]||a.opts.easing);return a.tweens.push(r),r},stop:function(e){var n=0,r=e?a.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)a.tweens[n].run(1);return e?(u.notifyWith(t,[a,1,0]),u.resolveWith(t,[a,e])):u.rejectWith(t,[a,e]),this}}),l=a.props;for(!function(t,e){var n,r,i,o,s;for(n in t)if(i=e[r=K(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(s=S.cssHooks[r])&&"expand"in s)for(n in o=s.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(l,a.opts.specialEasing);o<s;o++)if(r=de.prefilters[o].call(a,t,l,a.opts))return m(r.stop)&&(S._queueHooks(a.elem,a.opts.queue).stop=r.stop.bind(r)),r;return S.map(l,pe,a),m(a.opts.start)&&a.opts.start.call(t,a),a.progress(a.opts.progress).done(a.opts.done,a.opts.complete).fail(a.opts.fail).always(a.opts.always),S.fx.timer(S.extend(c,{elem:t,anim:a,queue:a.opts.queue})),a}S.Animation=S.extend(de,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ft(n.elem,t,it.exec(e),n),n}]},tweener:function(t,e){m(t)?(e=t,t=["*"]):t=t.match(H);for(var n,r=0,i=t.length;r<i;r++)n=t[r],de.tweeners[n]=de.tweeners[n]||[],de.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,s,u,c,a,l,f="width"in e||"height"in e,h=this,p={},d=t.style,v=t.nodeType&&at(t),b=Q.get(t,"fxshow");for(r in n.queue||(null==(s=S._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,S.queue(t,"fx").length||s.empty.fire()})})),e)if(i=e[r],ce.test(i)){if(delete e[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!b||void 0===b[r])continue;v=!0}p[r]=b&&b[r]||S.style(t,r)}if((c=!S.isEmptyObject(e))||!S.isEmptyObject(p))for(r in f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(a=b&&b.display)&&(a=Q.get(t,"display")),"none"===(l=S.css(t,"display"))&&(a?l=a:(dt([t],!0),a=t.style.display||a,l=S.css(t,"display"),dt([t]))),("inline"===l||"inline-block"===l&&null!=a)&&"none"===S.css(t,"float")&&(c||(h.done(function(){d.display=a}),null==a&&(l=d.display,a="none"===l?"":l)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),c=!1,p)c||(b?"hidden"in b&&(v=b.hidden):b=Q.access(t,"fxshow",{display:a}),o&&(b.hidden=!v),v&&dt([t],!0),h.done(function(){for(r in v||dt([t]),Q.remove(t,"fxshow"),p)S.style(t,r,p[r])})),c=pe(v?b[r]:0,r,h),r in b||(b[r]=c.start,v&&(c.end=c.start,c.start=0))}],prefilter:function(t,e){e?de.prefilters.unshift(t):de.prefilters.push(t)}}),S.speed=function(t,e,n){var r=t&&"object"==typeof t?S.extend({},t):{complete:n||!n&&e||m(t)&&t,duration:t,easing:n&&e||e&&!m(e)&&e};return S.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(t,e,n,r){return this.filter(at).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=S.isEmptyObject(t),o=S.speed(e,n,r),s=function(){var e=de(this,S.extend({},t),o);(i||Q.get(this,"finish"))&&e.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=S.timers,s=Q.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&ae.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||S.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=Q.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=S.timers,s=r?r.length:0;for(n.finish=!0,S.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),S.each(["toggle","show","hide"],function(t,e){var n=S.fn[e];S.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(he(e,!0),t,r,i)}}),S.each({slideDown:he("show"),slideUp:he("hide"),slideToggle:he("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){S.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),S.timers=[],S.fx.tick=function(){var t,e=0,n=S.timers;for(se=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||S.fx.stop(),se=void 0},S.fx.timer=function(t){S.timers.push(t),S.fx.start()},S.fx.interval=13,S.fx.start=function(){ue||(ue=!0,le())},S.fx.stop=function(){ue=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(t,e){return t=S.fx&&S.fx.speeds[t]||t,e=e||"fx",this.queue(e,function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}})},function(){var t=s.createElement("input"),e=s.createElement("select").appendChild(s.createElement("option"));t.type="checkbox",y.checkOn=""!==t.value,y.optSelected=e.selected,(t=s.createElement("input")).value="t",t.type="radio",y.radioValue="t"===t.value}();var ve,be=S.expr.attrHandle;S.fn.extend({attr:function(t,e){return $(this,S.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){S.removeAttr(this,t)})}}),S.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?S.prop(t,e,n):(1===o&&S.isXMLDoc(t)||(i=S.attrHooks[e.toLowerCase()]||(S.expr.match.bool.test(e)?ve:void 0)),void 0!==n?null===n?void S.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=S.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!y.radioValue&&"radio"===e&&k(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(H);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),ve={set:function(t,e,n){return!1===e?S.removeAttr(t,n):t.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),function(t,e){var n=be[e]||S.find.attr;be[e]=function(t,e,r){var i,o,s=e.toLowerCase();return r||(o=be[s],be[s]=i,i=null!=n(t,e,r)?s:null,be[s]=o),i}});var ye=/^(?:input|select|textarea|button)$/i,me=/^(?:a|area)$/i;function ge(t){return(t.match(H)||[]).join(" ")}function we(t){return t.getAttribute&&t.getAttribute("class")||""}function xe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}S.fn.extend({prop:function(t,e){return $(this,S.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[S.propFix[t]||t]})}}),S.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&S.isXMLDoc(t)||(e=S.propFix[e]||e,i=S.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=S.find.attr(t,"tabindex");return e?parseInt(e,10):ye.test(t.nodeName)||me.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(S.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(t){var e,n,r,i,o,s,u,c=0;if(m(t))return this.each(function(e){S(this).addClass(t.call(this,e,we(this)))});if((e=xe(t)).length)for(;n=this[c++];)if(i=we(n),r=1===n.nodeType&&" "+ge(i)+" "){for(s=0;o=e[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(u=ge(r))&&n.setAttribute("class",u)}return this},removeClass:function(t){var e,n,r,i,o,s,u,c=0;if(m(t))return this.each(function(e){S(this).removeClass(t.call(this,e,we(this)))});if(!arguments.length)return this.attr("class","");if((e=xe(t)).length)for(;n=this[c++];)if(i=we(n),r=1===n.nodeType&&" "+ge(i)+" "){for(s=0;o=e[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(u=ge(r))&&n.setAttribute("class",u)}return this},toggleClass:function(t,e){var n=typeof t,r="string"===n||Array.isArray(t);return"boolean"==typeof e&&r?e?this.addClass(t):this.removeClass(t):m(t)?this.each(function(n){S(this).toggleClass(t.call(this,n,we(this),e),e)}):this.each(function(){var e,i,o,s;if(r)for(i=0,o=S(this),s=xe(t);e=s[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=we(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Q.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+ge(we(n))+" ").indexOf(e)>-1)return!0;return!1}});var _e=/\r/g;S.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=m(t),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,S(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=S.map(i,function(t){return null==t?"":t+""})),(e=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))})):i?(e=S.valHooks[i.type]||S.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(_e,""):null==n?"":n:void 0}}),S.extend({valHooks:{option:{get:function(t){var e=S.find.attr(t,"value");return null!=e?e:ge(S.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,s="select-one"===t.type,u=s?null:[],c=s?o+1:i.length;for(r=o<0?c:s?o:0;r<c;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(e=S(n).val(),s)return e;u.push(e)}return u},set:function(t,e){for(var n,r,i=t.options,o=S.makeArray(e),s=i.length;s--;)((r=i[s]).selected=S.inArray(S.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=S.inArray(S(t).val(),e)>-1}},y.checkOn||(S.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),y.focusin="onfocusin"in n;var Se=/^(?:focusinfocus|focusoutblur)$/,je=function(t){t.stopPropagation()};S.extend(S.event,{trigger:function(t,e,r,i){var o,u,c,a,l,f,h,p,v=[r||s],b=d.call(t,"type")?t.type:t,y=d.call(t,"namespace")?t.namespace.split("."):[];if(u=p=c=r=r||s,3!==r.nodeType&&8!==r.nodeType&&!Se.test(b+S.event.triggered)&&(b.indexOf(".")>-1&&(y=b.split("."),b=y.shift(),y.sort()),l=b.indexOf(":")<0&&"on"+b,(t=t[S.expando]?t:new S.Event(b,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=y.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:S.makeArray(e,[t]),h=S.event.special[b]||{},i||!h.trigger||!1!==h.trigger.apply(r,e))){if(!i&&!h.noBubble&&!g(r)){for(a=h.delegateType||b,Se.test(a+b)||(u=u.parentNode);u;u=u.parentNode)v.push(u),c=u;c===(r.ownerDocument||s)&&v.push(c.defaultView||c.parentWindow||n)}for(o=0;(u=v[o++])&&!t.isPropagationStopped();)p=u,t.type=o>1?a:h.bindType||b,(f=(Q.get(u,"events")||{})[t.type]&&Q.get(u,"handle"))&&f.apply(u,e),(f=l&&u[l])&&f.apply&&G(u)&&(t.result=f.apply(u,e),!1===t.result&&t.preventDefault());return t.type=b,i||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(v.pop(),e)||!G(r)||l&&m(r[b])&&!g(r)&&((c=r[l])&&(r[l]=null),S.event.triggered=b,t.isPropagationStopped()&&p.addEventListener(b,je),r[b](),t.isPropagationStopped()&&p.removeEventListener(b,je),S.event.triggered=void 0,c&&(r[l]=c)),t.result}},simulate:function(t,e,n){var r=S.extend(new S.Event,n,{type:t,isSimulated:!0});S.event.trigger(r,null,e)}}),S.fn.extend({trigger:function(t,e){return this.each(function(){S.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return S.event.trigger(t,e,n,!0)}}),y.focusin||S.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){S.event.simulate(e,t.target,S.event.fix(t))};S.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Q.access(r,e);i||r.addEventListener(t,n,!0),Q.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Q.access(r,e)-1;i?Q.access(r,e,i):(r.removeEventListener(t,n,!0),Q.remove(r,e))}}});var Oe=n.location,Te=Date.now(),Ce=/\?/;S.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+t),e};var Ee=/\[\]$/,Ne=/\r?\n/g,ke=/^(?:submit|button|image|reset|file)$/i,Ae=/^(?:input|select|textarea|keygen)/i;function Ie(t,e,n,r){var i;if(Array.isArray(e))S.each(e,function(e,i){n||Ee.test(t)?r(t,i):Ie(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==_(e))r(t,e);else for(i in e)Ie(t+"["+i+"]",e[i],n,r)}S.param=function(t,e){var n,r=[],i=function(t,e){var n=m(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!S.isPlainObject(t))S.each(t,function(){i(this.name,this.value)});else for(n in t)Ie(n,t[n],e,i);return r.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=S.prop(this,"elements");return t?S.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!S(this).is(":disabled")&&Ae.test(this.nodeName)&&!ke.test(t)&&(this.checked||!vt.test(t))}).map(function(t,e){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(t){return{name:e.name,value:t.replace(Ne,"\r\n")}}):{name:e.name,value:n.replace(Ne,"\r\n")}}).get()}});var Pe=/%20/g,De=/#.*$/,Me=/([?&])_=[^&]*/,Ve=/^(.*?):[ \t]*([^\r\n]*)$/gm,Le=/^(?:GET|HEAD)$/,He=/^\/\//,Re={},qe={},Be="*/".concat("*"),We=s.createElement("a");function Fe(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(H)||[];if(m(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function ze(t,e,n,r){var i={},o=t===qe;function s(u){var c;return i[u]=!0,S.each(t[u]||[],function(t,u){var a=u(e,n,r);return"string"!=typeof a||o||i[a]?o?!(c=a):void 0:(e.dataTypes.unshift(a),s(a),!1)}),c}return s(e.dataTypes[0])||!i["*"]&&s("*")}function $e(t,e){var n,r,i=S.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&S.extend(!0,t,r),t}We.href=Oe.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Oe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Oe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?$e($e(t,S.ajaxSettings),e):$e(S.ajaxSettings,t)},ajaxPrefilter:Fe(Re),ajaxTransport:Fe(qe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i,o,u,c,a,l,f,h,p,d=S.ajaxSetup({},e),v=d.context||d,b=d.context&&(v.nodeType||v.jquery)?S(v):S.event,y=S.Deferred(),m=S.Callbacks("once memory"),g=d.statusCode||{},w={},x={},_="canceled",j={readyState:0,getResponseHeader:function(t){var e;if(l){if(!u)for(u={};e=Ve.exec(o);)u[e[1].toLowerCase()+" "]=(u[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=u[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(t,e){return null==l&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==l&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)j.always(t[j.status]);else for(e in t)g[e]=[g[e],t[e]];return this},abort:function(t){var e=t||_;return r&&r.abort(e),O(0,e),this}};if(y.promise(j),d.url=((t||d.url||Oe.href)+"").replace(He,Oe.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(H)||[""],null==d.crossDomain){a=s.createElement("a");try{a.href=d.url,a.href=a.href,d.crossDomain=We.protocol+"//"+We.host!=a.protocol+"//"+a.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=S.param(d.data,d.traditional)),ze(Re,d,e,j),l)return j;for(h in(f=S.event&&d.global)&&0==S.active++&&S.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Le.test(d.type),i=d.url.replace(De,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Pe,"+")):(p=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Ce.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(Me,"$1"),p=(Ce.test(i)?"&":"?")+"_="+Te+++p),d.url=i+p),d.ifModified&&(S.lastModified[i]&&j.setRequestHeader("If-Modified-Since",S.lastModified[i]),S.etag[i]&&j.setRequestHeader("If-None-Match",S.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||e.contentType)&&j.setRequestHeader("Content-Type",d.contentType),j.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Be+"; q=0.01":""):d.accepts["*"]),d.headers)j.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(!1===d.beforeSend.call(v,j,d)||l))return j.abort();if(_="abort",m.add(d.complete),j.done(d.success),j.fail(d.error),r=ze(qe,d,e,j)){if(j.readyState=1,f&&b.trigger("ajaxSend",[j,d]),l)return j;d.async&&d.timeout>0&&(c=n.setTimeout(function(){j.abort("timeout")},d.timeout));try{l=!1,r.send(w,O)}catch(t){if(l)throw t;O(-1,t)}}else O(-1,"No Transport");function O(t,e,s,u){var a,h,p,w,x,_=e;l||(l=!0,c&&n.clearTimeout(c),r=void 0,o=u||"",j.readyState=t>0?4:0,a=t>=200&&t<300||304===t,s&&(w=function(t,e,n){for(var r,i,o,s,u=t.contents,c=t.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in u)if(u[i]&&u[i].test(r)){c.unshift(i);break}if(c[0]in n)o=c[0];else{for(i in n){if(!c[0]||t.converters[i+" "+c[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==c[0]&&c.unshift(o),n[o]}(d,j,s)),w=function(t,e,n,r){var i,o,s,u,c,a={},l=t.dataTypes.slice();if(l[1])for(s in t.converters)a[s.toLowerCase()]=t.converters[s];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!c&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),c=o,o=l.shift())if("*"===o)o=c;else if("*"!==c&&c!==o){if(!(s=a[c+" "+o]||a["* "+o]))for(i in a)if((u=i.split(" "))[1]===o&&(s=a[c+" "+u[0]]||a["* "+u[0]])){!0===s?s=a[i]:!0!==a[i]&&(o=u[0],l.unshift(u[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+c+" to "+o}}}return{state:"success",data:e}}(d,w,j,a),a?(d.ifModified&&((x=j.getResponseHeader("Last-Modified"))&&(S.lastModified[i]=x),(x=j.getResponseHeader("etag"))&&(S.etag[i]=x)),204===t||"HEAD"===d.type?_="nocontent":304===t?_="notmodified":(_=w.state,h=w.data,a=!(p=w.error))):(p=_,!t&&_||(_="error",t<0&&(t=0))),j.status=t,j.statusText=(e||_)+"",a?y.resolveWith(v,[h,_,j]):y.rejectWith(v,[j,_,p]),j.statusCode(g),g=void 0,f&&b.trigger(a?"ajaxSuccess":"ajaxError",[j,d,a?h:p]),m.fireWith(v,[j,_]),f&&(b.trigger("ajaxComplete",[j,d]),--S.active||S.event.trigger("ajaxStop")))}return j},getJSON:function(t,e,n){return S.get(t,e,n,"json")},getScript:function(t,e){return S.get(t,void 0,e,"script")}}),S.each(["get","post"],function(t,e){S[e]=function(t,n,r,i){return m(n)&&(i=i||r,r=n,n=void 0),S.ajax(S.extend({url:t,type:e,dataType:i,data:n,success:r},S.isPlainObject(t)&&t))}}),S._evalUrl=function(t,e){return S.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){S.globalEval(t,e)}})},S.fn.extend({wrapAll:function(t){var e;return this[0]&&(m(t)&&(t=t.call(this[0])),e=S(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return m(t)?this.each(function(e){S(this).wrapInner(t.call(this,e))}):this.each(function(){var e=S(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=m(t);return this.each(function(n){S(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(t){return!S.expr.pseudos.visible(t)},S.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Ue={0:200,1223:204},Ye=S.ajaxSettings.xhr();y.cors=!!Ye&&"withCredentials"in Ye,y.ajax=Ye=!!Ye,S.ajaxTransport(function(t){var e,r;if(y.cors||Ye&&!t.crossDomain)return{send:function(i,o){var s,u=t.xhr();if(u.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)u[s]=t.xhrFields[s];for(s in t.mimeType&&u.overrideMimeType&&u.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)u.setRequestHeader(s,i[s]);e=function(t){return function(){e&&(e=r=u.onload=u.onerror=u.onabort=u.ontimeout=u.onreadystatechange=null,"abort"===t?u.abort():"error"===t?"number"!=typeof u.status?o(0,"error"):o(u.status,u.statusText):o(Ue[u.status]||u.status,u.statusText,"text"!==(u.responseType||"text")||"string"!=typeof u.responseText?{binary:u.response}:{text:u.responseText},u.getAllResponseHeaders()))}},u.onload=e(),r=u.onerror=u.ontimeout=e("error"),void 0!==u.onabort?u.onabort=r:u.onreadystatechange=function(){4===u.readyState&&n.setTimeout(function(){e&&r()})},e=e("abort");try{u.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),S.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return S.globalEval(t),t}}}),S.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),S.ajaxTransport("script",function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=S("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),s.head.appendChild(e[0])},abort:function(){n&&n()}}});var Xe,Ke=[],Ge=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ke.pop()||S.expando+"_"+Te++;return this[t]=!0,t}}),S.ajaxPrefilter("json jsonp",function(t,e,r){var i,o,s,u=!1!==t.jsonp&&(Ge.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ge.test(t.data)&&"data");if(u||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=m(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,u?t[u]=t[u].replace(Ge,"$1"+i):!1!==t.jsonp&&(t.url+=(Ce.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||S.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){s=arguments},r.always(function(){void 0===o?S(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ke.push(i)),s&&m(o)&&o(s[0]),s=o=void 0}),"script"}),y.createHTMLDocument=((Xe=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xe.childNodes.length),S.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(y.createHTMLDocument?((r=(e=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,e.head.appendChild(r)):e=s),o=!n&&[],(i=A.exec(t))?[e.createElement(i[1])]:(i=jt([t],e,o),o&&o.length&&S(o).remove(),S.merge([],i.childNodes)));var r,i,o},S.fn.load=function(t,e,n){var r,i,o,s=this,u=t.indexOf(" ");return u>-1&&(r=ge(t.slice(u)),t=t.slice(0,u)),m(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),s.length>0&&S.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(r?S("<div>").append(S.parseHTML(t)).find(r):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){S.fn[e]=function(t){return this.on(e,t)}}),S.expr.pseudos.animated=function(t){return S.grep(S.timers,function(e){return t===e.elem}).length},S.offset={setOffset:function(t,e,n){var r,i,o,s,u,c,a=S.css(t,"position"),l=S(t),f={};"static"===a&&(t.style.position="relative"),u=l.offset(),o=S.css(t,"top"),c=S.css(t,"left"),("absolute"===a||"fixed"===a)&&(o+c).indexOf("auto")>-1?(s=(r=l.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(c)||0),m(e)&&(e=e.call(t,n,S.extend({},u))),null!=e.top&&(f.top=e.top-u.top+s),null!=e.left&&(f.left=e.left-u.left+i),"using"in e?e.using.call(t,f):l.css(f)}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){S.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===S.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===S.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=S(t).offset()).top+=S.css(t,"borderTopWidth",!0),i.left+=S.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-S.css(r,"marginTop",!0),left:e.left-i.left-S.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===S.css(t,"position");)t=t.offsetParent;return t||st})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;S.fn[t]=function(r){return $(this,function(t,r,i){var o;if(g(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i},t,r,arguments.length)}}),S.each(["top","left"],function(t,e){S.cssHooks[e]=Yt(y.pixelPosition,function(t,n){if(n)return n=Ut(t,e),Ft.test(n)?S(t).position()[e]+"px":n})}),S.each({Height:"height",Width:"width"},function(t,e){S.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){S.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),u=n||(!0===i||!0===o?"margin":"border");return $(this,function(e,n,i){var o;return g(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?S.css(e,n,u):S.style(e,n,i,u)},e,s?i:void 0,s)}})}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){S.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),S.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),S.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),S.proxy=function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),m(t))return r=c.call(arguments,2),(i=function(){return t.apply(e||this,r.concat(c.call(arguments)))}).guid=t.guid=t.guid||S.guid++,i},S.holdReady=function(t){t?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=k,S.isFunction=m,S.isWindow=g,S.camelCase=K,S.type=_,S.now=Date.now,S.isNumeric=function(t){var e=S.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(r=function(){return S}.apply(e,[]))||(t.exports=r);var Je=n.jQuery,Qe=n.$;return S.noConflict=function(t){return n.$===S&&(n.$=Qe),t&&n.jQuery===S&&(n.jQuery=Je),S},i||(n.jQuery=n.$=S),S})},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(92))},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(38),o=n(56),s=r(n(76)),u=function(){function t(e,n){void 0===e&&(e=!0),this.allowWrite=e,this.of=n,this.subscriptions=[],this._value=0,this.color=new i.BehaviorSubject([0,0,0,0]),this.memory={},this.valueChanges=new i.Subject,this.svgColor=this.color.pipe(o.map(function(t){return"rgb("+t.join(",")+")"})),this.setValue(0),this.id=t.lastId++}return Object.defineProperty(t.prototype,"value",{get:function(){return this._value},set:function(t){this.allowWrite&&this.setValue(t)},enumerable:!0,configurable:!0}),t.prototype.setValue=function(t){this._value=s.default(t,0,1),this.valueChanges.next(this._value);var e=t>.5?[255,216,20,1]:[90,90,90,1];this.color.next(this.pair?e:[0,0,0,0])},t.prototype.bindTo=function(t){var e=this;this.pair=t;var n=t.valueChanges.subscribe(function(t){return e.setValue(t)});this.subscriptions.push(n)},t.prototype.unbind=function(t){this.pair==t&&(this.pair=null,this.subscriptions.forEach(function(t){return t.unsubscribe()}))},t.prototype.update=function(){this.setValue(this._value)},t.lastId=0,t}();e.Pin=u},function(t,e,n){"use strict";var r=this&&this.__makeTemplateObject||function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},i=this&&this.__decorate||function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(i=t[u])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};Object.defineProperty(e,"__esModule",{value:!0});var o,s=n(52),u=n(94),c=n(39),a=n(57),l=n(38),f=function(){function t(){this.wires=[],this.update=new l.Subject}return t.prototype.add=function(t){t.allowWrite?this.start=t:this.end=t,this.tryResolving()},t.prototype.dispose=function(){for(var t=0,e=this.wires;t<e.length;t++){e[t].dispose()}this.wires=[]},t.prototype.tryResolving=function(){this.start&&this.end&&this.start!=this.end&&this.canBind(this.start,this.end)&&(this.wires.push(new u.Wire(this.start,this.end)),this.start=null,this.end=null,this.update.next(!0))},t.prototype.canBind=function(t,e){return!this.wires.find(function(t){return t.output===e})},Object.defineProperty(t.prototype,"svg",{get:function(){return this.wires.map(function(t){var e=t.input.of,n=t.output.of;return c.svg(o||(o=r(["\n            <line x1=","\n                x2=","\n                y1=","\n                y2=","\n                stroke=","\n            >\n            </line>\n        "],["\n            <line x1=","\n                x2=","\n                y1=","\n                y2=","\n                stroke=","\n            >\n            </line>\n        "])),a.subscribe(e.pinx(!1,20)),a.subscribe(n.pinx(!0,20)),a.subscribe(e.piny(!1,e.outputPins.indexOf(t.input))),a.subscribe(n.piny(!0,n.inputPins.indexOf(t.output))),a.subscribe(t.input.svgColor))})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"state",{get:function(){return this.wires.map(function(t){return{from:{owner:t.input.of.id,index:t.input.of.outputPins.indexOf(t.input)},to:{owner:t.output.of.id,index:t.output.of.inputPins.indexOf(t.output)}}})},enumerable:!0,configurable:!0}),t=i([s.Singleton],t)}();e.WireManager=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){this.input=t,this.output=e,this.output.bindTo(this.input),this.input.pair=this.output,this.input.update(),this.output.update()}return t.prototype.dispose=function(){this.output.unbind(this.input),this.input.pair=null},t}();e.Wire=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(96))},function(t,e,n){"use strict";var r=this&&this.__makeTemplateObject||function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},i=this&&this.__decorate||function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(i=t[u])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};Object.defineProperty(e,"__esModule",{value:!0});var o,s,u=n(52),c=n(77),a=n(38),l=n(39),f=n(57),h=n(73),p=n(74),d=n(97),v=n(53),b=n(78),y=n(79),m=n(80),g=n(81),w=n(100),x=n(101),_=function(){function t(){var t=this;this.components=[],this.svgs=new a.Subject,this.placeholder=new a.BehaviorSubject("Create simulation"),this.temporaryCommnad="",this.clicked=!1,this.screen=new h.Screen,this.wireManager=new m.WireManager,this.templateStore=new b.ComponentTemplateStore,this.settings=new w.Settings,this.commandHistoryStore=new p.Store("commandHistory"),this.store=new p.Store("simulationStates"),this.saveEvent=new d.KeyboardInput("s"),this.createEvent=new d.KeyboardInput("m"),this.closeInputEvent=new d.KeyboardInput("enter"),this.ctrlEvent=new d.KeyboardInput("ctrl"),this.palleteEvent=new d.KeyboardInput("p"),this.shiftEvent=new d.KeyboardInput("shift"),this.refreshEvent=new d.KeyboardInput("r"),this.clearEvent=new d.KeyboardInput("c"),this.upEvent=new d.KeyboardInput("up"),this.downEvent=new d.KeyboardInput("down"),this.name="current",this.alertOptions=y.alertOptions,this.commandHistory=[],this.commands={clear:function(t){t.clear()},save:function(t){t.save()},ls:function(t){var e=t.store.ls().join("\n");v.success(e,"",t.alertOptions)},help:function(t){v.success("Usage: &ltcommand> <br>\n            Where &ltcommand> is one of:\n                <ul>\n                "+Object.keys(t.commands).map(function(t){return"\n                    <li>"+t+"</li>\n                "}).join("")+"\n                </ul>\n            ","",t.alertOptions)},refresh:function(t){t.refresh()},ctp:this.templateStore.commands.template,settings:this.settings.commands,download:x.download},this.barAlpha=new a.BehaviorSubject("0"),g.runCounter.increase(),this.svgs.next(this.render()),this.refresh(),a.fromEvent(document.body,"keydown").subscribe(function(e){"1"==t.barAlpha.value?document.getElementById("nameInput").focus():e.preventDefault()}),a.fromEvent(document.body,"keyup").subscribe(function(e){if("1"===t.barAlpha.value){if(t.closeInputEvent.value)t.create();else if("command"===t.inputMode){var n,r=document.getElementById("nameInput");if(t.upEvent.value)if(document.body.focus(),e.preventDefault(),n=t.commandHistory.indexOf(r.value)){-1===n&&(t.temporaryCommnad=r.value);var i=-1===n?t.commandHistory.length-1:n-1;r.value=t.commandHistory[i]}if(t.downEvent.value)if(document.body.focus(),e.preventDefault(),(n=t.commandHistory.indexOf(r.value))>-1){var o=t.commandHistory.length-1;r.value=n===o?t.temporaryCommnad:t.commandHistory[n+1]}}}else t.ctrlEvent.value&&(t.createEvent.value?(t.preInput(),t.inputMode="create",t.placeholder.next("Create simulation")):t.shiftEvent.value&&t.palleteEvent.value?(t.preInput(),t.inputMode="command",t.placeholder.next("Command palette")):t.clearEvent.value?t.clear():t.saveEvent.value?t.save():t.refreshEvent.value&&t.refresh())}),this.wireManager.update.subscribe(function(e){return t.update()})}return t.prototype.preInput=function(){document.getElementById("nameInput").value="",this.barAlpha.next("1")},t.prototype.create=function(){var t=document.getElementById("nameInput");this.barAlpha.next("0"),"create"==this.inputMode?v.success("Succesfully created simulation "+t.value,"",this.alertOptions):"command"==this.inputMode&&this.eval(t.value)},t.prototype.eval=function(t){for(this.commandHistory.includes(t)||this.commandHistory.push(t);this.commandHistory.length>10;)this.commandHistory.shift();var e=t.split(" ");if(e[0]in this.commands){var n=e.slice(1),r=n.filter(function(t){return"-"==t[0]}),i=n.filter(function(t){return"-"!=t[0]});this.commands[e[0]](this,i,r)}else v.error("Command "+e+" doesn't exist. Run help to get a list of all commands.","",this.alertOptions)},t.prototype.clear=function(){this.components=[],this.wireManager.dispose(),this.update(),v.success("Succesfully cleared all components","",this.alertOptions)},t.prototype.refresh=function(){this.store.get(this.name)&&this.loadState(this.store.get(this.name));for(var t=0,e=this.commandHistoryStore.ls();t<e.length;t++){var n=e[t];this.commandHistory[Number(n)]=this.commandHistoryStore.get(n)}this.update(),v.success("Succesfully refreshed to the latest save","",this.alertOptions)},t.prototype.update=function(){this.svgs.next(this.render())},t.prototype.handleMouseDown=function(t){this.clicked=!0},t.prototype.handleMouseUp=function(t){this.clicked=!1},t.prototype.handleMouseMove=function(t){for(var e,n,r=this,i=!0,o=0;o<this.components.length;o++){var s=this.components[o];s.clicked&&(i=!1,s.move(t),this.onTop!=s&&(n=o))}if(n>=0)this.onTop=this.components[n],this.components.push(this.onTop),this.update();else if(i&&this.clicked){var u=[t.clientX,t.clientY].map(function(t,e){return r.screen.mousePosition[e]-t});(e=this.screen).move.apply(e,u)}},t.prototype.render=function(){var t,e=this.components.map(function(e){return l.svg(o||(o=r(["\n            <g>\n                ","\n                ","\n\n                <rect width=","\n                height="," \n                x=","\n                y=",'\n                fill="red"\n                stroke="black"\n                rx=20\n                ry=20\n                @mousedown=',"\n                @mouseup=","></rect>\n            </g>\n        "],["\n            <g>\n                ","\n                ","\n\n                <rect width=","\n                height="," \n                x=","\n                y=",'\n                fill="red"\n                stroke="black"\n                rx=20\n                ry=20\n                @mousedown=',"\n                @mouseup=","></rect>\n            </g>\n        "])),e.pinsSvg(10,20),e.pinsSvg(10,20,"output"),f.subscribe(e.width),f.subscribe(e.height),f.subscribe(e.x),f.subscribe(e.y),function(t){return e.handleClick(t)},function(n){e.handleMouseUp(n),t=e})});return t&&this.removeDuplicates(t),l.svg(s||(s=r([""," ",""],[""," ",""])),this.wireManager.svg,e)},t.prototype.removeDuplicates=function(t){var e=this.components.map(function(e,n){return e==t?n:null}).filter(function(t){return t});e.pop(),this.components=this.components.filter(function(t,n){return-1!=e.indexOf(n)})},Object.defineProperty(t.prototype,"state",{get:function(){return{components:Array.from(new Set(this.components).values()).map(function(t){return t.state}),position:this.screen.position,scale:this.screen.scale,wires:this.wireManager.state}},enumerable:!0,configurable:!0}),t.prototype.getComponentById=function(t){return this.components.find(function(e){return e.id===t})},t.prototype.loadState=function(t){var e=this;t.wires&&(this.wireManager.dispose(),this.clicked=!1,this.components=t.components.map(function(t){return c.Component.fromState(t)}),this.onTop=null,t.wires.forEach(function(t){e.wireManager.start=e.getComponentById(t.from.owner).outputPins[t.from.index],e.wireManager.end=e.getComponentById(t.to.owner).inputPins[t.to.index],e.wireManager.tryResolving()}),this.screen.scale=t.scale,this.screen.position=t.position,this.update())},t.prototype.save=function(t){for(var e=0;e<this.commandHistory.length;e++){var n=this.commandHistory[e];this.commandHistoryStore.set(e.toString(),n)}this.store.set(t||this.name,this.state),v.success("Saved the simulation succesfully!","",this.alertOptions)},t=i([u.Singleton],t)}();e.ComponentManager=_},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(98);e.KeyboardInput=r.KeyboardInput},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(38),i=n(99);e.KeyboardInput=class{constructor(...t){this.value=!1,this.pressed=[],this.valueChanges=new r.Subject,this.subscription=[],this.keys=t,this.subscription.push(r.fromEvent(document,"keydown").subscribe(t=>{const e=this.pressed.length;for(let e of this.keys)e==i(t)&&-1==this.pressed.indexOf(e)&&this.pressed.push(e);0==e&&0!=this.pressed.length&&(this.value=!0,this.valueChanges.next(this.value))})),this.subscription.push(r.fromEvent(document,"keyup").subscribe(t=>{const e=this.pressed.length;for(let e of this.keys)e==i(t)&&-1!=this.pressed.indexOf(e)&&this.pressed.splice(this.pressed.indexOf(e),1);this.value&&e>0&&0==this.pressed.length&&(this.value=!1,this.valueChanges.next(this.value))}))}dispose(){this.subscription.forEach(t=>t.unsubscribe()),this.value=!1,this.valueChanges.next(!1),this.valueChanges.complete()}}},function(t,e){function n(t){if(t&&"object"==typeof t){var e=t.which||t.keyCode||t.charCode;e&&(t=e)}if("number"==typeof t)return s[t];var n,o=String(t);return(n=r[o.toLowerCase()])?n:(n=i[o.toLowerCase()])||(1===o.length?o.charCodeAt(0):void 0)}n.isEventKey=function(t,e){if(t&&"object"==typeof t){var n=t.which||t.keyCode||t.charCode;if(null==n)return!1;if("string"==typeof e){var o;if(o=r[e.toLowerCase()])return o===n;if(o=i[e.toLowerCase()])return o===n}else if("number"==typeof e)return e===n;return!1}};var r=(e=t.exports=n).code=e.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},i=e.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(o=97;o<123;o++)r[String.fromCharCode(o)]=o-32;for(var o=48;o<58;o++)r[o-48]=o;for(o=1;o<13;o++)r["f"+o]=o+111;for(o=0;o<10;o++)r["numpad "+o]=o+96;var s=e.names=e.title={};for(o in r)s[r[o]]=o;for(var u in i)r[u]=i[u]},function(t,e,n){"use strict";var r=this&&this.__decorate||function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(i=t[u])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};Object.defineProperty(e,"__esModule",{value:!0});var i=n(52),o=n(53),s=function(){function t(){var t=this;this.version="1.0.0",this.commands=function(e,n,r){for(var i=0,s=r;i<s.length;i++){var u=s[i];if("--version"===u||"-v"===u)return o.success(""+t.version,"",e.alertOptions)}if(void 0===n[0])return o.success("Welcome to the settings cli. You can use this to tweak settings in any way imaginable!","",e.alertOptions);o.error("Commands "+n+" couldnt be found","",e.alertOptions)}}return t=r([i.Singleton],t)}();e.Settings=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(53),i=n(102);e.download=function(t,e,n){for(var o=0,s=n;o<s.length;o++){var u=s[o];if("--version"===u||"-v"===u)return r.success("1.0.0","",t.alertOptions);if("--help"===u||"-h"===u)return r.success('Run "download" to download the save as a json file.\n            Flags:<ul>\n                <li>-v or --version to get the version.</li>\n                <li>-h or --help to get help (ou are reading that right now)</li>\n                <li>-s or --save to automatically save before downloading</li>\n            </ul>',"",t.alertOptions)}if(void 0===e[0]){(n.includes("-s")||n.includes("--save"))&&t.save();var c=JSON.stringify(t.state);i.saveAs(new Blob([c]),t.name+".json")}}},function(t,e,n){(function(n){var r,i,o;i=[],void 0===(o="function"==typeof(r=function(){"use strict";function e(t,e,n){var r=new XMLHttpRequest;r.open("GET",t),r.responseType="blob",r.onload=function(){s(r.response,e,n)},r.onerror=function(){console.error("could not download file")},r.send()}function r(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function i(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(n){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof n&&n.global===n?n:void 0,s=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype?function(t,n,s){var u=o.URL||o.webkitURL,c=document.createElement("a");n=n||t.name||"download",c.download=n,c.rel="noopener","string"==typeof t?(c.href=t,c.origin===location.origin?i(c):r(c.href)?e(t,n,s):i(c,c.target="_blank")):(c.href=u.createObjectURL(t),setTimeout(function(){u.revokeObjectURL(c.href)},4e4),setTimeout(function(){i(c)},0))}:"msSaveOrOpenBlob"in navigator?function(t,n,o){if(n=n||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,o),n);else if(r(t))e(t,n,o);else{var s=document.createElement("a");s.href=t,s.target="_blank",setTimeout(function(){i(s)})}}:function(t,n,r,i){if((i=i||open("","_blank"))&&(i.document.title=i.document.body.innerText="downloading..."),"string"==typeof t)return e(t,n,r);var s="application/octet-stream"===t.type,u=/constructor/i.test(o.HTMLElement)||o.safari,c=/CriOS\/[\d]+/.test(navigator.userAgent);if((c||s&&u)&&"object"==typeof FileReader){var a=new FileReader;a.onloadend=function(){var t=a.result;t=c?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),i?i.location.href=t:location=t,i=null},a.readAsDataURL(t)}else{var l=o.URL||o.webkitURL,f=l.createObjectURL(t);i?i.location=f:location.href=f,i=null,setTimeout(function(){l.revokeObjectURL(f)},4e4)}});o.saveAs=s.saveAs=s,t.exports=s})?r.apply(e,i):r)||(t.exports=o)}).call(this,n(103))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,