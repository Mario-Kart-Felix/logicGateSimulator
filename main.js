!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=86)}([function(t,e,n){"use strict";n.d(e,"b",function(){return r}),n.d(e,"a",function(){return o}),n.d(e,"d",function(){return s}),n.d(e,"c",function(){return a});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function r(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};function s(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function u(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,r,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){r={error:t}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return s}function a(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(u(arguments[e]));return t}},function(t,e,n){"use strict";n.d(e,"a",function(){return l});var i=n(0),r=n(25),o=n(54),s=n(5),u=n(40),a=n(14),c=n(34),l=function(t){function e(n,i,r){var s=t.call(this)||this;switch(s.syncErrorValue=null,s.syncErrorThrown=!1,s.syncErrorThrowable=!1,s.isStopped=!1,arguments.length){case 0:s.destination=o.a;break;case 1:if(!n){s.destination=o.a;break}if("object"==typeof n){n instanceof e?(s.syncErrorThrowable=n.syncErrorThrowable,s.destination=n,n.add(s)):(s.syncErrorThrowable=!0,s.destination=new f(s,n));break}default:s.syncErrorThrowable=!0,s.destination=new f(s,n,i,r)}return s}return i.b(e,t),e.prototype[u.a]=function(){return this},e.create=function(t,n,i){var r=new e(t,n,i);return r.syncErrorThrowable=!1,r},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(s.a),f=function(t){function e(e,n,i,s){var u,a=t.call(this)||this;a._parentSubscriber=e;var c=a;return Object(r.a)(n)?u=n:n&&(u=n.next,i=n.error,s=n.complete,n!==o.a&&(c=Object.create(n),Object(r.a)(c.unsubscribe)&&a.add(c.unsubscribe.bind(c)),c.unsubscribe=a.unsubscribe.bind(a))),a._context=c,a._next=u,a._error=i,a._complete=s,a}return i.b(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;a.a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=a.a.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):Object(c.a)(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;Object(c.a)(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};a.a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),a.a.useDeprecatedSynchronousErrorHandling)throw t;Object(c.a)(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!a.a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return a.a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(Object(c.a)(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(l)},function(t,e,n){"use strict";var i=n(51),r=n(1),o=n(40),s=n(54);var u=n(20),a=n(39),c=n(14);n.d(e,"a",function(){return l});var l=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var i=this.operator,u=function(t,e,n){if(t){if(t instanceof r.a)return t;if(t[o.a])return t[o.a]()}return t||e||n?new r.a(t,e,n):new r.a(s.a)}(t,e,n);if(i?u.add(i.call(u,this.source)):u.add(this.source||c.a.useDeprecatedSynchronousErrorHandling&&!u.syncErrorThrowable?this._subscribe(u):this._trySubscribe(u)),c.a.useDeprecatedSynchronousErrorHandling&&u.syncErrorThrowable&&(u.syncErrorThrowable=!1,u.syncErrorThrown))throw u.syncErrorValue;return u},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){c.a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),Object(i.a)(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=f(e))(function(e,i){var r;r=n.subscribe(function(e){try{t(e)}catch(t){i(t),r&&r.unsubscribe()}},i,e)})},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[u.a]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:Object(a.b)(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=f(t))(function(t,n){var i;e.subscribe(function(t){return i=t},function(t){return n(t)},function(){return t(i)})})},t.create=function(e){return new t(e)},t}();function f(t){if(t||(t=c.a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var i=n(13),r=n(42),o=n(2);function s(t,e,n,s,u){if(void 0===u&&(u=new i.a(t,n,s)),!u.closed)return e instanceof o.a?e.subscribe(u):Object(r.a)(e)(u)}},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=n(0),r=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i.b(e,t),e.prototype.notifyNext=function(t,e,n,i,r){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(n(1).a)},function(t,e,n){"use strict";n.d(e,"a",function(){return u});var i=n(7),r=n(50),o=n(25),s=n(41),u=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,u=this._unsubscribe,c=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var l=0;l<n.length;++l){n[l].remove(this)}if(Object(o.a)(u))try{u.call(this)}catch(t){e=t instanceof s.a?a(t.errors):[t]}if(Object(i.a)(c)){l=-1;for(var f=c.length;++l<f;){var h=c[l];if(Object(r.a)(h))try{h.unsubscribe()}catch(t){e=e||[],t instanceof s.a?e=e.concat(a(t.errors)):e.push(t)}}}if(e)throw new s.a(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var i=n;(n=new t)._subscriptions=[i]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var r=n._parentOrParents;if(null===r)n._parentOrParents=this;else if(r instanceof t){if(r===this)return n;n._parentOrParents=[r,this]}else{if(-1!==r.indexOf(this))return n;r.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=((e=new t).closed=!0,e),t}();function a(t){return t.reduce(function(t,e){return t.concat(e instanceof s.a?e.errors:e)},[])}},function(t,e,n){"use strict";n.d(e,"b",function(){return l}),n.d(e,"a",function(){return f});var i=n(0),r=n(2),o=n(1),s=n(5),u=n(22),a=n(71),c=n(40),l=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return i.b(e,t),e}(o.a),f=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return i.b(e,t),e.prototype[c.a]=function(){return new l(this)},e.prototype.lift=function(t){var e=new h(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new u.a;if(!this.isStopped)for(var e=this.observers,n=e.length,i=e.slice(),r=0;r<n;r++)i[r].next(t)},e.prototype.error=function(t){if(this.closed)throw new u.a;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,i=e.slice(),r=0;r<n;r++)i[r].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new u.a;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),i=0;i<e;i++)n[i].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new u.a;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new u.a;return this.hasError?(t.error(this.thrownError),s.a.EMPTY):this.isStopped?(t.complete(),s.a.EMPTY):(this.observers.push(t),new a.a(this,t))},e.prototype.asObservable=function(){var t=new r.a;return t.source=this,t},e.create=function(t,e){return new h(t,e)},e}(r.a),h=function(t){function e(e,n){var i=t.call(this)||this;return i.destination=e,i.source=n,i}return i.b(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):s.a.EMPTY},e}(f)},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var i=Array.isArray||function(t){return t&&"number"==typeof t.length}},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=n(31),r=new(n(28).a)(i.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var i=n(0),r=n(1);function o(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new s(t,e))}}var s=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.project,this.thisArg))},t}(),u=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.project=n,r.count=0,r.thisArg=i||r,r}return i.b(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(r.a)},function(t,e,n){"use strict";function i(t){return t&&"function"==typeof t.schedule}n.d(e,"a",function(){return i})},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var i=n(2),r=new i.a(function(t){return t.complete()});function o(t){return t?function(t){return new i.a(function(e){return t.schedule(function(){return e.complete()})})}(t):r}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var i=n(2),r=n(42),o=n(69);function s(t,e){return e?Object(o.a)(t,e):t instanceof i.a?t:new i.a(Object(r.a)(t))}},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=n(0),r=function(t){function e(e,n,i){var r=t.call(this)||this;return r.parent=e,r.outerValue=n,r.outerIndex=i,r.index=0,r}return i.b(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(n(1).a)},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=!1,r={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;i=t},get useDeprecatedSynchronousErrorHandling(){return i}}},function(t,e,n){"use strict";function i(){}n.d(e,"a",function(){return i})},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var i=n(0),r=n(1);function o(t,e){return function(n){return n.lift(new s(t,e))}}var s=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.predicate,this.thisArg))},t}(),u=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.predicate=n,r.thisArg=i,r.count=0,r}return i.b(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(r.a)},function(t,e,n){"use strict";n.d(e,"b",function(){return i}),n.d(e,"a",function(){return u});var i,r=n(11),o=n(38),s=n(45);i||(i={});var u=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Object(o.a)(this.value);case"E":return Object(s.a)(this.error);case"C":return Object(r.b)()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},function(t,e,n){"use strict";function i(t){return t}n.d(e,"a",function(){return i})},function(t,e,n){"use strict";function i(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}n.d(e,"a",function(){return r});var r=i()},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var i="function"==typeof Symbol&&Symbol.observable||"@@observable"},function(t,e,n){"use strict";n.d(e,"a",function(){return i});
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var i=function(){function t(t){void 0===t&&(t={}),this.adapter_=t}return Object.defineProperty(t,"cssClasses",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{}},enumerable:!0,configurable:!0}),t.prototype.init=function(){},t.prototype.destroy=function(){},t}()},function(t,e,n){"use strict";function i(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}n.d(e,"a",function(){return r}),i.prototype=Object.create(Error.prototype);var r=i},function(t,e,n){"use strict";n.d(e,"a",function(){return c});var i=n(0),r=n(3),o=n(4),s=n(13),u=n(9),a=n(12);function c(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(i){return i.pipe(c(function(n,i){return Object(a.a)(t(n,i)).pipe(Object(u.a)(function(t,r){return e(n,t,i,r)}))},n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new l(t,n))})}var l=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new f(t,this.project,this.concurrent))},t}(),f=function(t){function e(e,n,i){void 0===i&&(i=Number.POSITIVE_INFINITY);var r=t.call(this,e)||this;return r.project=n,r.concurrent=i,r.hasCompleted=!1,r.buffer=[],r.active=0,r.index=0,r}return i.b(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var i=new s.a(this,void 0,void 0);this.destination.add(i),Object(r.a)(this,t,e,n,i)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,i,r){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(o.a)},function(t,e,n){"use strict";function i(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}n.d(e,"a",function(){return r}),i.prototype=Object.create(Error.prototype);var r=i},function(t,e,n){"use strict";function i(t){return"function"==typeof t}n.d(e,"a",function(){return i})},function(t,e,n){"use strict";function i(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}n.d(e,"a",function(){return r}),i.prototype=Object.create(Error.prototype);var r=i},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var i=n(2),r=n(72),o=n(52);function s(t,e){return e?Object(o.a)(t,e):new i.a(Object(r.a)(t))}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var i=n(0),r=n(58),o=function(t){function e(n,i){void 0===i&&(i=r.a.now);var o=t.call(this,n,function(){return e.delegate&&e.delegate!==o?e.delegate.now():i()})||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return i.b(e,t),e.prototype.schedule=function(n,i,r){return void 0===i&&(i=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,i,r):t.prototype.schedule.call(this,n,i,r)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(r.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var i=n(0),r=n(6),o=n(5),s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return i.b(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),o.a.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),o.a.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(r.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var i=n(0),r=n(21),o=function(){function t(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];this.root_=t,this.initialize.apply(this,i.c(n)),this.foundation_=void 0===e?this.getDefaultFoundation():e,this.foundation_.init(),this.initialSyncWithDOM()}return t.attachTo=function(e){return new t(e,new r.a({}))},t.prototype.initialize=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},t.prototype.getDefaultFoundation=function(){throw new Error("Subclasses must override getDefaultFoundation to return a properly configured foundation class")},t.prototype.initialSyncWithDOM=function(){},t.prototype.destroy=function(){this.foundation_.destroy()},t.prototype.listen=function(t,e){this.root_.addEventListener(t,e)},t.prototype.unlisten=function(t,e){this.root_.removeEventListener(t,e)},t.prototype.emit=function(t,e,n){var i;void 0===n&&(n=!1),"function"==typeof CustomEvent?i=new CustomEvent(t,{bubbles:n,detail:e}):(i=document.createEvent("CustomEvent")).initCustomEvent(t,n,!1,e),this.root_.dispatchEvent(i)},t}()},function(t,e,n){"use strict";var i=n(0),r=function(t){function e(e,n){return t.call(this)||this}return i.b(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(n(5).a);n.d(e,"a",function(){return o});var o=function(t){function e(e,n){var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.pending=!1,i}return i.b(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,i=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(i,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(i,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,i=void 0;try{this.work(t)}catch(t){n=!0,i=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),i},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,i=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==i&&n.splice(i,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(r)},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=n(7);function r(t){return!Object(i.a)(t)&&t-parseFloat(t)+1>=0}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var i=n(38),r=n(65);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Object(r.a)()(i.a.apply(void 0,t))}},function(t,e,n){"use strict";function i(t){setTimeout(function(){throw t},0)}n.d(e,"a",function(){return i})},function(t,e,n){"use strict";
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function i(t,e){if(t.closest)return t.closest(e);for(var n=t;n;){if(r(n,e))return n;n=n.parentElement}return null}function r(t,e){return(t.matches||t.webkitMatchesSelector||t.msMatchesSelector).call(t,e)}n.d(e,"a",function(){return i}),n.d(e,"b",function(){return r})},function(t,e,n){"use strict";n.r(e);var i=n(2),r=n(61),o=n(59),s=n(20),u=n(6),a=n(62),c=n(44),l=n(29),f=n(53),h=n(8),d=n(70),p=n(0),v=n(31),m=function(t){function e(e,n){var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i}return p.b(e,t),e.prototype.requestAsyncId=function(e,n,i){return void 0===i&&(i=0),null!==i&&i>0?t.prototype.requestAsyncId.call(this,e,n,i):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame(function(){return e.flush(null)})))},e.prototype.recycleAsyncId=function(e,n,i){if(void 0===i&&(i=0),null!==i&&i>0||null===i&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,i);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(v.a),b=n(28),y=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p.b(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,i=-1,r=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++i<r&&(t=n.shift()));if(this.active=!1,e){for(;++i<r&&(t=n.shift());)t.unsubscribe();throw e}},e}(b.a))(m),g=function(t){function e(e,n){void 0===e&&(e=_),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this,e,function(){return i.frame})||this;return i.maxFrames=n,i.frame=0,i.index=-1,i}return p.b(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,i=this.maxFrames;(e=n[0])&&e.delay<=i&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(b.a),_=function(t){function e(e,n,i){void 0===i&&(i=e.index+=1);var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.index=i,r.active=!0,r.index=e.index=i,r}return p.b(e,t),e.prototype.schedule=function(n,i){if(void 0===i&&(i=0),!this.id)return t.prototype.schedule.call(this,n,i);this.active=!1;var r=new e(this.scheduler,this.work);return this.add(r),r.schedule(n,i)},e.prototype.requestAsyncId=function(t,n,i){void 0===i&&(i=0),this.delay=t.frame+i;var r=t.actions;return r.push(this),r.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(v.a),x=n(58),w=n(5),E=n(1),T=n(17),S=n(39),C=n(15),O=n(18);function I(t){return!!t&&(t instanceof i.a||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var A=n(24),N=n(26),j=n(22),k=n(41),L=n(64),D=n(9),P=n(51),M=n(7),R=n(10);function F(t,e,n){if(e){if(!Object(R.a)(e))return function(){for(var i=[],r=0;r<arguments.length;r++)i[r]=arguments[r];return F(t,n).apply(void 0,i).pipe(Object(D.a)(function(t){return Object(M.a)(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o,s=this,u={context:s,subject:o,callbackFunc:t,scheduler:n};return new i.a(function(i){if(n){var r={args:e,subscriber:i,params:u};return n.schedule(H,0,r)}if(!o){o=new l.a;try{t.apply(s,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){Object(P.a)(o)?o.error(t):console.warn(t)}}return o.subscribe(i)})}}function H(t){var e=this,n=t.args,i=t.subscriber,r=t.params,o=r.callbackFunc,s=r.context,u=r.scheduler,a=r.subject;if(!a){a=r.subject=new l.a;try{o.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var i=t.length<=1?t[0]:t;e.add(u.schedule(B,0,{value:i,subject:a}))}]))}catch(t){a.error(t)}}this.add(a.subscribe(i))}function B(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function V(t,e,n){if(e){if(!Object(R.a)(e))return function(){for(var i=[],r=0;r<arguments.length;r++)i[r]=arguments[r];return V(t,n).apply(void 0,i).pipe(Object(D.a)(function(t){return Object(M.a)(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new i.a(function(i){var r=o.context,s=o.subject;if(n)return n.schedule(q,0,{params:o,subscriber:i,context:r});if(!s){s=o.subject=new l.a;try{t.apply(r,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){Object(P.a)(s)?s.error(t):console.warn(t)}}return s.subscribe(i)})}}function q(t){var e=this,n=t.params,i=t.subscriber,r=t.context,o=n.callbackFunc,s=n.args,u=n.scheduler,a=n.subject;if(!a){a=n.subject=new l.a;try{o.apply(r,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var i=t.shift();if(i)e.add(u.schedule(W,0,{err:i,subject:a}));else{var r=t.length<=1?t[0]:t;e.add(u.schedule(U,0,{value:r,subject:a}))}}]))}catch(t){this.add(u.schedule(W,0,{err:t,subject:a}))}}this.add(a.subscribe(i))}function U(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function W(t){var e=t.err;t.subject.error(e)}var z=n(46),G=n(33),K=n(48),X=n(11),$=n(50),Y=n(12);function Q(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(Object(M.a)(n))return J(n,null);if(Object($.a)(n)&&Object.getPrototypeOf(n)===Object.prototype){var i=Object.keys(n);return J(i.map(function(t){return n[t]}),i)}}if("function"==typeof t[t.length-1]){var r=t.pop();return J(t=1===t.length&&Object(M.a)(t[0])?t[0]:t,null).pipe(Object(D.a)(function(t){return r.apply(void 0,t)}))}return J(t,null)}function J(t,e){return new i.a(function(n){var i=t.length;if(0!==i)for(var r=new Array(i),o=0,s=0,u=function(u){var a=Object(Y.a)(t[u]),c=!1;n.add(a.subscribe({next:function(t){c||(c=!0,s++),r[u]=t},error:function(t){return n.error(t)},complete:function(){++o!==i&&c||(s===i&&n.next(e?e.reduce(function(t,e,n){return t[e]=r[n],t},{}):r),n.complete())}}))},a=0;a<i;a++)u(a);else n.complete()})}var Z=n(25);Object.prototype.toString;function tt(t,e,n,r){return Object(Z.a)(n)&&(r=n,n=void 0),r?tt(t,e,n).pipe(Object(D.a)(function(t){return Object(M.a)(t)?r.apply(void 0,t):r(t)})):new i.a(function(i){!function t(e,n,i,r,o){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,i,o),s=function(){return u.removeEventListener(n,i,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var a=e;e.on(n,i),s=function(){return a.off(n,i)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var c=e;e.addListener(n,i),s=function(){return c.removeListener(n,i)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,f=e.length;l<f;l++)t(e[l],n,i,r,o)}r.add(s)}(t,e,function(t){arguments.length>1?i.next(Array.prototype.slice.call(arguments)):i.next(t)},i,n)})}function et(t,e,n){return n?et(t,e).pipe(Object(D.a)(function(t){return Object(M.a)(t)?n.apply(void 0,t):n(t)})):new i.a(function(n){var i,r=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{i=t(r)}catch(t){return void n.error(t)}if(Object(Z.a)(e))return function(){return e(r,i)}})}function nt(t,e,n,r,o){var s,u;if(1==arguments.length){var a=t;u=a.initialState,e=a.condition,n=a.iterate,s=a.resultSelector||O.a,o=a.scheduler}else void 0===r||Object(R.a)(r)?(u=t,s=O.a,o=r):(u=t,s=r);return new i.a(function(t){var i=u;if(o)return o.schedule(it,0,{subscriber:t,iterate:n,condition:e,resultSelector:s,state:i});for(;;){if(e){var r=void 0;try{r=e(i)}catch(e){return void t.error(e)}if(!r){t.complete();break}}var a=void 0;try{a=s(i)}catch(e){return void t.error(e)}if(t.next(a),t.closed)break;try{i=n(i)}catch(e){return void t.error(e)}}})}function it(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var i=void 0;try{i=n(t.state)}catch(t){return void e.error(t)}if(!i)return void e.complete();if(e.closed)return}var r;try{r=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(r),!e.closed))return this.schedule(t)}}function rt(t,e,n){return void 0===e&&(e=X.a),void 0===n&&(n=X.a),Object(K.a)(function(){return t()?e:n})}var ot=n(32);function st(t,e){return void 0===t&&(t=0),void 0===e&&(e=h.a),(!Object(ot.a)(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=h.a),new i.a(function(n){return n.add(e.schedule(ut,t,{subscriber:n,counter:0,period:t})),n})}function ut(t){var e=t.subscriber,n=t.counter,i=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:i},i)}var at=n(66),ct=new i.a(C.a);function lt(){return ct}var ft=n(38);function ht(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return X.a;var n=t[0],r=t.slice(1);return 1===t.length&&Object(M.a)(n)?ht.apply(void 0,n):new i.a(function(t){var e=function(){return t.add(ht.apply(void 0,r).subscribe(t))};return Object(Y.a)(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})})}function dt(t,e){return e?new i.a(function(n){var i=Object.keys(t),r=new w.a;return r.add(e.schedule(pt,0,{keys:i,index:0,subscriber:n,subscription:r,obj:t})),r}):new i.a(function(e){for(var n=Object.keys(t),i=0;i<n.length&&!e.closed;i++){var r=n[i];t.hasOwnProperty(r)&&e.next([r,t[r]])}e.complete()})}function pt(t){var e=t.keys,n=t.index,i=t.subscriber,r=t.subscription,o=t.obj;if(!i.closed)if(n<e.length){var s=e[n];i.next([s,o[s]]),r.add(this.schedule({keys:e,index:n+1,subscriber:i,subscription:r,obj:o}))}else i.complete()}var vt=n(75),mt=n(42),bt=n(16);function yt(t,e,n){return[Object(bt.a)(e,n)(new i.a(Object(mt.a)(t))),Object(bt.a)(Object(vt.a)(e,n))(new i.a(Object(mt.a)(t)))]}var gt=n(67);function _t(t,e,n){return void 0===t&&(t=0),new i.a(function(i){void 0===e&&(e=t,t=0);var r=0,o=t;if(n)return n.schedule(xt,0,{index:r,count:e,start:t,subscriber:i});for(;;){if(r++>=e){i.complete();break}if(i.next(o++),i.closed)break}})}function xt(t){var e=t.start,n=t.index,i=t.count,r=t.subscriber;n>=i?r.complete():(r.next(e),r.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}var wt=n(45),Et=n(68);function Tt(t,e){return new i.a(function(n){var i,r;try{i=t()}catch(t){return void n.error(t)}try{r=e(i)}catch(t){return void n.error(t)}var o=(r?Object(Y.a)(r):X.a).subscribe(n);return function(){o.unsubscribe(),i&&i.unsubscribe()}})}var St=n(49),Ct=n(69),Ot=n(14);n.d(e,"Observable",function(){return i.a}),n.d(e,"ConnectableObservable",function(){return r.a}),n.d(e,"GroupedObservable",function(){return o.a}),n.d(e,"observable",function(){return s.a}),n.d(e,"Subject",function(){return u.a}),n.d(e,"BehaviorSubject",function(){return a.a}),n.d(e,"ReplaySubject",function(){return c.a}),n.d(e,"AsyncSubject",function(){return l.a}),n.d(e,"asapScheduler",function(){return f.a}),n.d(e,"asyncScheduler",function(){return h.a}),n.d(e,"queueScheduler",function(){return d.a}),n.d(e,"animationFrameScheduler",function(){return y}),n.d(e,"VirtualTimeScheduler",function(){return g}),n.d(e,"VirtualAction",function(){return _}),n.d(e,"Scheduler",function(){return x.a}),n.d(e,"Subscription",function(){return w.a}),n.d(e,"Subscriber",function(){return E.a}),n.d(e,"Notification",function(){return T.a}),n.d(e,"NotificationKind",function(){return T.b}),n.d(e,"pipe",function(){return S.a}),n.d(e,"noop",function(){return C.a}),n.d(e,"identity",function(){return O.a}),n.d(e,"isObservable",function(){return I}),n.d(e,"ArgumentOutOfRangeError",function(){return A.a}),n.d(e,"EmptyError",function(){return N.a}),n.d(e,"ObjectUnsubscribedError",function(){return j.a}),n.d(e,"UnsubscriptionError",function(){return k.a}),n.d(e,"TimeoutError",function(){return L.a}),n.d(e,"bindCallback",function(){return F}),n.d(e,"bindNodeCallback",function(){return V}),n.d(e,"combineLatest",function(){return z.b}),n.d(e,"concat",function(){return G.a}),n.d(e,"defer",function(){return K.a}),n.d(e,"empty",function(){return X.b}),n.d(e,"forkJoin",function(){return Q}),n.d(e,"from",function(){return Y.a}),n.d(e,"fromEvent",function(){return tt}),n.d(e,"fromEventPattern",function(){return et}),n.d(e,"generate",function(){return nt}),n.d(e,"iif",function(){return rt}),n.d(e,"interval",function(){return st}),n.d(e,"merge",function(){return at.a}),n.d(e,"never",function(){return lt}),n.d(e,"of",function(){return ft.a}),n.d(e,"onErrorResumeNext",function(){return ht}),n.d(e,"pairs",function(){return dt}),n.d(e,"partition",function(){return yt}),n.d(e,"race",function(){return gt.a}),n.d(e,"range",function(){return _t}),n.d(e,"throwError",function(){return wt.a}),n.d(e,"timer",function(){return Et.a}),n.d(e,"using",function(){return Tt}),n.d(e,"zip",function(){return St.b}),n.d(e,"scheduled",function(){return Ct.a}),n.d(e,"EMPTY",function(){return X.a}),n.d(e,"NEVER",function(){return ct}),n.d(e,"config",function(){return Ot.a})},function(t,e,n){"use strict";n.r(e);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const i=new WeakMap,r=t=>(...e)=>{const n=t(...e);return i.set(n,!0),n},o=t=>"function"==typeof t&&i.has(t),s=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,u=(t,e,n=null,i=null)=>{let r=e;for(;r!==n;){const e=r.nextSibling;t.insertBefore(r,i),r=e}},a=(t,e,n=null)=>{let i=e;for(;i!==n;){const e=i.nextSibling;t.removeChild(i),i=e}},c={},l={},f=`{{lit-${String(Math.random()).slice(2)}}}`,h=`\x3c!--${f}--\x3e`,d=new RegExp(`${f}|${h}`),p="$lit$";class v{constructor(t,e){this.parts=[],this.element=e;let n=-1,i=0;const r=[],o=e=>{const s=e.content,u=document.createTreeWalker(s,133,null,!1);let a=0;for(;u.nextNode();){n++;const e=u.currentNode;if(1===e.nodeType){if(e.hasAttributes()){const r=e.attributes;let o=0;for(let t=0;t<r.length;t++)r[t].value.indexOf(f)>=0&&o++;for(;o-- >0;){const r=t.strings[i],o=y.exec(r)[2],s=o.toLowerCase()+p,u=e.getAttribute(s).split(d);this.parts.push({type:"attribute",index:n,name:o,strings:u}),e.removeAttribute(s),i+=u.length-1}}"TEMPLATE"===e.tagName&&o(e)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(f)>=0){const o=e.parentNode,s=t.split(d),u=s.length-1;for(let t=0;t<u;t++)o.insertBefore(""===s[t]?b():document.createTextNode(s[t]),e),this.parts.push({type:"node",index:++n});""===s[u]?(o.insertBefore(b(),e),r.push(e)):e.data=s[u],i+=u}}else if(8===e.nodeType)if(e.data===f){const t=e.parentNode;null!==e.previousSibling&&n!==a||(n++,t.insertBefore(b(),e)),a=n,this.parts.push({type:"node",index:n}),null===e.nextSibling?e.data="":(r.push(e),n--),i++}else{let t=-1;for(;-1!==(t=e.data.indexOf(f,t+1));)this.parts.push({type:"node",index:-1})}}};o(e);for(const t of r)t.parentNode.removeChild(t)}}const m=t=>-1!==t.index,b=()=>document.createComment(""),y=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F \x09\x0a\x0c\x0d"'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class g{constructor(t,e,n){this._parts=[],this.template=t,this.processor=e,this.options=n}update(t){let e=0;for(const n of this._parts)void 0!==n&&n.setValue(t[e]),e++;for(const t of this._parts)void 0!==t&&t.commit()}_clone(){const t=s?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=this.template.parts;let n=0,i=0;const r=t=>{const o=document.createTreeWalker(t,133,null,!1);let s=o.nextNode();for(;n<e.length&&null!==s;){const t=e[n];if(m(t))if(i===t.index){if("node"===t.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(s.previousSibling),this._parts.push(t)}else this._parts.push(...this.processor.handleAttributeExpressions(s,t.name,t.strings,this.options));n++}else i++,"TEMPLATE"===s.nodeName&&r(s.content),s=o.nextNode();else this._parts.push(void 0),n++}};return r(t),s&&(document.adoptNode(t),customElements.upgrade(t)),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */class _{constructor(t,e,n,i){this.strings=t,this.values=e,this.type=n,this.processor=i}getHTML(){const t=this.strings.length-1;let e="";for(let n=0;n<t;n++){const t=this.strings[n],i=y.exec(t);e+=i?t.substr(0,i.index)+i[1]+i[2]+p+i[3]+f:t+h}return e+this.strings[t]}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}class x extends _{getHTML(){return`<svg>${super.getHTML()}</svg>`}getTemplateElement(){const t=super.getTemplateElement(),e=t.content,n=e.firstChild;return e.removeChild(n),u(e,n.firstChild),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const w=t=>null===t||!("object"==typeof t||"function"==typeof t);class E{constructor(t,e,n){this.dirty=!0,this.element=t,this.name=e,this.strings=n,this.parts=[];for(let t=0;t<n.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new T(this)}_getValue(){const t=this.strings,e=t.length-1;let n="";for(let i=0;i<e;i++){n+=t[i];const e=this.parts[i];if(void 0!==e){const t=e.value;if(null!=t&&(Array.isArray(t)||"string"!=typeof t&&t[Symbol.iterator]))for(const e of t)n+="string"==typeof e?e:String(e);else n+="string"==typeof t?t:String(t)}}return n+=t[e]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class T{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===c||w(t)&&t===this.value||(this.value=t,o(t)||(this.committer.dirty=!0))}commit(){for(;o(this.value);){const t=this.value;this.value=c,t(this)}this.value!==c&&this.committer.commit()}}class S{constructor(t){this.value=void 0,this._pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(b()),this.endNode=t.appendChild(b())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t._insert(this.startNode=b()),t._insert(this.endNode=b())}insertAfterPart(t){t._insert(this.startNode=b()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this._pendingValue=t}commit(){for(;o(this._pendingValue);){const t=this._pendingValue;this._pendingValue=c,t(this)}const t=this._pendingValue;t!==c&&(w(t)?t!==this.value&&this._commitText(t):t instanceof _?this._commitTemplateResult(t):t instanceof Node?this._commitNode(t):Array.isArray(t)||t[Symbol.iterator]?this._commitIterable(t):t===l?(this.value=l,this.clear()):this._commitText(t))}_insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}_commitNode(t){this.value!==t&&(this.clear(),this._insert(t),this.value=t)}_commitText(t){const e=this.startNode.nextSibling;t=null==t?"":t,e===this.endNode.previousSibling&&3===e.nodeType?e.data=t:this._commitNode(document.createTextNode("string"==typeof t?t:String(t))),this.value=t}_commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof g&&this.value.template===e)this.value.update(t.values);else{const n=new g(e,t.processor,this.options),i=n._clone();n.update(t.values),this._commitNode(i),this.value=n}}_commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let n,i=0;for(const r of t)void 0===(n=e[i])&&(n=new S(this.options),e.push(n),0===i?n.appendIntoPart(this):n.insertAfterPart(e[i-1])),n.setValue(r),n.commit(),i++;i<e.length&&(e.length=i,this.clear(n&&n.endNode))}clear(t=this.startNode){a(this.startNode.parentNode,t.nextSibling,this.endNode)}}class C{constructor(t,e,n){if(this.value=void 0,this._pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=n}setValue(t){this._pendingValue=t}commit(){for(;o(this._pendingValue);){const t=this._pendingValue;this._pendingValue=c,t(this)}if(this._pendingValue===c)return;const t=!!this._pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name)),this.value=t,this._pendingValue=c}}class O extends E{constructor(t,e,n){super(t,e,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new I(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class I extends T{}let A=!1;try{const t={get capture(){return A=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}class N{constructor(t,e,n){this.value=void 0,this._pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=n,this._boundHandleEvent=(t=>this.handleEvent(t))}setValue(t){this._pendingValue=t}commit(){for(;o(this._pendingValue);){const t=this._pendingValue;this._pendingValue=c,t(this)}if(this._pendingValue===c)return;const t=this._pendingValue,e=this.value,n=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),i=null!=t&&(null==e||n);n&&this.element.removeEventListener(this.eventName,this._boundHandleEvent,this._options),i&&(this._options=j(t),this.element.addEventListener(this.eventName,this._boundHandleEvent,this._options)),this.value=t,this._pendingValue=c}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const j=t=>t&&(A?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */class k{handleAttributeExpressions(t,e,n,i){const r=e[0];if("."===r){return new O(t,e.slice(1),n).parts}return"@"===r?[new N(t,e.slice(1),i.eventContext)]:"?"===r?[new C(t,e.slice(1),n)]:new E(t,e,n).parts}handleTextExpression(t){return new S(t)}}const L=new k;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function D(t){let e=P.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},P.set(t.type,e));let n=e.stringsArray.get(t.strings);if(void 0!==n)return n;const i=t.strings.join(f);return void 0===(n=e.keyString.get(i))&&(n=new v(t,t.getTemplateElement()),e.keyString.set(i,n)),e.stringsArray.set(t.strings,n),n}const P=new Map,M=new WeakMap,R=(t,e,n)=>{let i=M.get(e);void 0===i&&(a(e,e.firstChild),M.set(e,i=new S(Object.assign({templateFactory:D},n))),i.appendInto(e)),i.setValue(t),i.commit()};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */n.d(e,"html",function(){return F}),n.d(e,"svg",function(){return H}),n.d(e,"DefaultTemplateProcessor",function(){return k}),n.d(e,"defaultTemplateProcessor",function(){return L}),n.d(e,"directive",function(){return r}),n.d(e,"isDirective",function(){return o}),n.d(e,"removeNodes",function(){return a}),n.d(e,"reparentNodes",function(){return u}),n.d(e,"noChange",function(){return c}),n.d(e,"nothing",function(){return l}),n.d(e,"AttributeCommitter",function(){return E}),n.d(e,"AttributePart",function(){return T}),n.d(e,"BooleanAttributePart",function(){return C}),n.d(e,"EventPart",function(){return N}),n.d(e,"isPrimitive",function(){return w}),n.d(e,"NodePart",function(){return S}),n.d(e,"PropertyCommitter",function(){return O}),n.d(e,"PropertyPart",function(){return I}),n.d(e,"parts",function(){return M}),n.d(e,"render",function(){return R}),n.d(e,"templateCaches",function(){return P}),n.d(e,"templateFactory",function(){return D}),n.d(e,"TemplateInstance",function(){return g}),n.d(e,"SVGTemplateResult",function(){return x}),n.d(e,"TemplateResult",function(){return _}),n.d(e,"createMarker",function(){return b}),n.d(e,"isTemplatePartActive",function(){return m}),n.d(e,"Template",function(){return v}),
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.0.0");const F=(t,...e)=>new _(t,e,"html",L),H=(t,...e)=>new x(t,e,"svg",L)},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var i=n(10),r=n(27),o=n(52);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(i.a)(n)?(t.pop(),Object(o.a)(t,n)):Object(r.a)(t)}},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var i=n(15);function r(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o(t)}function o(t){return t?1===t.length?t[0]:function(e){return t.reduce(function(t,e){return e(t)},e)}:i.a}},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var i="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()},function(t,e,n){"use strict";function i(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,e){return e+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}n.d(e,"a",function(){return r}),i.prototype=Object.create(Error.prototype);var r=i},function(t,e,n){"use strict";var i=n(72),r=n(34),o=n(19),s=n(20),u=n(73),a=n(74),c=n(50);n.d(e,"a",function(){return l});var l=function(t){if(t&&"function"==typeof t[s.a])return l=t,function(t){var e=l[s.a]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Object(u.a)(t))return Object(i.a)(t);if(Object(a.a)(t))return n=t,function(t){return n.then(function(e){t.closed||(t.next(e),t.complete())},function(e){return t.error(e)}).then(null,r.a),t};if(t&&"function"==typeof t[o.a])return e=t,function(t){for(var n=e[o.a]();;){var i=n.next();if(i.done){t.complete();break}if(t.next(i.value),t.closed)break}return"function"==typeof n.return&&t.add(function(){n.return&&n.return()}),t};var e,n,l,f=Object(c.a)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+f+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var i=n(0),r=n(1);function o(){return function(t){return t.lift(new s(t))}}var s=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var i=new u(t,n),r=e.subscribe(i);return i.closed||(i.connection=n.connect()),r},t}(),u=function(t){function e(e,n){var i=t.call(this,e)||this;return i.connectable=n,i}return i.b(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,i=t._connection;this.connection=null,!i||n&&i!==n||i.unsubscribe()}}else this.connection=null},e}(r.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return l});var i=n(0),r=n(6),o=n(70),s=n(5),u=n(63),a=n(22),c=n(71),l=function(t){function e(e,n,i){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this)||this;return r.scheduler=i,r._events=[],r._infiniteTimeWindow=!1,r._bufferSize=e<1?1:e,r._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(r._infiniteTimeWindow=!0,r.next=r.nextInfiniteTimeWindow):r.next=r.nextTimeWindow,r}return i.b(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new f(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,i=n?this._events:this._trimBufferThenGetEvents(),r=this.scheduler,o=i.length;if(this.closed)throw new a.a;if(this.isStopped||this.hasError?e=s.a.EMPTY:(this.observers.push(t),e=new c.a(this,t)),r&&t.add(t=new u.a(t,r)),n)for(var l=0;l<o&&!t.closed;l++)t.next(i[l]);else for(l=0;l<o&&!t.closed;l++)t.next(i[l].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||o.a).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,i=this._events,r=i.length,o=0;o<r&&!(t-i[o].time<n);)o++;return r>e&&(o=Math.max(o,r-e)),o>0&&i.splice(0,o),i},e}(r.a),f=function(){return function(t,e){this.time=t,this.value=e}}()},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=n(2);function r(t,e){return e?new i.a(function(n){return e.schedule(o,0,{error:t,subscriber:n})}):new i.a(function(e){return e.error(t)})}function o(t){var e=t.error;t.subscriber.error(e)}},function(t,e,n){"use strict";n.d(e,"b",function(){return l}),n.d(e,"a",function(){return f});var i=n(0),r=n(10),o=n(7),s=n(4),u=n(3),a=n(27),c={};function l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null,i=null;return Object(r.a)(t[t.length-1])&&(i=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(o.a)(t[0])&&(t=t[0]),Object(a.a)(t,i).lift(new f(n))}var f=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,n){var i=t.call(this,e)||this;return i.resultSelector=n,i.active=0,i.values=[],i.observables=[],i}return i.b(e,t),e.prototype._next=function(t){this.values.push(c),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var i=t[n];this.add(Object(u.a)(this,i,i,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n,i,r){var o=this.values,s=o[n],u=this.toRespond?s===c?--this.toRespond:this.toRespond:0;o[n]=e,0===u&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var i=n(23),r=n(18);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Object(i.a)(r.a,t)}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var i=n(2),r=n(12),o=n(11);function s(t){return new i.a(function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Object(r.a)(n):Object(o.b)()).subscribe(e)})}},function(t,e,n){"use strict";n.d(e,"b",function(){return l}),n.d(e,"a",function(){return f});var i=n(0),r=n(27),o=n(7),s=n(1),u=n(4),a=n(3),c=n(19);function l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),Object(r.a)(t,void 0).lift(new f(n))}var f=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,n,i){void 0===i&&(i=Object.create(null));var r=t.call(this,e)||this;return r.iterators=[],r.active=0,r.resultSelector="function"==typeof n?n:null,r.values=i,r}return i.b(e,t),e.prototype._next=function(t){var e=this.iterators;Object(o.a)(t)?e.push(new p(t)):"function"==typeof t[c.a]?e.push(new d(t[c.a]())):e.push(new v(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var i=t[n];if(i.stillUnsubscribed)this.destination.add(i.subscribe(i,n));else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,i=0;i<e;i++){if("function"==typeof(s=t[i]).hasValue&&!s.hasValue())return}var r=!1,o=[];for(i=0;i<e;i++){var s,u=(s=t[i]).next();if(s.hasCompleted()&&(r=!0),u.done)return void n.complete();o.push(u.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),r&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.a),d=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),p=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[c.a]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),v=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.parent=n,r.observable=i,r.stillUnsubscribed=!0,r.buffer=[],r.isComplete=!1,r}return i.b(e,t),e.prototype[c.a]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,n,i,r){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return Object(a.a)(this,this.observable,this,e)},e}(u.a)},function(t,e,n){"use strict";function i(t){return null!==t&&"object"==typeof t}n.d(e,"a",function(){return i})},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=n(1);function r(t){for(;t;){var e=t,n=e.closed,r=e.destination,o=e.isStopped;if(n||o)return!1;t=r&&r instanceof i.a?r:null}return!0}},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var i=n(2),r=n(5);function o(t,e){return new i.a(function(n){var i=new r.a,o=0;return i.add(e.schedule(function(){o!==t.length?(n.next(t[o++]),n.closed||i.add(this.schedule())):n.complete()})),i})}},function(t,e,n){"use strict";var i=n(0),r=1,o={};var s=function(t){var e=r++;return o[e]=t,Promise.resolve().then(function(){return function(t){var e=o[t];e&&e()}(e)}),e},u=function(t){delete o[t]},a=function(t){function e(e,n){var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i}return i.b(e,t),e.prototype.requestAsyncId=function(e,n,i){return void 0===i&&(i=0),null!==i&&i>0?t.prototype.requestAsyncId.call(this,e,n,i):(e.actions.push(this),e.scheduled||(e.scheduled=s(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,i){if(void 0===i&&(i=0),null!==i&&i>0||null===i&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,i);0===e.actions.length&&(u(n),e.scheduled=void 0)},e}(n(31).a),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i.b(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,i=-1,r=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++i<r&&(t=n.shift()));if(this.active=!1,e){for(;++i<r&&(t=n.shift());)t.unsubscribe();throw e}},e}(n(28).a);n.d(e,"a",function(){return l});var l=new c(a)},function(t,e,n){"use strict";n.d(e,"a",function(){return o});var i=n(14),r=n(34),o={closed:!0,next:function(t){},error:function(t){if(i.a.useDeprecatedSynchronousErrorHandling)throw t;Object(r.a)(t)},complete:function(){}}},function(t,e,n){"use strict";function i(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),i(n(90)),i(n(78))},function(t,e,n){var i,r;n(94),i=[n(93)],void 0===(r=function(t){return function(){var e,n,i,r=0,o={error:"error",info:"info",success:"success",warning:"warning"},s={clear:function(n,i){var r=f();e||u(r),a(n,r,i)||function(n){for(var i=e.children(),r=i.length-1;r>=0;r--)a(t(i[r]),n)}(r)},remove:function(n){var i=f();e||u(i),n&&0===t(":focus",n).length?h(n):e.children().length&&e.remove()},error:function(t,e,n){return l({type:o.error,iconClass:f().iconClasses.error,message:t,optionsOverride:n,title:e})},getContainer:u,info:function(t,e,n){return l({type:o.info,iconClass:f().iconClasses.info,message:t,optionsOverride:n,title:e})},options:{},subscribe:function(t){n=t},success:function(t,e,n){return l({type:o.success,iconClass:f().iconClasses.success,message:t,optionsOverride:n,title:e})},version:"2.1.4",warning:function(t,e,n){return l({type:o.warning,iconClass:f().iconClasses.warning,message:t,optionsOverride:n,title:e})}};return s;function u(n,i){return n||(n=f()),(e=t("#"+n.containerId)).length?e:(i&&(e=function(n){return(e=t("<div/>").attr("id",n.containerId).addClass(n.positionClass)).appendTo(t(n.target)),e}(n)),e)}function a(e,n,i){var r=!(!i||!i.force)&&i.force;return!(!e||!r&&0!==t(":focus",e).length||(e[n.hideMethod]({duration:n.hideDuration,easing:n.hideEasing,complete:function(){h(e)}}),0))}function c(t){n&&n(t)}function l(n){var o=f(),s=n.iconClass||o.iconClass;if(void 0!==n.optionsOverride&&(o=t.extend(o,n.optionsOverride),s=n.optionsOverride.iconClass||s),!function(t,e){if(t.preventDuplicates){if(e.message===i)return!0;i=e.message}return!1}(o,n)){r++,e=u(o,!0);var a=null,l=t("<div/>"),d=t("<div/>"),p=t("<div/>"),v=t("<div/>"),m=t(o.closeHtml),b={intervalId:null,hideEta:null,maxHideTime:null},y={toastId:r,state:"visible",startTime:new Date,options:o,map:n};return n.iconClass&&l.addClass(o.toastClass).addClass(s),function(){if(n.title){var t=n.title;o.escapeHtml&&(t=g(n.title)),d.append(t).addClass(o.titleClass),l.append(d)}}(),function(){if(n.message){var t=n.message;o.escapeHtml&&(t=g(n.message)),p.append(t).addClass(o.messageClass),l.append(p)}}(),o.closeButton&&(m.addClass(o.closeClass).attr("role","button"),l.prepend(m)),o.progressBar&&(v.addClass(o.progressClass),l.prepend(v)),o.rtl&&l.addClass("rtl"),o.newestOnTop?e.prepend(l):e.append(l),function(){var t="";switch(n.iconClass){case"toast-success":case"toast-info":t="polite";break;default:t="assertive"}l.attr("aria-live",t)}(),l.hide(),l[o.showMethod]({duration:o.showDuration,easing:o.showEasing,complete:o.onShown}),o.timeOut>0&&(a=setTimeout(_,o.timeOut),b.maxHideTime=parseFloat(o.timeOut),b.hideEta=(new Date).getTime()+b.maxHideTime,o.progressBar&&(b.intervalId=setInterval(E,10))),o.closeOnHover&&l.hover(w,x),!o.onclick&&o.tapToDismiss&&l.click(_),o.closeButton&&m&&m.click(function(t){t.stopPropagation?t.stopPropagation():void 0!==t.cancelBubble&&!0!==t.cancelBubble&&(t.cancelBubble=!0),o.onCloseClick&&o.onCloseClick(t),_(!0)}),o.onclick&&l.click(function(t){o.onclick(t),_()}),c(y),o.debug&&console&&console.log(y),l}function g(t){return null==t&&(t=""),t.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function _(e){var n=e&&!1!==o.closeMethod?o.closeMethod:o.hideMethod,i=e&&!1!==o.closeDuration?o.closeDuration:o.hideDuration,r=e&&!1!==o.closeEasing?o.closeEasing:o.hideEasing;if(!t(":focus",l).length||e)return clearTimeout(b.intervalId),l[n]({duration:i,easing:r,complete:function(){h(l),clearTimeout(a),o.onHidden&&"hidden"!==y.state&&o.onHidden(),y.state="hidden",y.endTime=new Date,c(y)}})}function x(){(o.timeOut>0||o.extendedTimeOut>0)&&(a=setTimeout(_,o.extendedTimeOut),b.maxHideTime=parseFloat(o.extendedTimeOut),b.hideEta=(new Date).getTime()+b.maxHideTime)}function w(){clearTimeout(a),b.hideEta=0,l.stop(!0,!0)[o.showMethod]({duration:o.showDuration,easing:o.showEasing})}function E(){var t=(b.hideEta-(new Date).getTime())/b.maxHideTime*100;v.width(t+"%")}}function f(){return t.extend({},{tapToDismiss:!0,toastClass:"toast",containerId:"toast-container",debug:!1,showMethod:"fadeIn",showDuration:300,showEasing:"swing",onShown:void 0,hideMethod:"fadeOut",hideDuration:1e3,hideEasing:"swing",onHidden:void 0,closeMethod:!1,closeDuration:!1,closeEasing:!1,closeOnHover:!0,extendedTimeOut:1e3,iconClasses:{error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"},iconClass:"toast-info",positionClass:"toast-top-right",timeOut:5e3,titleClass:"toast-title",messageClass:"toast-message",escapeHtml:!1,target:"body",closeHtml:'<button type="button">&times;</button>',closeClass:"toast-close-button",newestOnTop:!0,preventDuplicates:!1,progressBar:!1,progressClass:"toast-progress",rtl:!1},s.options)}function h(t){e||(e=u()),t.is(":visible")||(t.remove(),t=null,0===e.children().length&&(e.remove(),i=void 0))}}()}.apply(e,i))||(t.exports=r)},function(t,e,n){"use strict";n.r(e);var i=n(0),r=n(4),o=n(3);function s(t){return function(e){return e.lift(new u(t))}}var u=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new a(t,this.durationSelector))},t}(),a=function(t){function e(e,n){var i=t.call(this,e)||this;return i.durationSelector=n,i.hasValue=!1,i}return i.b(e,t),e.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var e=void 0;try{e=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var n=Object(o.a)(this,e);!n||n.closed?this.clearThrottle():this.add(this.throttled=n)}},e.prototype.clearThrottle=function(){var t=this.value,e=this.hasValue,n=this.throttled;n&&(this.remove(n),this.throttled=null,n.unsubscribe()),e&&(this.value=null,this.hasValue=!1,this.destination.next(t))},e.prototype.notifyNext=function(t,e,n,i){this.clearThrottle()},e.prototype.notifyComplete=function(){this.clearThrottle()},e}(r.a),c=n(8),l=n(68);function f(t,e){return void 0===e&&(e=c.a),s(function(){return Object(l.a)(t,e)})}function h(t){return function(e){return e.lift(new d(t))}}var d=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,e){return e.subscribe(new p(t,this.closingNotifier))},t}(),p=function(t){function e(e,n){var i=t.call(this,e)||this;return i.buffer=[],i.add(Object(o.a)(i,n)),i}return i.b(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype.notifyNext=function(t,e,n,i,r){var o=this.buffer;this.buffer=[],this.destination.next(o)},e}(r.a),v=n(1);function m(t,e){return void 0===e&&(e=null),function(n){return n.lift(new b(t,e))}}var b=function(){function t(t,e){this.bufferSize=t,this.startBufferEvery=e,this.subscriberClass=e&&t!==e?g:y}return t.prototype.call=function(t,e){return e.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),y=function(t){function e(e,n){var i=t.call(this,e)||this;return i.bufferSize=n,i.buffer=[],i}return i.b(e,t),e.prototype._next=function(t){var e=this.buffer;e.push(t),e.length==this.bufferSize&&(this.destination.next(e),this.buffer=[])},e.prototype._complete=function(){var e=this.buffer;e.length>0&&this.destination.next(e),t.prototype._complete.call(this)},e}(v.a),g=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.bufferSize=n,r.startBufferEvery=i,r.buffers=[],r.count=0,r}return i.b(e,t),e.prototype._next=function(t){var e=this.bufferSize,n=this.startBufferEvery,i=this.buffers,r=this.count;this.count++,r%n==0&&i.push([]);for(var o=i.length;o--;){var s=i[o];s.push(t),s.length===e&&(i.splice(o,1),this.destination.next(s))}},e.prototype._complete=function(){for(var e=this.buffers,n=this.destination;e.length>0;){var i=e.shift();i.length>0&&n.next(i)}t.prototype._complete.call(this)},e}(v.a),_=n(10);function x(t){var e=arguments.length,n=c.a;Object(_.a)(arguments[arguments.length-1])&&(n=arguments[arguments.length-1],e--);var i=null;e>=2&&(i=arguments[1]);var r=Number.POSITIVE_INFINITY;return e>=3&&(r=arguments[2]),function(e){return e.lift(new w(t,i,r,n))}}var w=function(){function t(t,e,n,i){this.bufferTimeSpan=t,this.bufferCreationInterval=e,this.maxBufferSize=n,this.scheduler=i}return t.prototype.call=function(t,e){return e.subscribe(new T(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),E=function(){return function(){this.buffer=[]}}(),T=function(t){function e(e,n,i,r,o){var s=t.call(this,e)||this;s.bufferTimeSpan=n,s.bufferCreationInterval=i,s.maxBufferSize=r,s.scheduler=o,s.contexts=[];var u=s.openContext();if(s.timespanOnly=null==i||i<0,s.timespanOnly){var a={subscriber:s,context:u,bufferTimeSpan:n};s.add(u.closeAction=o.schedule(S,n,a))}else{var c={subscriber:s,context:u},l={bufferTimeSpan:n,bufferCreationInterval:i,subscriber:s,scheduler:o};s.add(u.closeAction=o.schedule(O,n,c)),s.add(o.schedule(C,i,l))}return s}return i.b(e,t),e.prototype._next=function(t){for(var e,n=this.contexts,i=n.length,r=0;r<i;r++){var o=n[r],s=o.buffer;s.push(t),s.length==this.maxBufferSize&&(e=o)}e&&this.onBufferFull(e)},e.prototype._error=function(e){this.contexts.length=0,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts,n=this.destination;e.length>0;){var i=e.shift();n.next(i.buffer)}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.contexts=null},e.prototype.onBufferFull=function(t){this.closeContext(t);var e=t.closeAction;if(e.unsubscribe(),this.remove(e),!this.closed&&this.timespanOnly){t=this.openContext();var n=this.bufferTimeSpan,i={subscriber:this,context:t,bufferTimeSpan:n};this.add(t.closeAction=this.scheduler.schedule(S,n,i))}},e.prototype.openContext=function(){var t=new E;return this.contexts.push(t),t},e.prototype.closeContext=function(t){this.destination.next(t.buffer);var e=this.contexts;(e?e.indexOf(t):-1)>=0&&e.splice(e.indexOf(t),1)},e}(v.a);function S(t){var e=t.subscriber,n=t.context;n&&e.closeContext(n),e.closed||(t.context=e.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function C(t){var e=t.bufferCreationInterval,n=t.bufferTimeSpan,i=t.subscriber,r=t.scheduler,o=i.openContext();i.closed||(i.add(o.closeAction=r.schedule(O,n,{subscriber:i,context:o})),this.schedule(t,e))}function O(t){var e=t.subscriber,n=t.context;e.closeContext(n)}var I=n(5);function A(t,e){return function(n){return n.lift(new N(t,e))}}var N=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new j(t,this.openings,this.closingSelector))},t}(),j=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.openings=n,r.closingSelector=i,r.contexts=[],r.add(Object(o.a)(r,n)),r}return i.b(e,t),e.prototype._next=function(t){for(var e=this.contexts,n=e.length,i=0;i<n;i++)e[i].buffer.push(t)},e.prototype._error=function(e){for(var n=this.contexts;n.length>0;){var i=n.shift();i.subscription.unsubscribe(),i.buffer=null,i.subscription=null}this.contexts=null,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts;e.length>0;){var n=e.shift();this.destination.next(n.buffer),n.subscription.unsubscribe(),n.buffer=null,n.subscription=null}this.contexts=null,t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,i,r){t?this.closeBuffer(t):this.openBuffer(e)},e.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},e.prototype.openBuffer=function(t){try{var e=this.closingSelector.call(this,t);e&&this.trySubscribe(e)}catch(t){this._error(t)}},e.prototype.closeBuffer=function(t){var e=this.contexts;if(e&&t){var n=t.buffer,i=t.subscription;this.destination.next(n),e.splice(e.indexOf(t),1),this.remove(i),i.unsubscribe()}},e.prototype.trySubscribe=function(t){var e=this.contexts,n=new I.a,i={buffer:[],subscription:n};e.push(i);var r=Object(o.a)(this,t,i);!r||r.closed?this.closeBuffer(i):(r.context=i,this.add(r),n.add(r))},e}(r.a);function k(t){return function(e){return e.lift(new L(t))}}var L=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new D(t,this.closingSelector))},t}(),D=function(t){function e(e,n){var i=t.call(this,e)||this;return i.closingSelector=n,i.subscribing=!1,i.openBuffer(),i}return i.b(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype._complete=function(){var e=this.buffer;e&&this.destination.next(e),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},e.prototype.notifyNext=function(t,e,n,i,r){this.openBuffer()},e.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},e.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var e,n=this.buffer;this.buffer&&this.destination.next(n),this.buffer=[];try{e=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new I.a,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add(Object(o.a)(this,e)),this.subscribing=!1},e}(r.a),P=n(13);function M(t){return function(e){var n=new R(t),i=e.lift(n);return n.caught=i}}var R=function(){function t(t){this.selector=t}return t.prototype.call=function(t,e){return e.subscribe(new F(t,this.selector,this.caught))},t}(),F=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.selector=n,r.caught=i,r}return i.b(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=void 0;try{n=this.selector(e,this.caught)}catch(e){return void t.prototype.error.call(this,e)}this._unsubscribeAndRecycle();var i=new P.a(this,void 0,void 0);this.add(i),Object(o.a)(this,n,void 0,void 0,i)}},e}(r.a),H=n(46);function B(t){return function(e){return e.lift(new H.a(t))}}var V=n(7),q=n(12);function U(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null;return"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(V.a)(t[0])&&(t=t[0].slice()),function(e){return e.lift.call(Object(q.a)([e].concat(t)),new H.a(n))}}var W=n(33);function z(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(W.a.apply(void 0,[e].concat(t)))}}var G=n(65),K=n(23);function X(t,e){return Object(K.a)(t,e,1)}function $(t,e){return X(function(){return t},e)}function Y(t){return function(e){return e.lift(new Q(t,e))}}var Q=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new J(t,this.predicate,this.source))},t}(),J=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.predicate=n,r.source=i,r.count=0,r.index=0,r}return i.b(e,t),e.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},e.prototype._tryPredicate=function(t){var e;try{e=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e&&this.count++},e.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},e}(v.a);function Z(t){return function(e){return e.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new et(t,this.durationSelector))},t}(),et=function(t){function e(e,n){var i=t.call(this,e)||this;return i.durationSelector=n,i.hasValue=!1,i.durationSubscription=null,i}return i.b(e,t),e.prototype._next=function(t){try{var e=this.durationSelector.call(this,t);e&&this._tryNext(t,e)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.emitValue(),this.destination.complete()},e.prototype._tryNext=function(t,e){var n=this.durationSubscription;this.value=t,this.hasValue=!0,n&&(n.unsubscribe(),this.remove(n)),(n=Object(o.a)(this,e))&&!n.closed&&this.add(this.durationSubscription=n)},e.prototype.notifyNext=function(t,e,n,i,r){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){if(this.hasValue){var e=this.value,n=this.durationSubscription;n&&(this.durationSubscription=null,n.unsubscribe(),this.remove(n)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,e)}},e}(r.a);function nt(t,e){return void 0===e&&(e=c.a),function(n){return n.lift(new it(t,e))}}var it=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new rt(t,this.dueTime,this.scheduler))},t}(),rt=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.dueTime=n,r.scheduler=i,r.debouncedSubscription=null,r.lastValue=null,r.hasValue=!1,r}return i.b(e,t),e.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},e.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},e.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},e.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},e}(v.a);function ot(t){t.debouncedNext()}function st(t){return void 0===t&&(t=null),function(e){return e.lift(new ut(t))}}var ut=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,e){return e.subscribe(new at(t,this.defaultValue))},t}(),at=function(t){function e(e,n){var i=t.call(this,e)||this;return i.defaultValue=n,i.isEmpty=!0,i}return i.b(e,t),e.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},e.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},e}(v.a);function ct(t){return t instanceof Date&&!isNaN(+t)}var lt=n(17);function ft(t,e){void 0===e&&(e=c.a);var n=ct(t)?+t-e.now():Math.abs(t);return function(t){return t.lift(new ht(n,e))}}var ht=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new dt(t,this.delay,this.scheduler))},t}(),dt=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.delay=n,r.scheduler=i,r.queue=[],r.active=!1,r.errored=!1,r}return i.b(e,t),e.dispatch=function(t){for(var e=t.source,n=e.queue,i=t.scheduler,r=t.destination;n.length>0&&n[0].time-i.now()<=0;)n.shift().notification.observe(r);if(n.length>0){var o=Math.max(0,n[0].time-i.now());this.schedule(t,o)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,n=new pt(e.now()+this.delay,t);this.queue.push(n),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(lt.a.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(lt.a.createComplete()),this.unsubscribe()},e}(v.a),pt=function(){return function(t,e){this.time=t,this.notification=e}}(),vt=n(2);function mt(t,e){return e?function(n){return new gt(n,e).lift(new bt(t))}:function(e){return e.lift(new bt(t))}}var bt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new yt(t,this.delayDurationSelector))},t}(),yt=function(t){function e(e,n){var i=t.call(this,e)||this;return i.delayDurationSelector=n,i.completed=!1,i.delayNotifierSubscriptions=[],i.index=0,i}return i.b(e,t),e.prototype.notifyNext=function(t,e,n,i,r){this.destination.next(t),this.removeSubscription(r),this.tryComplete()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){var e=this.removeSubscription(t);e&&this.destination.next(e),this.tryComplete()},e.prototype._next=function(t){var e=this.index++;try{var n=this.delayDurationSelector(t,e);n&&this.tryDelay(n,t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},e.prototype.removeSubscription=function(t){t.unsubscribe();var e=this.delayNotifierSubscriptions.indexOf(t);return-1!==e&&this.delayNotifierSubscriptions.splice(e,1),t.outerValue},e.prototype.tryDelay=function(t,e){var n=Object(o.a)(this,t,e);n&&!n.closed&&(this.destination.add(n),this.delayNotifierSubscriptions.push(n))},e.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},e}(r.a),gt=function(t){function e(e,n){var i=t.call(this)||this;return i.source=e,i.subscriptionDelay=n,i}return i.b(e,t),e.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new _t(t,this.source))},e}(vt.a),_t=function(t){function e(e,n){var i=t.call(this)||this;return i.parent=e,i.source=n,i.sourceSubscribed=!1,i}return i.b(e,t),e.prototype._next=function(t){this.subscribeToSource()},e.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},e.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},e.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},e}(v.a);function xt(){return function(t){return t.lift(new wt)}}var wt=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Et(t))},t}(),Et=function(t){function e(e){return t.call(this,e)||this}return i.b(e,t),e.prototype._next=function(t){t.observe(this.destination)},e}(v.a);function Tt(t,e){return function(n){return n.lift(new St(t,e))}}var St=function(){function t(t,e){this.keySelector=t,this.flushes=e}return t.prototype.call=function(t,e){return e.subscribe(new Ct(t,this.keySelector,this.flushes))},t}(),Ct=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.keySelector=n,r.values=new Set,i&&r.add(Object(o.a)(r,i)),r}return i.b(e,t),e.prototype.notifyNext=function(t,e,n,i,r){this.values.clear()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},e.prototype._useKeySelector=function(t){var e,n=this.destination;try{e=this.keySelector(t)}catch(t){return void n.error(t)}this._finalizeNext(e,t)},e.prototype._finalizeNext=function(t,e){var n=this.values;n.has(t)||(n.add(t),this.destination.next(e))},e}(r.a);function Ot(t,e){return function(n){return n.lift(new It(t,e))}}var It=function(){function t(t,e){this.compare=t,this.keySelector=e}return t.prototype.call=function(t,e){return e.subscribe(new At(t,this.compare,this.keySelector))},t}(),At=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.keySelector=i,r.hasKey=!1,"function"==typeof n&&(r.compare=n),r}return i.b(e,t),e.prototype.compare=function(t,e){return t===e},e.prototype._next=function(t){var e;try{var n=this.keySelector;e=n?n(t):t}catch(t){return this.destination.error(t)}var i=!1;if(this.hasKey)try{i=(0,this.compare)(this.key,e)}catch(t){return this.destination.error(t)}else this.hasKey=!0;i||(this.key=e,this.destination.next(t))},e}(v.a);function Nt(t,e){return Ot(function(n,i){return e?e(n[t],i[t]):n[t]===i[t]})}var jt=n(24),kt=n(16),Lt=n(26);function Dt(t){return void 0===t&&(t=Rt),function(e){return e.lift(new Pt(t))}}var Pt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,e){return e.subscribe(new Mt(t,this.errorFactory))},t}(),Mt=function(t){function e(e,n){var i=t.call(this,e)||this;return i.errorFactory=n,i.hasValue=!1,i}return i.b(e,t),e.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},e.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(e){t=e}this.destination.error(t)},e}(v.a);function Rt(){return new Lt.a}var Ft=n(11);function Ht(t){return function(e){return 0===t?Object(Ft.b)():e.lift(new Bt(t))}}var Bt=function(){function t(t){if(this.total=t,this.total<0)throw new jt.a}return t.prototype.call=function(t,e){return e.subscribe(new Vt(t,this.total))},t}(),Vt=function(t){function e(e,n){var i=t.call(this,e)||this;return i.total=n,i.count=0,i}return i.b(e,t),e.prototype._next=function(t){var e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))},e}(v.a);function qt(t,e){if(t<0)throw new jt.a;var n=arguments.length>=2;return function(i){return i.pipe(Object(kt.a)(function(e,n){return n===t}),Ht(1),n?st(e):Dt(function(){return new jt.a}))}}var Ut=n(38);function Wt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return Object(W.a)(e,Ut.a.apply(void 0,t))}}function zt(t,e){return function(n){return n.lift(new Gt(t,e,n))}}var Gt=function(){function t(t,e,n){this.predicate=t,this.thisArg=e,this.source=n}return t.prototype.call=function(t,e){return e.subscribe(new Kt(t,this.predicate,this.thisArg,this.source))},t}(),Kt=function(t){function e(e,n,i,r){var o=t.call(this,e)||this;return o.predicate=n,o.thisArg=i,o.source=r,o.index=0,o.thisArg=i||o,o}return i.b(e,t),e.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},e.prototype._next=function(t){var e=!1;try{e=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e||this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(v.a);function Xt(){return function(t){return t.lift(new $t)}}var $t=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Yt(t))},t}(),Yt=function(t){function e(e){var n=t.call(this,e)||this;return n.hasCompleted=!1,n.hasSubscription=!1,n}return i.b(e,t),e.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add(Object(o.a)(this,t)))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},e.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(r.a),Qt=n(9);function Jt(t,e){return e?function(n){return n.pipe(Jt(function(n,i){return Object(q.a)(t(n,i)).pipe(Object(Qt.a)(function(t,r){return e(n,t,i,r)}))}))}:function(e){return e.lift(new Zt(t))}}var Zt=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new te(t,this.project))},t}(),te=function(t){function e(e,n){var i=t.call(this,e)||this;return i.project=n,i.hasSubscription=!1,i.hasCompleted=!1,i.index=0,i}return i.b(e,t),e.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},e.prototype.tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var i=new P.a(this,void 0,void 0);this.destination.add(i),Object(o.a)(this,t,e,n,i)},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,i,r){this.destination.next(e)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(r.a);function ee(t,e,n){return void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=void 0),e=(e||0)<1?Number.POSITIVE_INFINITY:e,function(i){return i.lift(new ne(t,e,n))}}var ne=function(){function t(t,e,n){this.project=t,this.concurrent=e,this.scheduler=n}return t.prototype.call=function(t,e){return e.subscribe(new ie(t,this.project,this.concurrent,this.scheduler))},t}(),ie=function(t){function e(e,n,i,r){var o=t.call(this,e)||this;return o.project=n,o.concurrent=i,o.scheduler=r,o.index=0,o.active=0,o.hasCompleted=!1,i<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return i.b(e,t),e.dispatch=function(t){var e=t.subscriber,n=t.result,i=t.value,r=t.index;e.subscribeToProjection(n,i,r)},e.prototype._next=function(t){var n=this.destination;if(n.closed)this._complete();else{var i=this.index++;if(this.active<this.concurrent){n.next(t);try{var r=(0,this.project)(t,i);if(this.scheduler){var o={subscriber:this,result:r,value:t,index:i};this.destination.add(this.scheduler.schedule(e.dispatch,0,o))}else this.subscribeToProjection(r,t,i)}catch(t){n.error(t)}}else this.buffer.push(t)}},e.prototype.subscribeToProjection=function(t,e,n){this.active++,this.destination.add(Object(o.a)(this,t,e,n))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,i,r){this._next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e&&e.length>0&&this._next(e.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},e}(r.a);function re(t){return function(e){return e.lift(new oe(t))}}var oe=function(){function t(t){this.callback=t}return t.prototype.call=function(t,e){return e.subscribe(new se(t,this.callback))},t}(),se=function(t){function e(e,n){var i=t.call(this,e)||this;return i.add(new I.a(n)),i}return i.b(e,t),e}(v.a);function ue(t,e){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(n){return n.lift(new ae(t,n,!1,e))}}var ae=function(){function t(t,e,n,i){this.predicate=t,this.source=e,this.yieldIndex=n,this.thisArg=i}return t.prototype.call=function(t,e){return e.subscribe(new ce(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),ce=function(t){function e(e,n,i,r,o){var s=t.call(this,e)||this;return s.predicate=n,s.source=i,s.yieldIndex=r,s.thisArg=o,s.index=0,s}return i.b(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete(),this.unsubscribe()},e.prototype._next=function(t){var e=this.predicate,n=this.thisArg,i=this.index++;try{e.call(n||this,t,i,this.source)&&this.notifyComplete(this.yieldIndex?i:t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},e}(v.a);function le(t,e){return function(n){return n.lift(new ae(t,n,!0,e))}}var fe=n(18);function he(t,e){var n=arguments.length>=2;return function(i){return i.pipe(t?Object(kt.a)(function(e,n){return t(e,n,i)}):fe.a,Ht(1),n?st(e):Dt(function(){return new Lt.a}))}}var de=n(59);function pe(){return function(t){return t.lift(new ve)}}var ve=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new me(t))},t}(),me=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i.b(e,t),e.prototype._next=function(t){},e}(v.a);function be(){return function(t){return t.lift(new ye)}}var ye=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new ge(t))},t}(),ge=function(t){function e(e){return t.call(this,e)||this}return i.b(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype._next=function(t){this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(v.a);function _e(t){return function(e){return 0===t?Object(Ft.b)():e.lift(new xe(t))}}var xe=function(){function t(t){if(this.total=t,this.total<0)throw new jt.a}return t.prototype.call=function(t,e){return e.subscribe(new we(t,this.total))},t}(),we=function(t){function e(e,n){var i=t.call(this,e)||this;return i.total=n,i.ring=new Array,i.count=0,i}return i.b(e,t),e.prototype._next=function(t){var e=this.ring,n=this.total,i=this.count++;e.length<n?e.push(t):e[i%n]=t},e.prototype._complete=function(){var t=this.destination,e=this.count;if(e>0)for(var n=this.count>=this.total?this.total:this.count,i=this.ring,r=0;r<n;r++){var o=e++%n;t.next(i[o])}t.complete()},e}(v.a);function Ee(t,e){var n=arguments.length>=2;return function(i){return i.pipe(t?Object(kt.a)(function(e,n){return t(e,n,i)}):fe.a,_e(1),n?st(e):Dt(function(){return new Lt.a}))}}function Te(t){return function(e){return e.lift(new Se(t))}}var Se=function(){function t(t){this.value=t}return t.prototype.call=function(t,e){return e.subscribe(new Ce(t,this.value))},t}(),Ce=function(t){function e(e,n){var i=t.call(this,e)||this;return i.value=n,i}return i.b(e,t),e.prototype._next=function(t){this.destination.next(this.value)},e}(v.a);function Oe(){return function(t){return t.lift(new Ie)}}var Ie=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ae(t))},t}(),Ae=function(t){function e(e){return t.call(this,e)||this}return i.b(e,t),e.prototype._next=function(t){this.destination.next(lt.a.createNext(t))},e.prototype._error=function(t){var e=this.destination;e.next(lt.a.createError(t)),e.complete()},e.prototype._complete=function(){var t=this.destination;t.next(lt.a.createComplete()),t.complete()},e}(v.a);function Ne(t,e){var n=!1;return arguments.length>=2&&(n=!0),function(i){return i.lift(new je(t,e,n))}}var je=function(){function t(t,e,n){void 0===n&&(n=!1),this.accumulator=t,this.seed=e,this.hasSeed=n}return t.prototype.call=function(t,e){return e.subscribe(new ke(t,this.accumulator,this.seed,this.hasSeed))},t}(),ke=function(t){function e(e,n,i,r){var o=t.call(this,e)||this;return o.accumulator=n,o._seed=i,o.hasSeed=r,o.index=0,o}return i.b(e,t),Object.defineProperty(e.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),e.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.accumulator(this.seed,t,n)}catch(t){this.destination.error(t)}this.seed=e,this.destination.next(e)},e}(v.a),Le=n(39);function De(t,e){return arguments.length>=2?function(n){return Object(Le.a)(Ne(t,e),_e(1),st(e))(n)}:function(e){return Object(Le.a)(Ne(function(e,n,i){return t(e,n,i+1)}),_e(1))(e)}}function Pe(t){return De("function"==typeof t?function(e,n){return t(e,n)>0?e:n}:function(t,e){return t>e?t:e})}var Me=n(66);function Re(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(Me.a.apply(void 0,[e].concat(t)))}}var Fe=n(47);function He(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?Object(K.a)(function(){return t},e,n):("number"==typeof e&&(n=e),Object(K.a)(function(){return t},n))}function Be(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),function(i){return i.lift(new Ve(t,e,n))}}var Ve=function(){function t(t,e,n){this.accumulator=t,this.seed=e,this.concurrent=n}return t.prototype.call=function(t,e){return e.subscribe(new qe(t,this.accumulator,this.seed,this.concurrent))},t}(),qe=function(t){function e(e,n,i,r){var o=t.call(this,e)||this;return o.accumulator=n,o.acc=i,o.concurrent=r,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return i.b(e,t),e.prototype._next=function(t){if(this.active<this.concurrent){var e=this.index++,n=this.destination,i=void 0;try{i=(0,this.accumulator)(this.acc,t,e)}catch(t){return n.error(t)}this.active++,this._innerSub(i,t,e)}else this.buffer.push(t)},e.prototype._innerSub=function(t,e,n){var i=new P.a(this,void 0,void 0);this.destination.add(i),Object(o.a)(this,t,e,n,i)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,i,r){var o=this.destination;this.acc=e,this.hasValue=!0,o.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},e}(r.a);function Ue(t){return De("function"==typeof t?function(e,n){return t(e,n)<0?e:n}:function(t,e){return t<e?t:e})}var We=n(61);function ze(t,e){return function(n){var i;if(i="function"==typeof t?t:function(){return t},"function"==typeof e)return n.lift(new Ge(i,e));var r=Object.create(n,We.b);return r.source=n,r.subjectFactory=i,r}}var Ge=function(){function t(t,e){this.subjectFactory=t,this.selector=e}return t.prototype.call=function(t,e){var n=this.selector,i=this.subjectFactory(),r=n(i).subscribe(t);return r.add(e.subscribe(i)),r},t}(),Ke=n(63);function Xe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===t.length&&Object(V.a)(t[0])&&(t=t[0]),function(e){return e.lift(new $e(t))}}var $e=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,e){return e.subscribe(new Ye(t,this.nextSources))},t}(),Ye=function(t){function e(e,n){var i=t.call(this,e)||this;return i.destination=e,i.nextSources=n,i}return i.b(e,t),e.prototype.notifyError=function(t,e){this.subscribeToNextSource()},e.prototype.notifyComplete=function(t){this.subscribeToNextSource()},e.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},e.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},e.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var e=new P.a(this,void 0,void 0);this.destination.add(e),Object(o.a)(this,t,void 0,void 0,e)}else this.destination.complete()},e}(r.a);function Qe(){return function(t){return t.lift(new Je)}}var Je=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ze(t))},t}(),Ze=function(t){function e(e){var n=t.call(this,e)||this;return n.hasPrev=!1,n}return i.b(e,t),e.prototype._next=function(t){var e;this.hasPrev?e=[this.prev,t]:this.hasPrev=!0,this.prev=t,e&&this.destination.next(e)},e}(v.a),tn=n(75);function en(t,e){return function(n){return[Object(kt.a)(t,e)(n),Object(kt.a)(Object(tn.a)(t,e))(n)]}}function nn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.length;if(0===n)throw new Error("list of properties cannot be empty.");return function(e){return Object(Qt.a)(function(t,e){return function(n){for(var i=n,r=0;r<e;r++){var o=i[t[r]];if(void 0===o)return;i=o}return i}}(t,n))(e)}}var rn=n(6);function on(t){return t?ze(function(){return new rn.a},t):ze(new rn.a)}var sn=n(62);function un(t){return function(e){return ze(new sn.a(t))(e)}}var an=n(29);function cn(){return function(t){return ze(new an.a)(t)}}var ln=n(44);function fn(t,e,n,i){n&&"function"!=typeof n&&(i=n);var r="function"==typeof n?n:void 0,o=new ln.a(t,e,i);return function(t){return ze(function(){return o},r)(t)}}var hn=n(67);function dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return 1===t.length&&Object(V.a)(t[0])&&(t=t[0]),e.lift.call(hn.a.apply(void 0,[e].concat(t)))}}function pn(t){return void 0===t&&(t=-1),function(e){return 0===t?Object(Ft.b)():t<0?e.lift(new vn(-1,e)):e.lift(new vn(t-1,e))}}var vn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new mn(t,this.count,this.source))},t}(),mn=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.count=n,r.source=i,r}return i.b(e,t),e.prototype.complete=function(){if(!this.isStopped){var e=this.source,n=this.count;if(0===n)return t.prototype.complete.call(this);n>-1&&(this.count=n-1),e.subscribe(this._unsubscribeAndRecycle())}},e}(v.a);function bn(t){return function(e){return e.lift(new yn(t))}}var yn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new gn(t,this.notifier,e))},t}(),gn=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.notifier=n,r.source=i,r.sourceIsBeingSubscribedTo=!0,r}return i.b(e,t),e.prototype.notifyNext=function(t,e,n,i,r){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},e.prototype.notifyComplete=function(e){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},e.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},e.prototype._unsubscribe=function(){var t=this.notifications,e=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype._unsubscribeAndRecycle=function(){var e=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=e,this},e.prototype.subscribeToRetries=function(){var e;this.notifications=new rn.a;try{e=(0,this.notifier)(this.notifications)}catch(e){return t.prototype.complete.call(this)}this.retries=e,this.retriesSubscription=Object(o.a)(this,e)},e}(r.a);function _n(t){return void 0===t&&(t=-1),function(e){return e.lift(new xn(t,e))}}var xn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new wn(t,this.count,this.source))},t}(),wn=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.count=n,r.source=i,r}return i.b(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.source,i=this.count;if(0===i)return t.prototype.error.call(this,e);i>-1&&(this.count=i-1),n.subscribe(this._unsubscribeAndRecycle())}},e}(v.a);function En(t){return function(e){return e.lift(new Tn(t,e))}}var Tn=function(){function t(t,e){this.notifier=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Sn(t,this.notifier,this.source))},t}(),Sn=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.notifier=n,r.source=i,r}return i.b(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.errors,i=this.retries,r=this.retriesSubscription;if(i)this.errors=null,this.retriesSubscription=null;else{n=new rn.a;try{i=(0,this.notifier)(n)}catch(e){return t.prototype.error.call(this,e)}r=Object(o.a)(this,i)}this._unsubscribeAndRecycle(),this.errors=n,this.retries=i,this.retriesSubscription=r,n.next(e)}},e.prototype._unsubscribe=function(){var t=this.errors,e=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype.notifyNext=function(t,e,n,i,r){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},e}(r.a),Cn=n(43);function On(t){return function(e){return e.lift(new In(t))}}var In=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new An(t),i=e.subscribe(n);return i.add(Object(o.a)(n,this.notifier)),i},t}(),An=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.hasValue=!1,e}return i.b(e,t),e.prototype._next=function(t){this.value=t,this.hasValue=!0},e.prototype.notifyNext=function(t,e,n,i,r){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},e}(r.a);function Nn(t,e){return void 0===e&&(e=c.a),function(n){return n.lift(new jn(t,e))}}var jn=function(){function t(t,e){this.period=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new kn(t,this.period,this.scheduler))},t}(),kn=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.period=n,r.scheduler=i,r.hasValue=!1,r.add(i.schedule(Ln,n,{subscriber:r,period:n})),r}return i.b(e,t),e.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},e.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},e}(v.a);function Ln(t){var e=t.subscriber,n=t.period;e.notifyNext(),this.schedule(t,n)}function Dn(t,e){return function(n){return n.lift(new Pn(t,e))}}var Pn=function(){function t(t,e){this.compareTo=t,this.comparator=e}return t.prototype.call=function(t,e){return e.subscribe(new Mn(t,this.compareTo,this.comparator))},t}(),Mn=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.compareTo=n,r.comparator=i,r._a=[],r._b=[],r._oneComplete=!1,r.destination.add(n.subscribe(new Rn(e,r))),r}return i.b(e,t),e.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},e.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},e.prototype.checkValues=function(){for(var t=this._a,e=this._b,n=this.comparator;t.length>0&&e.length>0;){var i=t.shift(),r=e.shift(),o=!1;try{o=n?n(i,r):i===r}catch(t){this.destination.error(t)}o||this.emit(!1)}},e.prototype.emit=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},e.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},e}(v.a),Rn=function(t){function e(e,n){var i=t.call(this,e)||this;return i.parent=n,i}return i.b(e,t),e.prototype._next=function(t){this.parent.nextB(t)},e.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},e}(v.a);function Fn(){return new rn.a}function Hn(){return function(t){return Object(Cn.a)()(ze(Fn)(t))}}function Bn(t,e,n){var i;return i=t&&"object"==typeof t?t:{bufferSize:t,windowTime:e,refCount:!1,scheduler:n},function(t){return t.lift((o=(e=i).bufferSize,s=void 0===o?Number.POSITIVE_INFINITY:o,u=e.windowTime,a=void 0===u?Number.POSITIVE_INFINITY:u,c=e.refCount,l=e.scheduler,f=0,h=!1,d=!1,function(t){f++,n&&!h||(h=!1,n=new ln.a(s,a,l),r=t.subscribe({next:function(t){n.next(t)},error:function(t){h=!0,n.error(t)},complete:function(){d=!0,n.complete()}}));var e=n.subscribe(this);this.add(function(){f--,e.unsubscribe(),r&&!d&&c&&0===f&&(r.unsubscribe(),r=void 0,n=void 0)})}));var e,n,r,o,s,u,a,c,l,f,h,d}}function Vn(t){return function(e){return e.lift(new qn(t,e))}}var qn=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Un(t,this.predicate,this.source))},t}(),Un=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.predicate=n,r.source=i,r.seenValue=!1,r.index=0,r}return i.b(e,t),e.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},e.prototype._next=function(t){var e=this.index++;this.predicate?this.tryNext(t,e):this.applySingleValue(t)},e.prototype.tryNext=function(t,e){try{this.predicate(t,e,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new Lt.a)},e}(v.a);function Wn(t){return function(e){return e.lift(new zn(t))}}var zn=function(){function t(t){this.total=t}return t.prototype.call=function(t,e){return e.subscribe(new Gn(t,this.total))},t}(),Gn=function(t){function e(e,n){var i=t.call(this,e)||this;return i.total=n,i.count=0,i}return i.b(e,t),e.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},e}(v.a);function Kn(t){return function(e){return e.lift(new Xn(t))}}var Xn=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new jt.a}return t.prototype.call=function(t,e){return 0===this._skipCount?e.subscribe(new v.a(t)):e.subscribe(new $n(t,this._skipCount))},t}(),$n=function(t){function e(e,n){var i=t.call(this,e)||this;return i._skipCount=n,i._count=0,i._ring=new Array(n),i}return i.b(e,t),e.prototype._next=function(t){var e=this._skipCount,n=this._count++;if(n<e)this._ring[n]=t;else{var i=n%e,r=this._ring,o=r[i];r[i]=t,this.destination.next(o)}},e}(v.a);function Yn(t){return function(e){return e.lift(new Qn(t))}}var Qn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new Jn(t,this.notifier))},t}(),Jn=function(t){function e(e,n){var i=t.call(this,e)||this;i.hasValue=!1;var r=new P.a(i,void 0,void 0);return i.add(r),i.innerSubscription=r,Object(o.a)(i,n,void 0,void 0,r),i}return i.b(e,t),e.prototype._next=function(e){this.hasValue&&t.prototype._next.call(this,e)},e.prototype.notifyNext=function(t,e,n,i,r){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},e.prototype.notifyComplete=function(){},e}(r.a);function Zn(t){return function(e){return e.lift(new ti(t))}}var ti=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,e){return e.subscribe(new ei(t,this.predicate))},t}(),ei=function(t){function e(e,n){var i=t.call(this,e)||this;return i.predicate=n,i.skipping=!0,i.index=0,i}return i.b(e,t),e.prototype._next=function(t){var e=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||e.next(t)},e.prototype.tryCallPredicate=function(t){try{var e=this.predicate(t,this.index++);this.skipping=Boolean(e)}catch(t){this.destination.error(t)}},e}(v.a);function ni(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(_.a)(n)?(t.pop(),function(e){return Object(W.a)(t,e,n)}):function(e){return Object(W.a)(t,e)}}var ii=n(53),ri=n(32),oi=function(t){function e(e,n,i){void 0===n&&(n=0),void 0===i&&(i=ii.a);var r=t.call(this)||this;return r.source=e,r.delayTime=n,r.scheduler=i,(!Object(ri.a)(n)||n<0)&&(r.delayTime=0),i&&"function"==typeof i.schedule||(r.scheduler=ii.a),r}return i.b(e,t),e.create=function(t,n,i){return void 0===n&&(n=0),void 0===i&&(i=ii.a),new e(t,n,i)},e.dispatch=function(t){var e=t.source,n=t.subscriber;return this.add(e.subscribe(n))},e.prototype._subscribe=function(t){var n=this.delayTime,i=this.source;return this.scheduler.schedule(e.dispatch,n,{source:i,subscriber:t})},e}(vt.a);function si(t,e){return void 0===e&&(e=0),function(n){return n.lift(new ui(t,e))}}var ui=function(){function t(t,e){this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return new oi(e,this.delay,this.scheduler).subscribe(t)},t}();function ai(t,e){return"function"==typeof e?function(n){return n.pipe(ai(function(n,i){return Object(q.a)(t(n,i)).pipe(Object(Qt.a)(function(t,r){return e(n,t,i,r)}))}))}:function(e){return e.lift(new ci(t))}}var ci=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new li(t,this.project))},t}(),li=function(t){function e(e,n){var i=t.call(this,e)||this;return i.project=n,i.index=0,i}return i.b(e,t),e.prototype._next=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var i=this.innerSubscription;i&&i.unsubscribe();var r=new P.a(this,void 0,void 0);this.destination.add(r),this.innerSubscription=Object(o.a)(this,t,e,n,r)},e.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this),this.unsubscribe()},e.prototype._unsubscribe=function(){this.innerSubscription=null},e.prototype.notifyComplete=function(e){this.destination.remove(e),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,i,r){this.destination.next(e)},e}(r.a);function fi(){return ai(fe.a)}function hi(t,e){return e?ai(function(){return t},e):ai(function(){return t})}function di(t){return function(e){return e.lift(new pi(t))}}var pi=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new vi(t),i=Object(o.a)(n,this.notifier);return i&&!n.seenValue?(n.add(i),e.subscribe(n)):n},t}(),vi=function(t){function e(e){var n=t.call(this,e)||this;return n.seenValue=!1,n}return i.b(e,t),e.prototype.notifyNext=function(t,e,n,i,r){this.seenValue=!0,this.complete()},e.prototype.notifyComplete=function(){},e}(r.a);function mi(t,e){return void 0===e&&(e=!1),function(n){return n.lift(new bi(t,e))}}var bi=function(){function t(t,e){this.predicate=t,this.inclusive=e}return t.prototype.call=function(t,e){return e.subscribe(new yi(t,this.predicate,this.inclusive))},t}(),yi=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.predicate=n,r.inclusive=i,r.index=0,r}return i.b(e,t),e.prototype._next=function(t){var e,n=this.destination;try{e=this.predicate(t,this.index++)}catch(t){return void n.error(t)}this.nextOrComplete(t,e)},e.prototype.nextOrComplete=function(t,e){var n=this.destination;Boolean(e)?n.next(t):(this.inclusive&&n.next(t),n.complete())},e}(v.a),gi=n(15),_i=n(25);function xi(t,e,n){return function(i){return i.lift(new wi(t,e,n))}}var wi=function(){function t(t,e,n){this.nextOrObserver=t,this.error=e,this.complete=n}return t.prototype.call=function(t,e){return e.subscribe(new Ei(t,this.nextOrObserver,this.error,this.complete))},t}(),Ei=function(t){function e(e,n,i,r){var o=t.call(this,e)||this;return o._tapNext=gi.a,o._tapError=gi.a,o._tapComplete=gi.a,o._tapError=i||gi.a,o._tapComplete=r||gi.a,Object(_i.a)(n)?(o._context=o,o._tapNext=n):n&&(o._context=n,o._tapNext=n.next||gi.a,o._tapError=n.error||gi.a,o._tapComplete=n.complete||gi.a),o}return i.b(e,t),e.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},e.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},e.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},e}(v.a),Ti={leading:!0,trailing:!1};function Si(t,e){return void 0===e&&(e=Ti),function(n){return n.lift(new Ci(t,e.leading,e.trailing))}}var Ci=function(){function t(t,e,n){this.durationSelector=t,this.leading=e,this.trailing=n}return t.prototype.call=function(t,e){return e.subscribe(new Oi(t,this.durationSelector,this.leading,this.trailing))},t}(),Oi=function(t){function e(e,n,i,r){var o=t.call(this,e)||this;return o.destination=e,o.durationSelector=n,o._leading=i,o._trailing=r,o._hasValue=!1,o}return i.b(e,t),e.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},e.prototype.send=function(){var t=this._hasValue,e=this._sendValue;t&&(this.destination.next(e),this.throttle(e)),this._hasValue=!1,this._sendValue=null},e.prototype.throttle=function(t){var e=this.tryDurationSelector(t);e&&this.add(this._throttled=Object(o.a)(this,e))},e.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},e.prototype.throttlingDone=function(){var t=this._throttled,e=this._trailing;t&&t.unsubscribe(),this._throttled=null,e&&this.send()},e.prototype.notifyNext=function(t,e,n,i,r){this.throttlingDone()},e.prototype.notifyComplete=function(){this.throttlingDone()},e}(r.a);function Ii(t,e,n){return void 0===e&&(e=c.a),void 0===n&&(n=Ti),function(i){return i.lift(new Ai(t,e,n.leading,n.trailing))}}var Ai=function(){function t(t,e,n,i){this.duration=t,this.scheduler=e,this.leading=n,this.trailing=i}return t.prototype.call=function(t,e){return e.subscribe(new Ni(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),Ni=function(t){function e(e,n,i,r,o){var s=t.call(this,e)||this;return s.duration=n,s.scheduler=i,s.leading=r,s.trailing=o,s._hasTrailingValue=!1,s._trailingValue=null,s}return i.b(e,t),e.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(ji,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},e.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},e.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},e}(v.a);function ji(t){t.subscriber.clearThrottle()}var ki=n(48);function Li(t){return void 0===t&&(t=c.a),function(e){return Object(ki.a)(function(){return e.pipe(Ne(function(e,n){var i=e.current;return{value:n,current:t.now(),last:i}},{current:t.now(),value:void 0,last:void 0}),Object(Qt.a)(function(t){var e=t.current,n=t.last,i=t.value;return new Di(i,e-n)}))})}}var Di=function(){return function(t,e){this.value=t,this.interval=e}}(),Pi=n(64);function Mi(t,e,n){return void 0===n&&(n=c.a),function(i){var r=ct(t),o=r?+t-n.now():Math.abs(t);return i.lift(new Ri(o,r,e,n))}}var Ri=function(){function t(t,e,n,i){this.waitFor=t,this.absoluteTimeout=e,this.withObservable=n,this.scheduler=i}return t.prototype.call=function(t,e){return e.subscribe(new Fi(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Fi=function(t){function e(e,n,i,r,o){var s=t.call(this,e)||this;return s.absoluteTimeout=n,s.waitFor=i,s.withObservable=r,s.scheduler=o,s.action=null,s.scheduleTimeout(),s}return i.b(e,t),e.dispatchTimeout=function(t){var e=t.withObservable;t._unsubscribeAndRecycle(),t.add(Object(o.a)(t,e))},e.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(e.dispatchTimeout,this.waitFor,this))},e.prototype._next=function(e){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,e)},e.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},e}(r.a),Hi=n(45);function Bi(t,e){return void 0===e&&(e=c.a),Mi(t,Object(Hi.a)(new Pi.a),e)}function Vi(t){return void 0===t&&(t=c.a),Object(Qt.a)(function(e){return new qi(e,t.now())})}var qi=function(){return function(t,e){this.value=t,this.timestamp=e}}();function Ui(t,e,n){return 0===n?[e]:(t.push(e),t)}function Wi(){return De(Ui,[])}function zi(t){return function(e){return e.lift(new Gi(t))}}var Gi=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,e){var n=new Ki(t),i=e.subscribe(n);return i.closed||n.add(Object(o.a)(n,this.windowBoundaries)),i},t}(),Ki=function(t){function e(e){var n=t.call(this,e)||this;return n.window=new rn.a,e.next(n.window),n}return i.b(e,t),e.prototype.notifyNext=function(t,e,n,i,r){this.openWindow()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this._complete()},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t)},e.prototype._complete=function(){this.window.complete(),this.destination.complete()},e.prototype._unsubscribe=function(){this.window=null},e.prototype.openWindow=function(){var t=this.window;t&&t.complete();var e=this.destination,n=this.window=new rn.a;e.next(n)},e}(r.a);function Xi(t,e){return void 0===e&&(e=0),function(n){return n.lift(new $i(t,e))}}var $i=function(){function t(t,e){this.windowSize=t,this.startWindowEvery=e}return t.prototype.call=function(t,e){return e.subscribe(new Yi(t,this.windowSize,this.startWindowEvery))},t}(),Yi=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.destination=e,r.windowSize=n,r.startWindowEvery=i,r.windows=[new rn.a],r.count=0,e.next(r.windows[0]),r}return i.b(e,t),e.prototype._next=function(t){for(var e=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,n=this.destination,i=this.windowSize,r=this.windows,o=r.length,s=0;s<o&&!this.closed;s++)r[s].next(t);var u=this.count-i+1;if(u>=0&&u%e==0&&!this.closed&&r.shift().complete(),++this.count%e==0&&!this.closed){var a=new rn.a;r.push(a),n.next(a)}},e.prototype._error=function(t){var e=this.windows;if(e)for(;e.length>0&&!this.closed;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},e.prototype._unsubscribe=function(){this.count=0,this.windows=null},e}(v.a);function Qi(t){var e=c.a,n=null,i=Number.POSITIVE_INFINITY;return Object(_.a)(arguments[3])&&(e=arguments[3]),Object(_.a)(arguments[2])?e=arguments[2]:Object(ri.a)(arguments[2])&&(i=arguments[2]),Object(_.a)(arguments[1])?e=arguments[1]:Object(ri.a)(arguments[1])&&(n=arguments[1]),function(r){return r.lift(new Ji(t,n,i,e))}}var Ji=function(){function t(t,e,n,i){this.windowTimeSpan=t,this.windowCreationInterval=e,this.maxWindowSize=n,this.scheduler=i}return t.prototype.call=function(t,e){return e.subscribe(new tr(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),Zi=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._numberOfNextedValues=0,e}return i.b(e,t),e.prototype.next=function(e){this._numberOfNextedValues++,t.prototype.next.call(this,e)},Object.defineProperty(e.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),e}(rn.a),tr=function(t){function e(e,n,i,r,o){var s=t.call(this,e)||this;s.destination=e,s.windowTimeSpan=n,s.windowCreationInterval=i,s.maxWindowSize=r,s.scheduler=o,s.windows=[];var u=s.openWindow();if(null!==i&&i>=0){var a={subscriber:s,window:u,context:null},c={windowTimeSpan:n,windowCreationInterval:i,subscriber:s,scheduler:o};s.add(o.schedule(ir,n,a)),s.add(o.schedule(nr,i,c))}else{var l={subscriber:s,window:u,windowTimeSpan:n};s.add(o.schedule(er,n,l))}return s}return i.b(e,t),e.prototype._next=function(t){for(var e=this.windows,n=e.length,i=0;i<n;i++){var r=e[i];r.closed||(r.next(t),r.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(r))}},e.prototype._error=function(t){for(var e=this.windows;e.length>0;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){for(var t=this.windows;t.length>0;){var e=t.shift();e.closed||e.complete()}this.destination.complete()},e.prototype.openWindow=function(){var t=new Zi;return this.windows.push(t),this.destination.next(t),t},e.prototype.closeWindow=function(t){t.complete();var e=this.windows;e.splice(e.indexOf(t),1)},e}(v.a);function er(t){var e=t.subscriber,n=t.windowTimeSpan,i=t.window;i&&e.closeWindow(i),t.window=e.openWindow(),this.schedule(t,n)}function nr(t){var e=t.windowTimeSpan,n=t.subscriber,i=t.scheduler,r=t.windowCreationInterval,o=n.openWindow(),s={action:this,subscription:null},u={subscriber:n,window:o,context:s};s.subscription=i.schedule(ir,e,u),this.add(s.subscription),this.schedule(t,r)}function ir(t){var e=t.subscriber,n=t.window,i=t.context;i&&i.action&&i.subscription&&i.action.remove(i.subscription),e.closeWindow(n)}function rr(t,e){return function(n){return n.lift(new or(t,e))}}var or=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new sr(t,this.openings,this.closingSelector))},t}(),sr=function(t){function e(e,n,i){var r=t.call(this,e)||this;return r.openings=n,r.closingSelector=i,r.contexts=[],r.add(r.openSubscription=Object(o.a)(r,n,n)),r}return i.b(e,t),e.prototype._next=function(t){var e=this.contexts;if(e)for(var n=e.length,i=0;i<n;i++)e[i].window.next(t)},e.prototype._error=function(e){var n=this.contexts;if(this.contexts=null,n)for(var i=n.length,r=-1;++r<i;){var o=n[r];o.window.error(e),o.subscription.unsubscribe()}t.prototype._error.call(this,e)},e.prototype._complete=function(){var e=this.contexts;if(this.contexts=null,e)for(var n=e.length,i=-1;++i<n;){var r=e[i];r.window.complete(),r.subscription.unsubscribe()}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var e=t.length,n=-1;++n<e;){var i=t[n];i.window.unsubscribe(),i.subscription.unsubscribe()}},e.prototype.notifyNext=function(t,e,n,i,r){if(t===this.openings){var s=void 0;try{s=(0,this.closingSelector)(e)}catch(t){return this.error(t)}var u=new rn.a,a=new I.a,c={window:u,subscription:a};this.contexts.push(c);var l=Object(o.a)(this,s,c);l.closed?this.closeWindow(this.contexts.length-1):(l.context=c,a.add(l)),this.destination.next(u)}else this.closeWindow(this.contexts.indexOf(t))},e.prototype.notifyError=function(t){this.error(t)},e.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},e.prototype.closeWindow=function(t){if(-1!==t){var e=this.contexts,n=e[t],i=n.window,r=n.subscription;e.splice(t,1),i.complete(),r.unsubscribe()}},e}(r.a);function ur(t){return function(e){return e.lift(new ar(t))}}var ar=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new cr(t,this.closingSelector))},t}(),cr=function(t){function e(e,n){var i=t.call(this,e)||this;return i.destination=e,i.closingSelector=n,i.openWindow(),i}return i.b(e,t),e.prototype.notifyNext=function(t,e,n,i,r){this.openWindow(r)},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this.openWindow(t)},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},e.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},e.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},e.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var e=this.window;e&&e.complete();var n,i=this.window=new rn.a;this.destination.next(i);try{n=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=Object(o.a)(this,n))},e}(r.a);function lr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){var n;"function"==typeof t[t.length-1]&&(n=t.pop());var i=t;return e.lift(new fr(i,n))}}var fr=function(){function t(t,e){this.observables=t,this.project=e}return t.prototype.call=function(t,e){return e.subscribe(new hr(t,this.observables,this.project))},t}(),hr=function(t){function e(e,n,i){var r=t.call(this,e)||this;r.observables=n,r.project=i,r.toRespond=[];var s=n.length;r.values=new Array(s);for(var u=0;u<s;u++)r.toRespond.push(u);for(u=0;u<s;u++){var a=n[u];r.add(Object(o.a)(r,a,a,u))}return r}return i.b(e,t),e.prototype.notifyNext=function(t,e,n,i,r){this.values[n]=e;var o=this.toRespond;if(o.length>0){var s=o.indexOf(n);-1!==s&&o.splice(s,1)}},e.prototype.notifyComplete=function(){},e.prototype._next=function(t){if(0===this.toRespond.length){var e=[t].concat(this.values);this.project?this._tryProject(e):this.destination.next(e)}},e.prototype._tryProject=function(t){var e;try{e=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(r.a),dr=n(49);function pr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(dr.b.apply(void 0,[e].concat(t)))}}function vr(t){return function(e){return e.lift(new dr.a(t))}}n.d(e,"audit",function(){return s}),n.d(e,"auditTime",function(){return f}),n.d(e,"buffer",function(){return h}),n.d(e,"bufferCount",function(){return m}),n.d(e,"bufferTime",function(){return x}),n.d(e,"bufferToggle",function(){return A}),n.d(e,"bufferWhen",function(){return k}),n.d(e,"catchError",function(){return M}),n.d(e,"combineAll",function(){return B}),n.d(e,"combineLatest",function(){return U}),n.d(e,"concat",function(){return z}),n.d(e,"concatAll",function(){return G.a}),n.d(e,"concatMap",function(){return X}),n.d(e,"concatMapTo",function(){return $}),n.d(e,"count",function(){return Y}),n.d(e,"debounce",function(){return Z}),n.d(e,"debounceTime",function(){return nt}),n.d(e,"defaultIfEmpty",function(){return st}),n.d(e,"delay",function(){return ft}),n.d(e,"delayWhen",function(){return mt}),n.d(e,"dematerialize",function(){return xt}),n.d(e,"distinct",function(){return Tt}),n.d(e,"distinctUntilChanged",function(){return Ot}),n.d(e,"distinctUntilKeyChanged",function(){return Nt}),n.d(e,"elementAt",function(){return qt}),n.d(e,"endWith",function(){return Wt}),n.d(e,"every",function(){return zt}),n.d(e,"exhaust",function(){return Xt}),n.d(e,"exhaustMap",function(){return Jt}),n.d(e,"expand",function(){return ee}),n.d(e,"filter",function(){return kt.a}),n.d(e,"finalize",function(){return re}),n.d(e,"find",function(){return ue}),n.d(e,"findIndex",function(){return le}),n.d(e,"first",function(){return he}),n.d(e,"groupBy",function(){return de.b}),n.d(e,"ignoreElements",function(){return pe}),n.d(e,"isEmpty",function(){return be}),n.d(e,"last",function(){return Ee}),n.d(e,"map",function(){return Qt.a}),n.d(e,"mapTo",function(){return Te}),n.d(e,"materialize",function(){return Oe}),n.d(e,"max",function(){return Pe}),n.d(e,"merge",function(){return Re}),n.d(e,"mergeAll",function(){return Fe.a}),n.d(e,"mergeMap",function(){return K.a}),n.d(e,"flatMap",function(){return K.a}),n.d(e,"mergeMapTo",function(){return He}),n.d(e,"mergeScan",function(){return Be}),n.d(e,"min",function(){return Ue}),n.d(e,"multicast",function(){return ze}),n.d(e,"observeOn",function(){return Ke.b}),n.d(e,"onErrorResumeNext",function(){return Xe}),n.d(e,"pairwise",function(){return Qe}),n.d(e,"partition",function(){return en}),n.d(e,"pluck",function(){return nn}),n.d(e,"publish",function(){return on}),n.d(e,"publishBehavior",function(){return un}),n.d(e,"publishLast",function(){return cn}),n.d(e,"publishReplay",function(){return fn}),n.d(e,"race",function(){return dn}),n.d(e,"reduce",function(){return De}),n.d(e,"repeat",function(){return pn}),n.d(e,"repeatWhen",function(){return bn}),n.d(e,"retry",function(){return _n}),n.d(e,"retryWhen",function(){return En}),n.d(e,"refCount",function(){return Cn.a}),n.d(e,"sample",function(){return On}),n.d(e,"sampleTime",function(){return Nn}),n.d(e,"scan",function(){return Ne}),n.d(e,"sequenceEqual",function(){return Dn}),n.d(e,"share",function(){return Hn}),n.d(e,"shareReplay",function(){return Bn}),n.d(e,"single",function(){return Vn}),n.d(e,"skip",function(){return Wn}),n.d(e,"skipLast",function(){return Kn}),n.d(e,"skipUntil",function(){return Yn}),n.d(e,"skipWhile",function(){return Zn}),n.d(e,"startWith",function(){return ni}),n.d(e,"subscribeOn",function(){return si}),n.d(e,"switchAll",function(){return fi}),n.d(e,"switchMap",function(){return ai}),n.d(e,"switchMapTo",function(){return hi}),n.d(e,"take",function(){return Ht}),n.d(e,"takeLast",function(){return _e}),n.d(e,"takeUntil",function(){return di}),n.d(e,"takeWhile",function(){return mi}),n.d(e,"tap",function(){return xi}),n.d(e,"throttle",function(){return Si}),n.d(e,"throttleTime",function(){return Ii}),n.d(e,"throwIfEmpty",function(){return Dt}),n.d(e,"timeInterval",function(){return Li}),n.d(e,"timeout",function(){return Bi}),n.d(e,"timeoutWith",function(){return Mi}),n.d(e,"timestamp",function(){return Vi}),n.d(e,"toArray",function(){return Wi}),n.d(e,"window",function(){return zi}),n.d(e,"windowCount",function(){return Xi}),n.d(e,"windowTime",function(){return Qi}),n.d(e,"windowToggle",function(){return rr}),n.d(e,"windowWhen",function(){return ur}),n.d(e,"withLatestFrom",function(){return lr}),n.d(e,"zip",function(){return pr}),n.d(e,"zipAll",function(){return vr})},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var i=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}()},function(t,e,n){"use strict";n.d(e,"b",function(){return a}),n.d(e,"a",function(){return h});var i=n(0),r=n(1),o=n(5),s=n(2),u=n(6);function a(t,e,n,i){return function(r){return r.lift(new c(t,e,n,i))}}var c=function(){function t(t,e,n,i){this.keySelector=t,this.elementSelector=e,this.durationSelector=n,this.subjectSelector=i}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),l=function(t){function e(e,n,i,r,o){var s=t.call(this,e)||this;return s.keySelector=n,s.elementSelector=i,s.durationSelector=r,s.subjectSelector=o,s.groups=null,s.attemptedToUnsubscribe=!1,s.count=0,s}return i.b(e,t),e.prototype._next=function(t){var e;try{e=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,e)},e.prototype._group=function(t,e){var n=this.groups;n||(n=this.groups=new Map);var i,r=n.get(e);if(this.elementSelector)try{i=this.elementSelector(t)}catch(t){this.error(t)}else i=t;if(!r){r=this.subjectSelector?this.subjectSelector():new u.a,n.set(e,r);var o=new h(e,r,this);if(this.destination.next(o),this.durationSelector){var s=void 0;try{s=this.durationSelector(new h(e,r))}catch(t){return void this.error(t)}this.add(s.subscribe(new f(e,r,this)))}}r.closed||r.next(i)},e.prototype._error=function(t){var e=this.groups;e&&(e.forEach(function(e,n){e.error(t)}),e.clear()),this.destination.error(t)},e.prototype._complete=function(){var t=this.groups;t&&(t.forEach(function(t,e){t.complete()}),t.clear()),this.destination.complete()},e.prototype.removeGroup=function(t){this.groups.delete(t)},e.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},e}(r.a),f=function(t){function e(e,n,i){var r=t.call(this,n)||this;return r.key=e,r.group=n,r.parent=i,r}return i.b(e,t),e.prototype._next=function(t){this.complete()},e.prototype._unsubscribe=function(){var t=this.parent,e=this.key;this.key=this.parent=null,t&&t.removeGroup(e)},e}(r.a),h=function(t){function e(e,n,i){var r=t.call(this)||this;return r.key=e,r.groupSubject=n,r.refCountSubscription=i,r}return i.b(e,t),e.prototype._subscribe=function(t){var e=new o.a,n=this.refCountSubscription,i=this.groupSubject;return n&&!n.closed&&e.add(new d(n)),e.add(i.subscribe(t)),e},e}(s.a),d=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return i.b(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(o.a)},function(t,e,n){"use strict";n.r(e);var i=n(37);const r=new WeakMap,o=Object(i.directive)(t=>e=>{if(!("then"in t||"subscribe"in t))throw new Error("subscribableOrPromiseLike must be a subscribable or a promise like");const n=r.get(e);if(void 0!==n&&t===n.subscribableOrPromiseLike)return;const i=i=>{void 0!==n&&e.value===n.value&&t===n.subscribableOrPromiseLike||(e.setValue(i),e.commit(),r.set(e,{value:i,subscribableOrPromiseLike:t}))};"then"in t?t.then(i):t.subscribe(i)});n.d(e,"subscribe",function(){return o})},function(t,e,n){"use strict";n.d(e,"a",function(){return c}),n.d(e,"b",function(){return f});var i=n(0),r=n(6),o=n(2),s=n(1),u=n(5),a=n(43),c=function(t){function e(e,n){var i=t.call(this)||this;return i.source=e,i.subjectFactory=n,i._refCount=0,i._isComplete=!1,i}return i.b(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new u.a).add(this.source.subscribe(new h(this.getSubject(),this))),t.closed&&(this._connection=null,t=u.a.EMPTY)),t},e.prototype.refCount=function(){return Object(a.a)()(this)},e}(o.a),l=c.prototype,f={operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:l._subscribe},_isComplete:{value:l._isComplete,writable:!0},getSubject:{value:l.getSubject},connect:{value:l.connect},refCount:{value:l.refCount}},h=function(t){function e(e,n){var i=t.call(this,e)||this;return i.connectable=n,i}return i.b(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(r.b);s.a},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var i=n(0),r=n(6),o=n(22),s=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return i.b(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.a;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(r.a)},function(t,e,n){"use strict";n.d(e,"b",function(){return s}),n.d(e,"a",function(){return a});var i=n(0),r=n(1),o=n(17);function s(t,e){return void 0===e&&(e=0),function(n){return n.lift(new u(t,e))}}var u=function(){function t(t,e){void 0===e&&(e=0),this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return e.subscribe(new a(t,this.scheduler,this.delay))},t}(),a=function(t){function e(e,n,i){void 0===i&&(i=0);var r=t.call(this,e)||this;return r.scheduler=n,r.delay=i,r}return i.b(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new c(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(o.a.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(o.a.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(o.a.createComplete()),this.unsubscribe()},e}(r.a),c=function(){return function(t,e){this.notification=t,this.destination=e}}()},function(t,e,n){"use strict";function i(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}n.d(e,"a",function(){return r}),i.prototype=Object.create(Error.prototype);var r=i},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=n(47);function r(){return Object(i.a)(1)}},function(t,e,n){"use strict";n.d(e,"a",function(){return u});var i=n(2),r=n(10),o=n(47),s=n(27);function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,u=null,a=t[t.length-1];return Object(r.a)(a)?(u=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof a&&(n=t.pop()),null===u&&1===t.length&&t[0]instanceof i.a?t[0]:Object(o.a)(n)(Object(s.a)(t,u))}},function(t,e,n){"use strict";n.d(e,"a",function(){return a});var i=n(0),r=n(7),o=n(27),s=n(4),u=n(3);function a(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!Object(r.a)(t[0]))return t[0];t=t[0]}return Object(o.a)(t,void 0).lift(new c)}var c=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new l(t))},t}(),l=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return i.b(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var i=t[n],r=Object(u.a)(this,i,i,n);this.subscriptions&&this.subscriptions.push(r),this.add(r)}this.observables=null}},e.prototype.notifyNext=function(t,e,n,i,r){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==n){var s=this.subscriptions[o];s.unsubscribe(),this.remove(s)}this.subscriptions=null}this.destination.next(e)},e}(s.a)},function(t,e,n){"use strict";n.d(e,"a",function(){return u});var i=n(2),r=n(8),o=n(32),s=n(10);function u(t,e,n){void 0===t&&(t=0);var u=-1;return Object(o.a)(e)?u=Number(e)<1?1:Number(e):Object(s.a)(e)&&(n=e),Object(s.a)(n)||(n=r.a),new i.a(function(e){var i=Object(o.a)(t)?t:+t-n.now();return n.schedule(a,i,{index:0,period:u,subscriber:e})})}function a(t){var e=t.index,n=t.period,i=t.subscriber;if(i.next(e),!i.closed){if(-1===n)return i.complete();t.index=e+1,this.schedule(t,n)}}},function(t,e,n){"use strict";var i=n(2),r=n(5),o=n(20);var s=n(52),u=n(19);var a=n(74),c=n(73);function l(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[o.a]}(t))return function(t,e){return new i.a(function(n){var i=new r.a;return i.add(e.schedule(function(){var r=t[o.a]();i.add(r.subscribe({next:function(t){i.add(e.schedule(function(){return n.next(t)}))},error:function(t){i.add(e.schedule(function(){return n.error(t)}))},complete:function(){i.add(e.schedule(function(){return n.complete()}))}}))})),i})}(t,e);if(Object(a.a)(t))return function(t,e){return new i.a(function(n){var i=new r.a;return i.add(e.schedule(function(){return t.then(function(t){i.add(e.schedule(function(){n.next(t),i.add(e.schedule(function(){return n.complete()}))}))},function(t){i.add(e.schedule(function(){return n.error(t)}))})})),i})}(t,e);if(Object(c.a)(t))return Object(s.a)(t,e);if(function(t){return t&&"function"==typeof t[u.a]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new i.a(function(n){var i,o=new r.a;return o.add(function(){i&&"function"==typeof i.return&&i.return()}),o.add(e.schedule(function(){i=t[u.a](),o.add(e.schedule(function(){if(!n.closed){var t,e;try{var r=i.next();t=r.value,e=r.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}}))})),o})}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}n.d(e,"a",function(){return l})},function(t,e,n){"use strict";var i=n(0),r=function(t){function e(e,n){var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i}return i.b(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,i){return void 0===i&&(i=0),null!==i&&i>0||null===i&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,i):e.flush(this)},e}(n(31).a),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i.b(e,t),e}(n(28).a);n.d(e,"a",function(){return s});var s=new o(r)},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=n(0),r=function(t){function e(e,n){var i=t.call(this)||this;return i.subject=e,i.subscriber=n,i.closed=!1,i}return i.b(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(n(5).a)},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var i=function(t){return function(e){for(var n=0,i=t.length;n<i&&!e.closed;n++)e.next(t[n]);e.complete()}}},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var i=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},function(t,e,n){"use strict";function i(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}n.d(e,"a",function(){return i})},function(t,e,n){"use strict";function i(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}n.d(e,"a",function(){return i})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(89))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(92))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.debugKey=Symbol("debugKey")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){return e<n?t<e?e:t>n?n:t:t<n?n:t>e?e:t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(91))},function(t,e,n){"use strict";var i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},r=this&&this.__decorate||function(t,e,n,i){var r,o=arguments.length,s=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var u=t.length-1;u>=0;u--)(r=t[u])&&(s=(o<3?r(s):o>3?r(e,n,s):r(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};Object.defineProperty(e,"__esModule",{value:!0});var o=n(55),s=n(77),u=n(56),a=function(){function t(){var t=this;this.store=new s.Store("componentTemplate"),this.commands={template:function(e,n,r){var o=n[0];switch(o){case void 0:for(var s=0,a=r;s<a.length;s++){var c=a[s];if("--version"===c||"-v"===c)return u.success("1.0.1","",e.alertOptions)}u.error("Welcome to the component template program!\n                        To get started, try running this basic commands:\n                            "+["--version","ls"].map(function(t){return""+t}).join(" ")+"\n                    ","",i({},e.alertOptions,{timeOut:7500}));break;case"ls":u.success("Here is a list of all the current registered component templates (including ics):\n                        <ul>\n                            "+t.store.ls().map(function(t){return"\n                                <li>\n                                    "+t+"\n                                </li>\n                            "}).join(" ")+"\n                        </ul>\n                    ","",e.alertOptions);break;case"info":if(!n[1])return u.error("You need to specify a template name","",e.alertOptions);var l=t.store.get(n[1]);if(!l)return u.error("Component "+n[1]+" doesnt exist","",e.alertOptions);var f=r.find(function(t){return"-sf"===t||"--showFunctions"===t});u.success("\n                        Name: "+l.name+" <br>\n                        Inputs: "+l.inputs+" <br>\n                        Outputs: "+l.outputs+"\n                        "+(f?"<br> Activation: "+l.activation:"")+"\n                    ","",e.alertOptions);break;default:u.error(o+" is not a valid command for the template program","",e.alertOptions)}}},this.store.set("buffer",{inputs:1,outputs:1,name:"buffer",version:"1.0.0",activation:"\n                ctx.outputs[0].value = ctx.inputs[0].value\n            ".trim(),material:{mode:"color",data:"blue"}}),this.store.set("not",{inputs:1,outputs:1,name:"buffer",version:"1.0.0",activation:"\n                ctx.outputs[0].value = !ctx.inputs[0].value\n            ".trim(),material:{mode:"color",data:"red"}}),this.store.set("and",{inputs:2,outputs:1,name:"and",version:"1.0.0",activation:"\n                ctx.outputs[0].value = ctx.inputs[0].value && ctx.inputs[1].value\n            ".trim(),material:{mode:"standard_image",data:"and"}}),this.store.set("true",{inputs:0,outputs:1,name:"true",version:"1.0.0",activation:"\n                ctx.outputs[0].value = true\n            ".trim(),material:{mode:"color",data:"green"}}),this.store.set("false",{inputs:0,outputs:1,name:"false",version:"1.0.0",activation:"\n                ctx.outputs[0].value = false\n            ".trim(),material:{mode:"color",data:"yellow"}})}return t=r([o.Singleton],t)}();e.ComponentTemplateStore=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.alertOptions={positionClass:"toast-bottom-right",toastClass:"toasts"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(97))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(77);e.runCounter={store:new i.Store("runCounter"),get:function(){return e.runCounter.store.get("main")},increase:function(){e.runCounter.store.set("main",e.runCounter.store.get("main")+1)}},e.runCounter.get()||e.runCounter.store.set("main",1)},function(t,e,n){var i,r,o=n(112),s=n(113),u=(r=[],{activateTrap:function(t){if(r.length>0){var e=r[r.length-1];e!==t&&e.pause()}var n=r.indexOf(t);-1===n?r.push(t):(r.splice(n,1),r.push(t))},deactivateTrap:function(t){var e=r.indexOf(t);-1!==e&&r.splice(e,1),r.length>0&&r[r.length-1].unpause()}});function a(t){return setTimeout(t,0)}t.exports=function(t,e){var n=document,r="string"==typeof t?n.querySelector(t):t,c=s({returnFocusOnDeactivate:!0,escapeDeactivates:!0},e),l={firstTabbableNode:null,lastTabbableNode:null,nodeFocusedBeforeActivation:null,mostRecentlyFocusedNode:null,active:!1,paused:!1},f={activate:function(t){if(!l.active){x(),l.active=!0,l.paused=!1,l.nodeFocusedBeforeActivation=n.activeElement;var e=t&&t.onActivate?t.onActivate:c.onActivate;return e&&e(),d(),f}},deactivate:h,pause:function(){!l.paused&&l.active&&(l.paused=!0,p())},unpause:function(){l.paused&&l.active&&(l.paused=!1,x(),d())}};return f;function h(t){if(l.active){clearTimeout(i),p(),l.active=!1,l.paused=!1,u.deactivateTrap(f);var e=t&&void 0!==t.onDeactivate?t.onDeactivate:c.onDeactivate;return e&&e(),(t&&void 0!==t.returnFocus?t.returnFocus:c.returnFocusOnDeactivate)&&a(function(){w(l.nodeFocusedBeforeActivation)}),f}}function d(){if(l.active)return u.activateTrap(f),i=a(function(){w(m())}),n.addEventListener("focusin",y,!0),n.addEventListener("mousedown",b,{capture:!0,passive:!1}),n.addEventListener("touchstart",b,{capture:!0,passive:!1}),n.addEventListener("click",_,{capture:!0,passive:!1}),n.addEventListener("keydown",g,{capture:!0,passive:!1}),f}function p(){if(l.active)return n.removeEventListener("focusin",y,!0),n.removeEventListener("mousedown",b,!0),n.removeEventListener("touchstart",b,!0),n.removeEventListener("click",_,!0),n.removeEventListener("keydown",g,!0),f}function v(t){var e=c[t],i=e;if(!e)return null;if("string"==typeof e&&!(i=n.querySelector(e)))throw new Error("`"+t+"` refers to no known node");if("function"==typeof e&&!(i=e()))throw new Error("`"+t+"` did not return a node");return i}function m(){var t;if(!(t=null!==v("initialFocus")?v("initialFocus"):r.contains(n.activeElement)?n.activeElement:l.firstTabbableNode||v("fallbackFocus")))throw new Error("You can't have a focus-trap without at least one focusable element");return t}function b(t){r.contains(t.target)||(c.clickOutsideDeactivates?h({returnFocus:!o.isFocusable(t.target)}):t.preventDefault())}function y(t){r.contains(t.target)||t.target instanceof Document||(t.stopImmediatePropagation(),w(l.mostRecentlyFocusedNode||m()))}function g(t){if(!1!==c.escapeDeactivates&&function(t){return"Escape"===t.key||"Esc"===t.key||27===t.keyCode}(t))return t.preventDefault(),void h();(function(t){return"Tab"===t.key||9===t.keyCode})(t)&&function(t){if(x(),t.shiftKey&&t.target===l.firstTabbableNode)return t.preventDefault(),void w(l.lastTabbableNode);t.shiftKey||t.target!==l.lastTabbableNode||(t.preventDefault(),w(l.firstTabbableNode))}(t)}function _(t){c.clickOutsideDeactivates||r.contains(t.target)||(t.preventDefault(),t.stopImmediatePropagation())}function x(){var t=o(r);l.firstTabbableNode=t[0]||m(),l.lastTabbableNode=t[t.length-1]||m()}function w(t){t!==n.activeElement&&(t&&t.focus?(t.focus(),l.mostRecentlyFocusedNode=t,function(t){return t.tagName&&"input"===t.tagName.toLowerCase()&&"function"==typeof t.select}(t)&&t.select()):w(m()))}}},function(t,e,n){t.exports=n(87)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(88),n(114)},function(t,e,n){"use strict";var i=this&&this.__makeTemplateObject||function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t};Object.defineProperty(e,"__esModule",{value:!0});var r=n(37),o=n(60),s=n(76),u=n(80),a=n(101),c=n(57),l=n(115),f=new s.Screen,h=new a.ComponentManager;h.components.push(new u.Component("and",[200,100],[100,100])),h.components.push(new u.Component("not",[200,500],[100,100])),h.components.push(new u.Component("true",[200,500],[100,100])),h.components.push(new u.Component("false",[200,500],[100,100])),h.update();var d=function(t,e){"0"==h.barAlpha.value?e(t):"1"==h.barAlpha.value&&"mousedown"==t.type&&t.target!=document.getElementById("nameInput")&&h.barAlpha.next("0")};r.render(r.html(p||(p=i(["\n    <div @mousemove=","\n        @mousedown=","\n        @mouseup=","\n        @wheel=",">\n\n        <div id=",'\n        class=createBar>\n            <div class="topContainer">\n                <div>\n                    <input name="ComponentName" id="nameInput"\n                        placeholder=',"\n                    ></input>\n                </div>\n            </div>\n        </div>\n        <svg height=","\n            width=","\n            viewBox=",">\n            ",'\n        </svg>\n    </div>\n    <div class="ModalContainer"></div>\n    <aside class="mdc-drawer main-sidebar">\n    <div class="mdc-drawer__content">\n        <nav class="mdc-list">\n        <a class="mdc-list-item mdc-list-item--activated" href="#" aria-current="page">\n            <i class="material-icons mdc-list-item__graphic" aria-hidden="true">inbox</i>\n            <span class="mdc-list-item__text">Something</span>\n        </a>\n        <a class="mdc-list-item" href="#" id="openSimulation" @click=','>\n            <i class="material-icons mdc-list-item__graphic" aria-hidden="true">send</i>\n            <span class="mdc-list-item__text">Open simulation</span>\n        </a>\n        <a class="mdc-list-item" href="#">\n            <i class="material-icons mdc-list-item__graphic" aria-hidden="true">drafts</i>\n            <span class="mdc-list-item__text">another thing</span>\n        </a>\n        </nav>\n    </div>\n    </aside>\n\n    <div class="mdc-menu mdc-menu-surface mdc-theme--primary-bg mdc-theme--on-primary">\n        <ul class="mdc-list" role="menu" aria-hidden="true" aria-orientation="vertical" tabindex="-1">\n            <li class="mdc-list-item" role="menuitem">\n            <span class="mdc-list-item__text">A Menu Item</span>\n            </li>\n            <li class="mdc-list-item" role="menuitem">\n            <span class="mdc-list-item__text">Another Menu Item</span>\n            </li>\n        </ul>\n    </div>\n'],["\n    <div @mousemove=","\n        @mousedown=","\n        @mouseup=","\n        @wheel=",">\n\n        <div id=",'\n        class=createBar>\n            <div class="topContainer">\n                <div>\n                    <input name="ComponentName" id="nameInput"\n                        placeholder=',"\n                    ></input>\n                </div>\n            </div>\n        </div>\n        <svg height=","\n            width=","\n            viewBox=",">\n            ",'\n        </svg>\n    </div>\n    <div class="ModalContainer"></div>\n    <aside class="mdc-drawer main-sidebar">\n    <div class="mdc-drawer__content">\n        <nav class="mdc-list">\n        <a class="mdc-list-item mdc-list-item--activated" href="#" aria-current="page">\n            <i class="material-icons mdc-list-item__graphic" aria-hidden="true">inbox</i>\n            <span class="mdc-list-item__text">Something</span>\n        </a>\n        <a class="mdc-list-item" href="#" id="openSimulation" @click=','>\n            <i class="material-icons mdc-list-item__graphic" aria-hidden="true">send</i>\n            <span class="mdc-list-item__text">Open simulation</span>\n        </a>\n        <a class="mdc-list-item" href="#">\n            <i class="material-icons mdc-list-item__graphic" aria-hidden="true">drafts</i>\n            <span class="mdc-list-item__text">another thing</span>\n        </a>\n        </nav>\n    </div>\n    </aside>\n\n    <div class="mdc-menu mdc-menu-surface mdc-theme--primary-bg mdc-theme--on-primary">\n        <ul class="mdc-list" role="menu" aria-hidden="true" aria-orientation="vertical" tabindex="-1">\n            <li class="mdc-list-item" role="menuitem">\n            <span class="mdc-list-item__text">A Menu Item</span>\n            </li>\n            <li class="mdc-list-item" role="menuitem">\n            <span class="mdc-list-item__text">Another Menu Item</span>\n            </li>\n        </ul>\n    </div>\n'])),function(t){return d(t,function(t){h.handleMouseMove(t),f.updateMouse(t)})},function(t){return d(t,function(t){return h.handleMouseDown(t)})},function(t){return d(t,function(t){return h.handleMouseUp(t)})},function(t){return d(t,function(t){return f.handleScroll(t)})},o.subscribe(h.barAlpha.pipe(c.map(function(t){return"1"==t?"shown":""}))),o.subscribe(h.placeholder),o.subscribe(f.height),o.subscribe(f.width),o.subscribe(f.viewBox),o.subscribe(h.svgs),function(){v.open=!0}),document.body);var p,v=new l.MDCMenu(document.querySelector(".mdc-menu"));v.hoistMenuToBody(),v.setAnchorElement(document.querySelector("#openSimulation")),h.update()},function(t,e,n){"use strict";var i=this&&this.__decorate||function(t,e,n,i){var r,o=arguments.length,s=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var u=t.length-1;u>=0;u--)(r=t[u])&&(s=(o<3?r(s):o>3?r(e,n,s):r(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(36),s=n(55),u=n(57),a=r(n(79)),c=function(){function t(){var t=this;this.width=new o.BehaviorSubject(0),this.height=new o.BehaviorSubject(0),this.viewBox=o.combineLatest(this.width,this.height).pipe(u.map(function(e){return t.getViewBox.apply(t,e)})),this.position=[0,0],this.scale=[2,2],this.zoomLimits=[.1,10],this.scrollStep=1.3,this.mousePosition=[this.width.value/2,this.height.value/2],this.update(),o.fromEvent(window,"resize").subscribe(function(){return t.update()})}return t.prototype.updateMouse=function(t){this.mousePosition=[t.clientX,t.clientY]},t.prototype.handleScroll=function(t){var e=this;t.preventDefault();var n=[this.width.value,this.height.value],i=n.map(function(t,n){return e.mousePosition[n]/t}),r=t.deltaY/Math.abs(t.deltaY),o=Math.pow(this.scrollStep,r),s=this.scale.map(function(t){return a.default.apply(void 0,[t*o].concat(e.zoomLimits))}),u=this.scale.map(function(t,r){return n[r]*(s[r]-e.scale[r])*i[r]});this.scale=s,this.position=this.position.map(function(t,e){return t-u[e]}),this.update()},t.prototype.move=function(t,e){this.position[0]+=t*this.scale[0],this.position[1]+=e*this.scale[1],this.update()},t.prototype.getViewBox=function(t,e){return[this.position[0],this.position[1],this.scale[0]*t,this.scale[1]*e].join(" ")},t.prototype.update=function(){this.height.next(window.innerHeight),this.width.next(window.innerWidth)},t.prototype.getWorldPosition=function(t,e){return[t*this.scale[0],e*this.scale[1]]},t=i([s.Singleton],t)}();e.Screen=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=n(78);e.Singleton=function(t){let e;return class extends t{constructor(...t){if(e)return e;super(...t),this[i.debugKey]||(e=this)}}}},function(t,e,n){"use strict";var i=this&&this.__makeTemplateObject||function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t};Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(36),s=n(57),u=n(76),a=n(81),c=n(37),l=n(60),f=n(95),h=n(56),d=n(82),p=n(83),v=n(84),m=n(99),b=function(){function t(e,n,i,r){var u=this;void 0===n&&(n=[0,0]),void 0===i&&(i=[0,0]),this.template=e,this.position=new o.BehaviorSubject(null),this.scale=new o.BehaviorSubject(null),this.clicked=!1,this.clickedChanges=new o.BehaviorSubject(!1),this.strokeColor="#888888",this.subscriptions=[],this.inputPins=[],this.outputPins=[],this.position.next(n),this.scale.next(i),this.id="number"==typeof r?r:t.getId();var a=t.store.store.get(e);if(!a)throw new Error("Template "+e+" doesnt exist");this.inputs=a.inputs,this.outputs=a.outputs,this.inputPins=Array(this.inputs).slice().fill(!0).map(function(){return new f.Pin(!1,u)}),this.outputPins=Array(this.outputs).slice().fill(!0).map(function(){return new f.Pin(!0,u)}),this.activation=new Function("return (ctx) => {\n            try{\n                "+a.activation+'\n            }\n            catch(err){\n                ctx.error(err,"",ctx.alertOptions)\n            }\n        }')(),this.inputPins.forEach(function(t){var e=t.valueChanges.pipe(s.debounce(function(){return o.timer(1e3/60)})).subscribe(function(){return u.activate()});u.subscriptions.push(e)}),this.activate(),this.material=new m.Material(a.material.mode,a.material.data)}return t.prototype.dispose=function(){this.subscriptions.forEach(function(t){return t.unsubscribe()})},t.prototype.handleMouseUp=function(t){this.clicked=!1,this.clickedChanges.next(this.clicked)},t.prototype.activate=function(){this.activation({outputs:this.outputPins,inputs:this.inputPins,succes:function(t){h.success(t,"",d.alertOptions)},error:function(t){h.error(t,"",d.alertOptions)}})},t.prototype.move=function(e){var n=this,i=t.screen.getWorldPosition(e.clientX,e.clientY);this.position.next(i.map(function(t,e){return t-n.mouserDelta[e]}))},t.prototype.handleClick=function(e){var n=t.screen.getWorldPosition(e.clientX,e.clientY);this.mouserDelta=this.position.value.map(function(t,e){return n[e]-t}),this.clicked=!0,this.clickedChanges.next(this.clicked)},t.prototype.handlePinClick=function(e,n){t.wireManager.add(n)},Object.defineProperty(t.prototype,"state",{get:function(){return{position:this.position.value,scale:this.scale.value,template:this.template,id:this.id}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"x",{get:function(){return this.position.pipe(s.map(function(t){return t[0]}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.pipe(s.map(function(t){return t[1]}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.scale.pipe(s.map(function(t){return t[0]}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.scale.pipe(s.map(function(t){return t[1]}))},enumerable:!0,configurable:!0}),t.prototype.pinsSvg=function(t,e,n){var o=this;void 0===e&&(e=20),void 0===n&&(n="input");return("input"===n?this.inputPins:this.outputPins).map(function(u,a){var f=l.subscribe(o.piny("input"===n,a)),h=l.subscribe(o.pinx("input"===n,e)),d=l.subscribe(o.x.pipe(s.map(function(t){return t+("input"===n?-e:e+o.scale.value[0])}))),p=l.subscribe(o.x.pipe(s.map(function(t){var e=o.scale.value[0];return t+("input"===n?e/10:9*e/10)})));return c.svg(r||(r=i(["\n                    <line stroke="," y1="," y2=","\n                    x1=","\n                    x2=","\n                    stroke-width=","></line>\n\n                    <circle fill=","\n                    stroke=","\n                    r=","\n                    cx=","\n                    cy="," stroke-width=","\n                    @click=","\n                    ></circle>\n                "],["\n                    <line stroke="," y1="," y2=","\n                    x1=","\n                    x2=","\n                    stroke-width=","></line>\n\n                    <circle fill=","\n                    stroke=","\n                    r=","\n                    cx=","\n                    cy="," stroke-width=","\n                    @click=","\n                    ></circle>\n                "])),o.strokeColor,f,f,"input"===n?d:p,"input"!==n?d:p,3,l.subscribe(u.svgColor),o.strokeColor,t,h,f,3,function(t){return o.handlePinClick(t,u)})})},t.prototype.pinx=function(t,e){var n=this;return void 0===t&&(t=!0),void 0===e&&(e=15),this.x.pipe(s.map(function(i){return i+(t?-e:n.scale.value[0]+e)}))},t.prototype.piny=function(t,e){void 0===t&&(t=!0);var n=this.scale.value[1]/(t?this.inputs:this.outputs);return this.y.pipe(s.map(function(t){return t+n*(2*e+1)/2}))},t.fromState=function(e){return new t(e.template,e.position,e.scale,e.id)},t.getId=function(){var t=v.runCounter.get();return v.runCounter.increase(),t},t.store=new a.ComponentTemplateStore,t.screen=new u.Screen,t.wireManager=new p.WireManager,t}();e.Component=b},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this.name=t}return t.prototype.get=function(t){var e=localStorage[this.name+"/"+t];return e?JSON.parse(e).value:null},t.prototype.set=function(t,e){return localStorage[this.name+"/"+t]=JSON.stringify({value:e}),this},t.prototype.ls=function(){var t=[];for(var e in localStorage)0==e.indexOf(this.name)&&t.push(e.substr(this.name.length+1));return t},t}();e.Store=i},function(t,e,n){var i;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var o=[],s=n.document,u=Object.getPrototypeOf,a=o.slice,c=o.concat,l=o.push,f=o.indexOf,h={},d=h.toString,p=h.hasOwnProperty,v=p.toString,m=v.call(Object),b={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},g=function(t){return null!=t&&t===t.window},_={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,n){var i,r,o=(n=n||s).createElement("script");if(o.text=t,e)for(i in _)(r=e[i]||e.getAttribute&&e.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[d.call(t)]||"object":typeof t}var E=function(t,e){return new E.fn.init(t,e)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function S(t){var e=!!t&&"length"in t&&t.length,n=w(t);return!y(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}E.fn=E.prototype={jquery:"3.4.1",constructor:E,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=E.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return E.each(this,t)},map:function(t){return this.pushStack(E.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},E.extend=E.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},u=1,a=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[u]||{},u++),"object"==typeof s||y(s)||(s={}),u===a&&(s=this,u--);u<a;u++)if(null!=(t=arguments[u]))for(e in t)i=t[e],"__proto__"!==e&&s!==i&&(c&&i&&(E.isPlainObject(i)||(r=Array.isArray(i)))?(n=s[e],o=r&&!Array.isArray(n)?[]:r||E.isPlainObject(n)?n:{},r=!1,s[e]=E.extend(c,o,i)):void 0!==i&&(s[e]=i));return s},E.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==d.call(t))&&(!(e=u(t))||"function"==typeof(n=p.call(e,"constructor")&&e.constructor)&&v.call(n)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){x(t,{nonce:e&&e.nonce})},each:function(t,e){var n,i=0;if(S(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(T,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(S(Object(t))?E.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:f.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,s=!n;r<o;r++)!e(t[r],r)!==s&&i.push(t[r]);return i},map:function(t,e,n){var i,r,o=0,s=[];if(S(t))for(i=t.length;o<i;o++)null!=(r=e(t[o],o,n))&&s.push(r);else for(o in t)null!=(r=e(t[o],o,n))&&s.push(r);return c.apply([],s)},guid:1,support:b}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=o[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){h["[object "+e+"]"]=e.toLowerCase()});var C=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(t){var e,n,i,r,o,s,u,a,c,l,f,h,d,p,v,m,b,y,g,_="sizzle"+1*new Date,x=t.document,w=0,E=0,T=at(),S=at(),C=at(),O=at(),I=function(t,e){return t===e&&(f=!0),0},A={}.hasOwnProperty,N=[],j=N.pop,k=N.push,L=N.push,D=N.slice,P=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",H="\\["+R+"*("+F+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+R+"*\\]",B=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",V=new RegExp(R+"+","g"),q=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),U=new RegExp("^"+R+"*,"+R+"*"),W=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),z=new RegExp(R+"|>"),G=new RegExp(B),K=new RegExp("^"+F+"$"),X={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},$=/HTML$/i,Y=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\([\\da-f]{1,6}"+R+"?|("+R+")|.)","ig"),nt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},it=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,rt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){h()},st=_t(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{L.apply(N=D.call(x.childNodes),x.childNodes),N[x.childNodes.length].nodeType}catch(t){L={apply:N.length?function(t,e){k.apply(t,D.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function ut(t,e,i,r){var o,u,c,l,f,p,b,y=e&&e.ownerDocument,w=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==w&&9!==w&&11!==w)return i;if(!r&&((e?e.ownerDocument||e:x)!==d&&h(e),e=e||d,v)){if(11!==w&&(f=Z.exec(t)))if(o=f[1]){if(9===w){if(!(c=e.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(y&&(c=y.getElementById(o))&&g(e,c)&&c.id===o)return i.push(c),i}else{if(f[2])return L.apply(i,e.getElementsByTagName(t)),i;if((o=f[3])&&n.getElementsByClassName&&e.getElementsByClassName)return L.apply(i,e.getElementsByClassName(o)),i}if(n.qsa&&!O[t+" "]&&(!m||!m.test(t))&&(1!==w||"object"!==e.nodeName.toLowerCase())){if(b=t,y=e,1===w&&z.test(t)){for((l=e.getAttribute("id"))?l=l.replace(it,rt):e.setAttribute("id",l=_),u=(p=s(t)).length;u--;)p[u]="#"+l+" "+gt(p[u]);b=p.join(","),y=tt.test(t)&&bt(e.parentNode)||e}try{return L.apply(i,y.querySelectorAll(b)),i}catch(e){O(t,!0)}finally{l===_&&e.removeAttribute("id")}}}return a(t.replace(q,"$1"),e,i,r)}function at(){var t=[];return function e(n,r){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=r}}function ct(t){return t[_]=!0,t}function lt(t){var e=d.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ft(t,e){for(var n=t.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=e}function ht(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function dt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function pt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function vt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&st(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ct(function(e){return e=+e,ct(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function bt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=ut.support={},o=ut.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!$.test(e||n&&n.nodeName||"HTML")},h=ut.setDocument=function(t){var e,r,s=t?t.ownerDocument||t:x;return s!==d&&9===s.nodeType&&s.documentElement?(p=(d=s).documentElement,v=!o(d),x!==d&&(r=d.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ot,!1):r.attachEvent&&r.attachEvent("onunload",ot)),n.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=lt(function(t){return t.appendChild(d.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=J.test(d.getElementsByClassName),n.getById=lt(function(t){return p.appendChild(t).id=_,!d.getElementsByName||!d.getElementsByName(_).length}),n.getById?(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&v){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&v){var n,i,r,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(r=e.getElementsByName(t),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&v)return e.getElementsByClassName(t)},b=[],m=[],(n.qsa=J.test(d.querySelectorAll))&&(lt(function(t){p.appendChild(t).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+R+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+R+"*(?:value|"+M+")"),t.querySelectorAll("[id~="+_+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+_+"+*").length||m.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=d.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+R+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),p.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=J.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&lt(function(t){n.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),b.push("!=",B)}),m=m.length&&new RegExp(m.join("|")),b=b.length&&new RegExp(b.join("|")),e=J.test(p.compareDocumentPosition),g=e||J.test(p.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},I=e?function(t,e){if(t===e)return f=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t===d||t.ownerDocument===x&&g(x,t)?-1:e===d||e.ownerDocument===x&&g(x,e)?1:l?P(l,t)-P(l,e):0:4&i?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,s=[t],u=[e];if(!r||!o)return t===d?-1:e===d?1:r?-1:o?1:l?P(l,t)-P(l,e):0;if(r===o)return ht(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;s[i]===u[i];)i++;return i?ht(s[i],u[i]):s[i]===x?-1:u[i]===x?1:0},d):d},ut.matches=function(t,e){return ut(t,null,null,e)},ut.matchesSelector=function(t,e){if((t.ownerDocument||t)!==d&&h(t),n.matchesSelector&&v&&!O[e+" "]&&(!b||!b.test(e))&&(!m||!m.test(e)))try{var i=y.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){O(e,!0)}return ut(e,d,null,[t]).length>0},ut.contains=function(t,e){return(t.ownerDocument||t)!==d&&h(t),g(t,e)},ut.attr=function(t,e){(t.ownerDocument||t)!==d&&h(t);var r=i.attrHandle[e.toLowerCase()],o=r&&A.call(i.attrHandle,e.toLowerCase())?r(t,e,!v):void 0;return void 0!==o?o:n.attributes||!v?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},ut.escape=function(t){return(t+"").replace(it,rt)},ut.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ut.uniqueSort=function(t){var e,i=[],r=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&t.slice(0),t.sort(I),f){for(;e=t[o++];)e===t[o]&&(r=i.push(o));for(;r--;)t.splice(i[r],1)}return l=null,t},r=ut.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=r(e);return n},(i=ut.selectors={cacheLength:50,createPseudo:ct,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ut.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ut.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&G.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=T[t+" "];return e||(e=new RegExp("(^|"+R+")"+t+"("+R+"|$)"))&&T(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(i){var r=ut.attr(i,t);return null==r?"!="===e:!e||(r+="","="===e?r===n:"!="===e?r!==n:"^="===e?n&&0===r.indexOf(n):"*="===e?n&&r.indexOf(n)>-1:"$="===e?n&&r.slice(-n.length)===n:"~="===e?(" "+r.replace(V," ")+" ").indexOf(n)>-1:"|="===e&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),u="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,a){var c,l,f,h,d,p,v=o!==s?"nextSibling":"previousSibling",m=e.parentNode,b=u&&e.nodeName.toLowerCase(),y=!a&&!u,g=!1;if(m){if(o){for(;v;){for(h=e;h=h[v];)if(u?h.nodeName.toLowerCase()===b:1===h.nodeType)return!1;p=v="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?m.firstChild:m.lastChild],s&&y){for(g=(d=(c=(l=(f=(h=m)[_]||(h[_]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===w&&c[1])&&c[2],h=d&&m.childNodes[d];h=++d&&h&&h[v]||(g=d=0)||p.pop();)if(1===h.nodeType&&++g&&h===e){l[t]=[w,d,g];break}}else if(y&&(g=d=(c=(l=(f=(h=e)[_]||(h[_]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===w&&c[1]),!1===g)for(;(h=++d&&h&&h[v]||(g=d=0)||p.pop())&&((u?h.nodeName.toLowerCase()!==b:1!==h.nodeType)||!++g||(y&&((l=(f=h[_]||(h[_]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]=[w,g]),h!==e)););return(g-=r)===i||g%i==0&&g/i>=0}}},PSEUDO:function(t,e){var n,r=i.pseudos[t]||i.setFilters[t.toLowerCase()]||ut.error("unsupported pseudo: "+t);return r[_]?r(e):r.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?ct(function(t,n){for(var i,o=r(t,e),s=o.length;s--;)t[i=P(t,o[s])]=!(n[i]=o[s])}):function(t){return r(t,0,n)}):r}},pseudos:{not:ct(function(t){var e=[],n=[],i=u(t.replace(q,"$1"));return i[_]?ct(function(t,e,n,r){for(var o,s=i(t,null,r,[]),u=t.length;u--;)(o=s[u])&&(t[u]=!(e[u]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:ct(function(t){return function(e){return ut(t,e).length>0}}),contains:ct(function(t){return t=t.replace(et,nt),function(e){return(e.textContent||r(e)).indexOf(t)>-1}}),lang:ct(function(t){return K.test(t||"")||ut.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=v?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===p},focus:function(t){return t===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:vt(!1),disabled:vt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return Y.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt(function(){return[0]}),last:mt(function(t,e){return[e-1]}),eq:mt(function(t,e,n){return[n<0?n+e:n]}),even:mt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:mt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:mt(function(t,e,n){for(var i=n<0?n+e:n>e?e:n;--i>=0;)t.push(i);return t}),gt:mt(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=dt(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=pt(e);function yt(){}function gt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function _t(t,e,n){var i=e.dir,r=e.next,o=r||i,s=n&&"parentNode"===o,u=E++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,r);return!1}:function(e,n,a){var c,l,f,h=[w,u];if(a){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,a))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(l=(f=e[_]||(e[_]={}))[e.uniqueID]||(f[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((c=l[o])&&c[0]===w&&c[1]===u)return h[2]=c[2];if(l[o]=h,h[2]=t(e,n,a))return!0}return!1}}function xt(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function wt(t,e,n,i,r){for(var o,s=[],u=0,a=t.length,c=null!=e;u<a;u++)(o=t[u])&&(n&&!n(o,i,r)||(s.push(o),c&&e.push(u)));return s}function Et(t,e,n,i,r,o){return i&&!i[_]&&(i=Et(i)),r&&!r[_]&&(r=Et(r,o)),ct(function(o,s,u,a){var c,l,f,h=[],d=[],p=s.length,v=o||function(t,e,n){for(var i=0,r=e.length;i<r;i++)ut(t,e[i],n);return n}(e||"*",u.nodeType?[u]:u,[]),m=!t||!o&&e?v:wt(v,h,t,u,a),b=n?r||(o?t:p||i)?[]:s:m;if(n&&n(m,b,u,a),i)for(c=wt(b,d),i(c,[],u,a),l=c.length;l--;)(f=c[l])&&(b[d[l]]=!(m[d[l]]=f));if(o){if(r||t){if(r){for(c=[],l=b.length;l--;)(f=b[l])&&c.push(m[l]=f);r(null,b=[],c,a)}for(l=b.length;l--;)(f=b[l])&&(c=r?P(o,f):h[l])>-1&&(o[c]=!(s[c]=f))}}else b=wt(b===s?b.splice(p,b.length):b),r?r(null,s,b,a):L.apply(s,b)})}function Tt(t){for(var e,n,r,o=t.length,s=i.relative[t[0].type],u=s||i.relative[" "],a=s?1:0,l=_t(function(t){return t===e},u,!0),f=_t(function(t){return P(e,t)>-1},u,!0),h=[function(t,n,i){var r=!s&&(i||n!==c)||((e=n).nodeType?l(t,n,i):f(t,n,i));return e=null,r}];a<o;a++)if(n=i.relative[t[a].type])h=[_t(xt(h),n)];else{if((n=i.filter[t[a].type].apply(null,t[a].matches))[_]){for(r=++a;r<o&&!i.relative[t[r].type];r++);return Et(a>1&&xt(h),a>1&&gt(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(q,"$1"),n,a<r&&Tt(t.slice(a,r)),r<o&&Tt(t=t.slice(r)),r<o&&gt(t))}h.push(n)}return xt(h)}return yt.prototype=i.filters=i.pseudos,i.setFilters=new yt,s=ut.tokenize=function(t,e){var n,r,o,s,u,a,c,l=S[t+" "];if(l)return e?0:l.slice(0);for(u=t,a=[],c=i.preFilter;u;){for(s in n&&!(r=U.exec(u))||(r&&(u=u.slice(r[0].length)||u),a.push(o=[])),n=!1,(r=W.exec(u))&&(n=r.shift(),o.push({value:n,type:r[0].replace(q," ")}),u=u.slice(n.length)),i.filter)!(r=X[s].exec(u))||c[s]&&!(r=c[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),u=u.slice(n.length));if(!n)break}return e?u.length:u?ut.error(t):S(t,a).slice(0)},u=ut.compile=function(t,e){var n,r=[],o=[],u=C[t+" "];if(!u){for(e||(e=s(t)),n=e.length;n--;)(u=Tt(e[n]))[_]?r.push(u):o.push(u);(u=C(t,function(t,e){var n=e.length>0,r=t.length>0,o=function(o,s,u,a,l){var f,p,m,b=0,y="0",g=o&&[],_=[],x=c,E=o||r&&i.find.TAG("*",l),T=w+=null==x?1:Math.random()||.1,S=E.length;for(l&&(c=s===d||s||l);y!==S&&null!=(f=E[y]);y++){if(r&&f){for(p=0,s||f.ownerDocument===d||(h(f),u=!v);m=t[p++];)if(m(f,s||d,u)){a.push(f);break}l&&(w=T)}n&&((f=!m&&f)&&b--,o&&g.push(f))}if(b+=y,n&&y!==b){for(p=0;m=e[p++];)m(g,_,s,u);if(o){if(b>0)for(;y--;)g[y]||_[y]||(_[y]=j.call(a));_=wt(_)}L.apply(a,_),l&&!o&&_.length>0&&b+e.length>1&&ut.uniqueSort(a)}return l&&(w=T,c=x),g};return n?ct(o):o}(o,r))).selector=t}return u},a=ut.select=function(t,e,n,r){var o,a,c,l,f,h="function"==typeof t&&t,d=!r&&s(t=h.selector||t);if(n=n||[],1===d.length){if((a=d[0]=d[0].slice(0)).length>2&&"ID"===(c=a[0]).type&&9===e.nodeType&&v&&i.relative[a[1].type]){if(!(e=(i.find.ID(c.matches[0].replace(et,nt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(a.shift().value.length)}for(o=X.needsContext.test(t)?0:a.length;o--&&(c=a[o],!i.relative[l=c.type]);)if((f=i.find[l])&&(r=f(c.matches[0].replace(et,nt),tt.test(a[0].type)&&bt(e.parentNode)||e))){if(a.splice(o,1),!(t=r.length&&gt(a)))return L.apply(n,r),n;break}}return(h||u(t,d))(r,e,!v,n,!e||tt.test(t)&&bt(e.parentNode)||e),n},n.sortStable=_.split("").sort(I).join("")===_,n.detectDuplicates=!!f,h(),n.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(d.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ft("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ft("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||ft(M,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),ut}(n);E.find=C,E.expr=C.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=C.uniqueSort,E.text=C.getText,E.isXMLDoc=C.isXML,E.contains=C.contains,E.escapeSelector=C.escape;var O=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&E(t).is(n))break;i.push(t)}return i},I=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},A=E.expr.match.needsContext;function N(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var j=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function k(t,e,n){return y(e)?E.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?E.grep(t,function(t){return t===e!==n}):"string"!=typeof e?E.grep(t,function(t){return f.call(e,t)>-1!==n}):E.filter(e,t,n)}E.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?E.find.matchesSelector(i,t)?[i]:[]:E.find.matches(t,E.grep(e,function(t){return 1===t.nodeType}))},E.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(E(t).filter(function(){for(e=0;e<i;e++)if(E.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)E.find(t,r[e],n);return i>1?E.uniqueSort(n):n},filter:function(t){return this.pushStack(k(this,t||[],!1))},not:function(t){return this.pushStack(k(this,t||[],!0))},is:function(t){return!!k(this,"string"==typeof t&&A.test(t)?E(t):t||[],!1).length}});var L,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||L,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:D.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof E?e[0]:e,E.merge(this,E.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:s,!0)),j.test(i[1])&&E.isPlainObject(e))for(i in e)y(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=s.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==n.ready?n.ready(t):t(E):E.makeArray(t,this)}).prototype=E.fn,L=E(s);var P=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function R(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}E.fn.extend({has:function(t){var e=E(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(E.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,o=[],s="string"!=typeof t&&E(t);if(!A.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?E.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?f.call(E(t),this[0]):f.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),E.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return O(t,"parentNode")},parentsUntil:function(t,e,n){return O(t,"parentNode",n)},next:function(t){return R(t,"nextSibling")},prev:function(t){return R(t,"previousSibling")},nextAll:function(t){return O(t,"nextSibling")},prevAll:function(t){return O(t,"previousSibling")},nextUntil:function(t,e,n){return O(t,"nextSibling",n)},prevUntil:function(t,e,n){return O(t,"previousSibling",n)},siblings:function(t){return I((t.parentNode||{}).firstChild,t)},children:function(t){return I(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(N(t,"template")&&(t=t.content||t),E.merge([],t.childNodes))}},function(t,e){E.fn[t]=function(n,i){var r=E.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=E.filter(i,r)),this.length>1&&(M[t]||E.uniqueSort(r),P.test(t)&&r.reverse()),this.pushStack(r)}});var F=/[^\x20\t\r\n\f]+/g;function H(t){return t}function B(t){throw t}function V(t,e,n,i){var r;try{t&&y(r=t.promise)?r.call(t).done(e).fail(n):t&&y(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}E.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return E.each(t.match(F)||[],function(t,n){e[n]=!0}),e}(t):E.extend({},t);var e,n,i,r,o=[],s=[],u=-1,a=function(){for(r=r||t.once,i=e=!0;s.length;u=-1)for(n=s.shift();++u<o.length;)!1===o[u].apply(n[0],n[1])&&t.stopOnFalse&&(u=o.length,n=!1);t.memory||(n=!1),e=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(u=o.length-1,s.push(n)),function e(n){E.each(n,function(n,i){y(i)?t.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==w(i)&&e(i)})}(arguments),n&&!e&&a()),this},remove:function(){return E.each(arguments,function(t,e){for(var n;(n=E.inArray(e,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(t){return t?E.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||e||(o=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||a()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},E.extend({Deferred:function(t){var e=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return E.Deferred(function(n){E.each(e,function(e,i){var r=y(t[i[4]])&&t[i[4]];o[i[1]](function(){var t=r&&r.apply(this,arguments);t&&y(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(t,i,r){var o=0;function s(t,e,i,r){return function(){var u=this,a=arguments,c=function(){var n,c;if(!(t<o)){if((n=i.apply(u,a))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(c)?r?c.call(n,s(o,e,H,r),s(o,e,B,r)):(o++,c.call(n,s(o,e,H,r),s(o,e,B,r),s(o,e,H,e.notifyWith))):(i!==H&&(u=void 0,a=[n]),(r||e.resolveWith)(u,a))}},l=r?c:function(){try{c()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,l.stackTrace),t+1>=o&&(i!==B&&(u=void 0,a=[n]),e.rejectWith(u,a))}};t?l():(E.Deferred.getStackHook&&(l.stackTrace=E.Deferred.getStackHook()),n.setTimeout(l))}}return E.Deferred(function(n){e[0][3].add(s(0,n,y(r)?r:H,n.notifyWith)),e[1][3].add(s(0,n,y(t)?t:H)),e[2][3].add(s(0,n,y(i)?i:B))}).promise()},promise:function(t){return null!=t?E.extend(t,r):r}},o={};return E.each(e,function(t,n){var s=n[2],u=n[5];r[n[1]]=s.add,u&&s.add(function(){i=u},e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,i=Array(n),r=a.call(arguments),o=E.Deferred(),s=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?a.call(arguments):n,--e||o.resolveWith(i,r)}};if(e<=1&&(V(t,o.done(s(n)).resolve,o.reject,!e),"pending"===o.state()||y(r[n]&&r[n].then)))return o.then();for(;n--;)V(r[n],s(n),o.reject);return o.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&q.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},E.readyException=function(t){n.setTimeout(function(){throw t})};var U=E.Deferred();function W(){s.removeEventListener("DOMContentLoaded",W),n.removeEventListener("load",W),E.ready()}E.fn.ready=function(t){return U.then(t).catch(function(t){E.readyException(t)}),this},E.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==t&&--E.readyWait>0||U.resolveWith(s,[E]))}}),E.ready.then=U.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(E.ready):(s.addEventListener("DOMContentLoaded",W),n.addEventListener("load",W));var z=function(t,e,n,i,r,o,s){var u=0,a=t.length,c=null==n;if("object"===w(n))for(u in r=!0,n)z(t,e,u,n[u],!0,o,s);else if(void 0!==i&&(r=!0,y(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(E(t),n)})),e))for(;u<a;u++)e(t[u],n,s?i:i.call(t[u],u,e(t[u],n)));return r?t:c?e.call(t):a?e(t[0],n):o},G=/^-ms-/,K=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function $(t){return t.replace(G,"ms-").replace(K,X)}var Y=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Q(){this.expando=E.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[$(e)]=n;else for(i in e)r[$(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][$(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map($):(e=$(e))in i?[e]:e.match(F)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||E.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!E.isEmptyObject(e)}};var J=new Q,Z=new Q,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}E.extend({hasData:function(t){return Z.hasData(t)||J.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return J.access(t,e,n)},_removeData:function(t,e){J.remove(t,e)}}),E.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=Z.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=$(i.slice(5)),nt(o,i,r[i]));J.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){Z.set(this,t)}):z(this,function(e){var n;if(o&&void 0===e)return void 0!==(n=Z.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each(function(){Z.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Z.remove(this,t)})}}),E.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=J.get(t,e),n&&(!i||Array.isArray(n)?i=J.access(t,e,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=E.queue(t,e),i=n.length,r=n.shift(),o=E._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,function(){E.dequeue(t,e)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return J.get(t,n)||J.access(t,n,{empty:E.Callbacks("once memory").add(function(){J.remove(t,[e+"queue",n])})})}}),E.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?E.queue(this[0],t):void 0===e?this:this.each(function(){var n=E.queue(this,t,e);E._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&E.dequeue(this,t)})},dequeue:function(t){return this.each(function(){E.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=E.Deferred(),o=this,s=this.length,u=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=J.get(o[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(u));return u(),r.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,rt=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],st=s.documentElement,ut=function(t){return E.contains(t.ownerDocument,t)},at={composed:!0};st.getRootNode&&(ut=function(t){return E.contains(t.ownerDocument,t)||t.getRootNode(at)===t.ownerDocument});var ct=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&ut(t)&&"none"===E.css(t,"display")},lt=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];for(o in r=n.apply(t,i||[]),e)t.style[o]=s[o];return r};function ft(t,e,n,i){var r,o,s=20,u=i?function(){return i.cur()}:function(){return E.css(t,e,"")},a=u(),c=n&&n[3]||(E.cssNumber[e]?"":"px"),l=t.nodeType&&(E.cssNumber[e]||"px"!==c&&+a)&&rt.exec(E.css(t,e));if(l&&l[3]!==c){for(a/=2,c=c||l[3],l=+a||1;s--;)E.style(t,e,l+c),(1-o)*(1-(o=u()/a||.5))<=0&&(s=0),l/=o;l*=2,E.style(t,e,l+c),n=n||[]}return n&&(l=+l||+a||0,r=n[1]?l+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=l,i.end=r)),r}var ht={};function dt(t){var e,n=t.ownerDocument,i=t.nodeName,r=ht[i];return r||(e=n.body.appendChild(n.createElement(i)),r=E.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),ht[i]=r,r)}function pt(t,e){for(var n,i,r=[],o=0,s=t.length;o<s;o++)(i=t[o]).style&&(n=i.style.display,e?("none"===n&&(r[o]=J.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&ct(i)&&(r[o]=dt(i))):"none"!==n&&(r[o]="none",J.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(t[o].style.display=r[o]);return t}E.fn.extend({show:function(){return pt(this,!0)},hide:function(){return pt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){ct(this)?E(this).show():E(this).hide()})}});var vt=/^(?:checkbox|radio)$/i,mt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,bt=/^$|^module$|\/(?:java|ecma)script/i,yt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function gt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&N(t,e)?E.merge([t],n):n}function _t(t,e){for(var n=0,i=t.length;n<i;n++)J.set(t[n],"globalEval",!e||J.get(e[n],"globalEval"))}yt.optgroup=yt.option,yt.tbody=yt.tfoot=yt.colgroup=yt.caption=yt.thead,yt.th=yt.td;var xt,wt,Et=/<|&#?\w+;/;function Tt(t,e,n,i,r){for(var o,s,u,a,c,l,f=e.createDocumentFragment(),h=[],d=0,p=t.length;d<p;d++)if((o=t[d])||0===o)if("object"===w(o))E.merge(h,o.nodeType?[o]:o);else if(Et.test(o)){for(s=s||f.appendChild(e.createElement("div")),u=(mt.exec(o)||["",""])[1].toLowerCase(),a=yt[u]||yt._default,s.innerHTML=a[1]+E.htmlPrefilter(o)+a[2],l=a[0];l--;)s=s.lastChild;E.merge(h,s.childNodes),(s=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",d=0;o=h[d++];)if(i&&E.inArray(o,i)>-1)r&&r.push(o);else if(c=ut(o),s=gt(f.appendChild(o),"script"),c&&_t(s),n)for(l=0;o=s[l++];)bt.test(o.type||"")&&n.push(o);return f}xt=s.createDocumentFragment().appendChild(s.createElement("div")),(wt=s.createElement("input")).setAttribute("type","radio"),wt.setAttribute("checked","checked"),wt.setAttribute("name","t"),xt.appendChild(wt),b.checkClone=xt.cloneNode(!0).cloneNode(!0).lastChild.checked,xt.innerHTML="<textarea>x</textarea>",b.noCloneChecked=!!xt.cloneNode(!0).lastChild.defaultValue;var St=/^key/,Ct=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ot=/^([^.]*)(?:\.(.+)|)/;function It(){return!0}function At(){return!1}function Nt(t,e){return t===function(){try{return s.activeElement}catch(t){}}()==("focus"===e)}function jt(t,e,n,i,r,o){var s,u;if("object"==typeof e){for(u in"string"!=typeof n&&(i=i||n,n=void 0),e)jt(t,u,n,i,e[u],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=At;else if(!r)return t;return 1===o&&(s=r,(r=function(t){return E().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=E.guid++)),t.each(function(){E.event.add(this,e,r,i,n)})}function kt(t,e,n){n?(J.set(t,e,!1),E.event.add(t,e,{namespace:!1,handler:function(t){var i,r,o=J.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(E.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=a.call(arguments),J.set(this,e,o),i=n(this,e),this[e](),o!==(r=J.get(this,e))||i?J.set(this,e,!1):r={},o!==r)return t.stopImmediatePropagation(),t.preventDefault(),r.value}else o.length&&(J.set(this,e,{value:E.event.trigger(E.extend(o[0],E.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===J.get(t,e)&&E.event.add(t,e,It)}E.event={global:{},add:function(t,e,n,i,r){var o,s,u,a,c,l,f,h,d,p,v,m=J.get(t);if(m)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&E.find.matchesSelector(st,r),n.guid||(n.guid=E.guid++),(a=m.events)||(a=m.events={}),(s=m.handle)||(s=m.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(F)||[""]).length;c--;)d=v=(u=Ot.exec(e[c])||[])[1],p=(u[2]||"").split(".").sort(),d&&(f=E.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,f=E.event.special[d]||{},l=E.extend({type:d,origType:v,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:p.join(".")},o),(h=a[d])||((h=a[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,i,p,s)||t.addEventListener&&t.addEventListener(d,s)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,l):h.push(l),E.event.global[d]=!0)},remove:function(t,e,n,i,r){var o,s,u,a,c,l,f,h,d,p,v,m=J.hasData(t)&&J.get(t);if(m&&(a=m.events)){for(c=(e=(e||"").match(F)||[""]).length;c--;)if(d=v=(u=Ot.exec(e[c])||[])[1],p=(u[2]||"").split(".").sort(),d){for(f=E.event.special[d]||{},h=a[d=(i?f.delegateType:f.bindType)||d]||[],u=u[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=h.length;o--;)l=h[o],!r&&v!==l.origType||n&&n.guid!==l.guid||u&&!u.test(l.namespace)||i&&i!==l.selector&&("**"!==i||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(t,l));s&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,p,m.handle)||E.removeEvent(t,d,m.handle),delete a[d])}else for(d in a)E.event.remove(t,d+e[c],n,i,!0);E.isEmptyObject(a)&&J.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,o,s,u=E.event.fix(t),a=new Array(arguments.length),c=(J.get(this,"events")||{})[u.type]||[],l=E.event.special[u.type]||{};for(a[0]=u,e=1;e<arguments.length;e++)a[e]=arguments[e];if(u.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,u)){for(s=E.event.handlers.call(this,u,c),e=0;(r=s[e++])&&!u.isPropagationStopped();)for(u.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(i=((E.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a))&&!1===(u.result=i)&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(t,e){var n,i,r,o,s,u=[],a=e.delegateCount,c=t.target;if(a&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],s={},n=0;n<a;n++)void 0===s[r=(i=e[n]).selector+" "]&&(s[r]=i.needsContext?E(r,this).index(c)>-1:E.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&u.push({elem:c,handlers:o})}return c=this,a<e.length&&u.push({elem:c,handlers:e.slice(a)}),u},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[E.expando]?t:new E.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return vt.test(e.type)&&e.click&&N(e,"input")&&kt(e,"click",It),!1},trigger:function(t){var e=this||t;return vt.test(e.type)&&e.click&&N(e,"input")&&kt(e,"click"),!0},_default:function(t){var e=t.target;return vt.test(e.type)&&e.click&&N(e,"input")&&J.get(e,"click")||N(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},E.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},E.Event=function(t,e){if(!(this instanceof E.Event))return new E.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?It:At,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&E.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:At,isPropagationStopped:At,isImmediatePropagationStopped:At,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=It,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=It,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=It,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&St.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Ct.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},function(t,e){E.event.special[t]={setup:function(){return kt(this,t,Nt),!1},trigger:function(){return kt(this,t),!0},delegateType:e}}),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){E.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,r=t.handleObj;return i&&(i===this||E.contains(this,i))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),E.fn.extend({on:function(t,e,n,i){return jt(this,t,e,n,i)},one:function(t,e,n,i){return jt(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,E(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=At),this.each(function(){E.event.remove(this,t,n,e)})}});var Lt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Dt=/<script|<style|<link/i,Pt=/checked\s*(?:[^=]|=\s*.checked.)/i,Mt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Rt(t,e){return N(t,"table")&&N(11!==e.nodeType?e:e.firstChild,"tr")&&E(t).children("tbody")[0]||t}function Ft(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ht(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Bt(t,e){var n,i,r,o,s,u,a,c;if(1===e.nodeType){if(J.hasData(t)&&(o=J.access(t),s=J.set(e,o),c=o.events))for(r in delete s.handle,s.events={},c)for(n=0,i=c[r].length;n<i;n++)E.event.add(e,r,c[r][n]);Z.hasData(t)&&(u=Z.access(t),a=E.extend({},u),Z.set(e,a))}}function Vt(t,e,n,i){e=c.apply([],e);var r,o,s,u,a,l,f=0,h=t.length,d=h-1,p=e[0],v=y(p);if(v||h>1&&"string"==typeof p&&!b.checkClone&&Pt.test(p))return t.each(function(r){var o=t.eq(r);v&&(e[0]=p.call(this,r,o.html())),Vt(o,e,n,i)});if(h&&(o=(r=Tt(e,t[0].ownerDocument,!1,t,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(u=(s=E.map(gt(r,"script"),Ft)).length;f<h;f++)a=r,f!==d&&(a=E.clone(a,!0,!0),u&&E.merge(s,gt(a,"script"))),n.call(t[f],a,f);if(u)for(l=s[s.length-1].ownerDocument,E.map(s,Ht),f=0;f<u;f++)a=s[f],bt.test(a.type||"")&&!J.access(a,"globalEval")&&E.contains(l,a)&&(a.src&&"module"!==(a.type||"").toLowerCase()?E._evalUrl&&!a.noModule&&E._evalUrl(a.src,{nonce:a.nonce||a.getAttribute("nonce")}):x(a.textContent.replace(Mt,""),a,l))}return t}function qt(t,e,n){for(var i,r=e?E.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||E.cleanData(gt(i)),i.parentNode&&(n&&ut(i)&&_t(gt(i,"script")),i.parentNode.removeChild(i));return t}E.extend({htmlPrefilter:function(t){return t.replace(Lt,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,u,a,c,l=t.cloneNode(!0),f=ut(t);if(!(b.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||E.isXMLDoc(t)))for(s=gt(l),i=0,r=(o=gt(t)).length;i<r;i++)u=o[i],a=s[i],c=void 0,"input"===(c=a.nodeName.toLowerCase())&&vt.test(u.type)?a.checked=u.checked:"input"!==c&&"textarea"!==c||(a.defaultValue=u.defaultValue);if(e)if(n)for(o=o||gt(t),s=s||gt(l),i=0,r=o.length;i<r;i++)Bt(o[i],s[i]);else Bt(t,l);return(s=gt(l,"script")).length>0&&_t(s,!f&&gt(t,"script")),l},cleanData:function(t){for(var e,n,i,r=E.event.special,o=0;void 0!==(n=t[o]);o++)if(Y(n)){if(e=n[J.expando]){if(e.events)for(i in e.events)r[i]?E.event.remove(n,i):E.removeEvent(n,i,e.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(t){return qt(this,t,!0)},remove:function(t){return qt(this,t)},text:function(t){return z(this,function(t){return void 0===t?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Vt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Rt(this,t).appendChild(t)})},prepend:function(){return Vt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Rt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Vt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Vt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(E.cleanData(gt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return E.clone(this,t,e)})},html:function(t){return z(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Dt.test(t)&&!yt[(mt.exec(t)||["",""])[1].toLowerCase()]){t=E.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(E.cleanData(gt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return Vt(this,arguments,function(e){var n=this.parentNode;E.inArray(this,t)<0&&(E.cleanData(gt(this)),n&&n.replaceChild(e,this))},t)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){E.fn[t]=function(t){for(var n,i=[],r=E(t),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),E(r[s])[e](n),l.apply(i,n.get());return this.pushStack(i)}});var Ut=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),Wt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},zt=new RegExp(ot.join("|"),"i");function Gt(t,e,n){var i,r,o,s,u=t.style;return(n=n||Wt(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||ut(t)||(s=E.style(t,e)),!b.pixelBoxStyles()&&Ut.test(s)&&zt.test(e)&&(i=u.width,r=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=s,s=n.width,u.width=i,u.minWidth=r,u.maxWidth=o)),void 0!==s?s+"":s}function Kt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",st.appendChild(c).appendChild(l);var t=n.getComputedStyle(l);i="1%"!==t.top,a=12===e(t.marginLeft),l.style.right="60%",u=36===e(t.right),r=36===e(t.width),l.style.position="absolute",o=12===e(l.offsetWidth/3),st.removeChild(c),l=null}}function e(t){return Math.round(parseFloat(t))}var i,r,o,u,a,c=s.createElement("div"),l=s.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",b.clearCloneStyle="content-box"===l.style.backgroundClip,E.extend(b,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),u},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),a},scrollboxSize:function(){return t(),o}}))}();var Xt=["Webkit","Moz","ms"],$t=s.createElement("div").style,Yt={};function Qt(t){var e=E.cssProps[t]||Yt[t];return e||(t in $t?t:Yt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Xt.length;n--;)if((t=Xt[n]+e)in $t)return t}(t)||t)}var Jt=/^(none|table(?!-c[ea]).+)/,Zt=/^--/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"};function ne(t,e,n){var i=rt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function ie(t,e,n,i,r,o){var s="width"===e?1:0,u=0,a=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(a+=E.css(t,n+ot[s],!0,r)),i?("content"===n&&(a-=E.css(t,"padding"+ot[s],!0,r)),"margin"!==n&&(a-=E.css(t,"border"+ot[s]+"Width",!0,r))):(a+=E.css(t,"padding"+ot[s],!0,r),"padding"!==n?a+=E.css(t,"border"+ot[s]+"Width",!0,r):u+=E.css(t,"border"+ot[s]+"Width",!0,r));return!i&&o>=0&&(a+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-a-u-.5))||0),a}function re(t,e,n){var i=Wt(t),r=(!b.boxSizingReliable()||n)&&"border-box"===E.css(t,"boxSizing",!1,i),o=r,s=Gt(t,e,i),u="offset"+e[0].toUpperCase()+e.slice(1);if(Ut.test(s)){if(!n)return s;s="auto"}return(!b.boxSizingReliable()&&r||"auto"===s||!parseFloat(s)&&"inline"===E.css(t,"display",!1,i))&&t.getClientRects().length&&(r="border-box"===E.css(t,"boxSizing",!1,i),(o=u in t)&&(s=t[u])),(s=parseFloat(s)||0)+ie(t,e,n||(r?"border":"content"),o,i,s)+"px"}function oe(t,e,n,i,r){return new oe.prototype.init(t,e,n,i,r)}E.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Gt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,u=$(e),a=Zt.test(e),c=t.style;if(a||(e=Qt(u)),s=E.cssHooks[e]||E.cssHooks[u],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:c[e];"string"===(o=typeof n)&&(r=rt.exec(n))&&r[1]&&(n=ft(t,e,r),o="number"),null!=n&&n==n&&("number"!==o||a||(n+=r&&r[3]||(E.cssNumber[u]?"":"px")),b.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(a?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var r,o,s,u=$(e);return Zt.test(e)||(e=Qt(u)),(s=E.cssHooks[e]||E.cssHooks[u])&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=Gt(t,e,i)),"normal"===r&&e in ee&&(r=ee[e]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),E.each(["height","width"],function(t,e){E.cssHooks[e]={get:function(t,n,i){if(n)return!Jt.test(E.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?re(t,e,i):lt(t,te,function(){return re(t,e,i)})},set:function(t,n,i){var r,o=Wt(t),s=!b.scrollboxSize()&&"absolute"===o.position,u=(s||i)&&"border-box"===E.css(t,"boxSizing",!1,o),a=i?ie(t,e,i,u,o):0;return u&&s&&(a-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ie(t,e,"border",!1,o)-.5)),a&&(r=rt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=E.css(t,e)),ne(0,n,a)}}}),E.cssHooks.marginLeft=Kt(b.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Gt(t,"marginLeft"))||t.getBoundingClientRect().left-lt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(t,e){E.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+ot[i]+e]=o[i]||o[i-2]||o[0];return r}},"margin"!==t&&(E.cssHooks[t+e].set=ne)}),E.fn.extend({css:function(t,e){return z(this,function(t,e,n){var i,r,o={},s=0;if(Array.isArray(e)){for(i=Wt(t),r=e.length;s<r;s++)o[e[s]]=E.css(t,e[s],!1,i);return o}return void 0!==n?E.style(t,e,n):E.css(t,e)},t,e,arguments.length>1)}}),E.Tween=oe,oe.prototype={constructor:oe,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||E.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(E.cssNumber[n]?"":"px")},cur:function(){var t=oe.propHooks[this.prop];return t&&t.get?t.get(this):oe.propHooks._default.get(this)},run:function(t){var e,n=oe.propHooks[this.prop];return this.options.duration?this.pos=e=E.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):oe.propHooks._default.set(this),this}},oe.prototype.init.prototype=oe.prototype,oe.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=E.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){E.fx.step[t.prop]?E.fx.step[t.prop](t):1!==t.elem.nodeType||!E.cssHooks[t.prop]&&null==t.elem.style[Qt(t.prop)]?t.elem[t.prop]=t.now:E.style(t.elem,t.prop,t.now+t.unit)}}},oe.propHooks.scrollTop=oe.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},E.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},E.fx=oe.prototype.init,E.fx.step={};var se,ue,ae=/^(?:toggle|show|hide)$/,ce=/queueHooks$/;function le(){ue&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(le):n.setTimeout(le,E.fx.interval),E.fx.tick())}function fe(){return n.setTimeout(function(){se=void 0}),se=Date.now()}function he(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=ot[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function de(t,e,n){for(var i,r=(pe.tweeners[e]||[]).concat(pe.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,e,t))return i}function pe(t,e,n){var i,r,o=0,s=pe.prefilters.length,u=E.Deferred().always(function(){delete a.elem}),a=function(){if(r)return!1;for(var e=se||fe(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return u.notifyWith(t,[c,i,n]),i<1&&s?n:(s||u.notifyWith(t,[c,1,0]),u.resolveWith(t,[c]),!1)},c=u.promise({elem:t,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||fe(),duration:n.duration,tweens:[],createTween:function(e,n){var i=E.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return e?(u.notifyWith(t,[c,1,0]),u.resolveWith(t,[c,e])):u.rejectWith(t,[c,e]),this}}),l=c.props;for(!function(t,e){var n,i,r,o,s;for(n in t)if(r=e[i=$(n)],o=t[n],Array.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(s=E.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete t[i],o)n in t||(t[n]=o[n],e[n]=r);else e[i]=r}(l,c.opts.specialEasing);o<s;o++)if(i=pe.prefilters[o].call(c,t,l,c.opts))return y(i.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return E.map(l,de,c),y(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(a,{elem:t,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(pe,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ft(n.elem,t,rt.exec(e),n),n}]},tweener:function(t,e){y(t)?(e=t,t=["*"]):t=t.match(F);for(var n,i=0,r=t.length;i<r;i++)n=t[i],pe.tweeners[n]=pe.tweeners[n]||[],pe.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,o,s,u,a,c,l,f="width"in e||"height"in e,h=this,d={},p=t.style,v=t.nodeType&&ct(t),m=J.get(t,"fxshow");for(i in n.queue||(null==(s=E._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,E.queue(t,"fx").length||s.empty.fire()})})),e)if(r=e[i],ae.test(r)){if(delete e[i],o=o||"toggle"===r,r===(v?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;v=!0}d[i]=m&&m[i]||E.style(t,i)}if((a=!E.isEmptyObject(e))||!E.isEmptyObject(d))for(i in f&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=J.get(t,"display")),"none"===(l=E.css(t,"display"))&&(c?l=c:(pt([t],!0),c=t.style.display||c,l=E.css(t,"display"),pt([t]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===E.css(t,"float")&&(a||(h.done(function(){p.display=c}),null==c&&(l=p.display,c="none"===l?"":l)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),a=!1,d)a||(m?"hidden"in m&&(v=m.hidden):m=J.access(t,"fxshow",{display:c}),o&&(m.hidden=!v),v&&pt([t],!0),h.done(function(){for(i in v||pt([t]),J.remove(t,"fxshow"),d)E.style(t,i,d[i])})),a=de(v?m[i]:0,i,h),i in m||(m[i]=a.start,v&&(a.end=a.start,a.start=0))}],prefilter:function(t,e){e?pe.prefilters.unshift(t):pe.prefilters.push(t)}}),E.speed=function(t,e,n){var i=t&&"object"==typeof t?E.extend({},t):{complete:n||!n&&e||y(t)&&t,duration:t,easing:n&&e||e&&!y(e)&&e};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(t,e,n,i){return this.filter(ct).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=E.isEmptyObject(t),o=E.speed(e,n,i),s=function(){var e=pe(this,E.extend({},t),o);(r||J.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=E.timers,s=J.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ce.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||E.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=J.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=E.timers,s=i?i.length:0;for(n.finish=!0,E.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),E.each(["toggle","show","hide"],function(t,e){var n=E.fn[e];E.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(he(e,!0),t,i,r)}}),E.each({slideDown:he("show"),slideUp:he("hide"),slideToggle:he("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){E.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),E.timers=[],E.fx.tick=function(){var t,e=0,n=E.timers;for(se=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||E.fx.stop(),se=void 0},E.fx.timer=function(t){E.timers.push(t),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ue||(ue=!0,le())},E.fx.stop=function(){ue=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(t,e){return t=E.fx&&E.fx.speeds[t]||t,e=e||"fx",this.queue(e,function(e,i){var r=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(r)}})},function(){var t=s.createElement("input"),e=s.createElement("select").appendChild(s.createElement("option"));t.type="checkbox",b.checkOn=""!==t.value,b.optSelected=e.selected,(t=s.createElement("input")).value="t",t.type="radio",b.radioValue="t"===t.value}();var ve,me=E.expr.attrHandle;E.fn.extend({attr:function(t,e){return z(this,E.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){E.removeAttr(this,t)})}}),E.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?E.prop(t,e,n):(1===o&&E.isXMLDoc(t)||(r=E.attrHooks[e.toLowerCase()]||(E.expr.match.bool.test(e)?ve:void 0)),void 0!==n?null===n?void E.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=E.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!b.radioValue&&"radio"===e&&N(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(F);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),ve={set:function(t,e,n){return!1===e?E.removeAttr(t,n):t.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(t,e){var n=me[e]||E.find.attr;me[e]=function(t,e,i){var r,o,s=e.toLowerCase();return i||(o=me[s],me[s]=r,r=null!=n(t,e,i)?s:null,me[s]=o),r}});var be=/^(?:input|select|textarea|button)$/i,ye=/^(?:a|area)$/i;function ge(t){return(t.match(F)||[]).join(" ")}function _e(t){return t.getAttribute&&t.getAttribute("class")||""}function xe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(F)||[]}E.fn.extend({prop:function(t,e){return z(this,E.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[E.propFix[t]||t]})}}),E.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(t)||(e=E.propFix[e]||e,r=E.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=E.find.attr(t,"tabindex");return e?parseInt(e,10):be.test(t.nodeName)||ye.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),b.optSelected||(E.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,i,r,o,s,u,a=0;if(y(t))return this.each(function(e){E(this).addClass(t.call(this,e,_e(this)))});if((e=xe(t)).length)for(;n=this[a++];)if(r=_e(n),i=1===n.nodeType&&" "+ge(r)+" "){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(u=ge(i))&&n.setAttribute("class",u)}return this},removeClass:function(t){var e,n,i,r,o,s,u,a=0;if(y(t))return this.each(function(e){E(this).removeClass(t.call(this,e,_e(this)))});if(!arguments.length)return this.attr("class","");if((e=xe(t)).length)for(;n=this[a++];)if(r=_e(n),i=1===n.nodeType&&" "+ge(r)+" "){for(s=0;o=e[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(u=ge(i))&&n.setAttribute("class",u)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):y(t)?this.each(function(n){E(this).toggleClass(t.call(this,n,_e(this),e),e)}):this.each(function(){var e,r,o,s;if(i)for(r=0,o=E(this),s=xe(t);e=s[r++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=_e(this))&&J.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":J.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+ge(_e(n))+" ").indexOf(e)>-1)return!0;return!1}});var we=/\r/g;E.fn.extend({val:function(t){var e,n,i,r=this[0];return arguments.length?(i=y(t),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?t.call(this,n,E(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=E.map(r,function(t){return null==t?"":t+""})),(e=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=E.valHooks[r.type]||E.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(we,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(t){var e=E.find.attr(t,"value");return null!=e?e:ge(E.text(t))}},select:{get:function(t){var e,n,i,r=t.options,o=t.selectedIndex,s="select-one"===t.type,u=s?null:[],a=s?o+1:r.length;for(i=o<0?a:s?o:0;i<a;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(e=E(n).val(),s)return e;u.push(e)}return u},set:function(t,e){for(var n,i,r=t.options,o=E.makeArray(e),s=r.length;s--;)((i=r[s]).selected=E.inArray(E.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=E.inArray(E(t).val(),e)>-1}},b.checkOn||(E.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),b.focusin="onfocusin"in n;var Ee=/^(?:focusinfocus|focusoutblur)$/,Te=function(t){t.stopPropagation()};E.extend(E.event,{trigger:function(t,e,i,r){var o,u,a,c,l,f,h,d,v=[i||s],m=p.call(t,"type")?t.type:t,b=p.call(t,"namespace")?t.namespace.split("."):[];if(u=d=a=i=i||s,3!==i.nodeType&&8!==i.nodeType&&!Ee.test(m+E.event.triggered)&&(m.indexOf(".")>-1&&(b=m.split("."),m=b.shift(),b.sort()),l=m.indexOf(":")<0&&"on"+m,(t=t[E.expando]?t:new E.Event(m,"object"==typeof t&&t)).isTrigger=r?2:3,t.namespace=b.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:E.makeArray(e,[t]),h=E.event.special[m]||{},r||!h.trigger||!1!==h.trigger.apply(i,e))){if(!r&&!h.noBubble&&!g(i)){for(c=h.delegateType||m,Ee.test(c+m)||(u=u.parentNode);u;u=u.parentNode)v.push(u),a=u;a===(i.ownerDocument||s)&&v.push(a.defaultView||a.parentWindow||n)}for(o=0;(u=v[o++])&&!t.isPropagationStopped();)d=u,t.type=o>1?c:h.bindType||m,(f=(J.get(u,"events")||{})[t.type]&&J.get(u,"handle"))&&f.apply(u,e),(f=l&&u[l])&&f.apply&&Y(u)&&(t.result=f.apply(u,e),!1===t.result&&t.preventDefault());return t.type=m,r||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(v.pop(),e)||!Y(i)||l&&y(i[m])&&!g(i)&&((a=i[l])&&(i[l]=null),E.event.triggered=m,t.isPropagationStopped()&&d.addEventListener(m,Te),i[m](),t.isPropagationStopped()&&d.removeEventListener(m,Te),E.event.triggered=void 0,a&&(i[l]=a)),t.result}},simulate:function(t,e,n){var i=E.extend(new E.Event,n,{type:t,isSimulated:!0});E.event.trigger(i,null,e)}}),E.fn.extend({trigger:function(t,e){return this.each(function(){E.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return E.event.trigger(t,e,n,!0)}}),b.focusin||E.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){E.event.simulate(e,t.target,E.event.fix(t))};E.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=J.access(i,e);r||i.addEventListener(t,n,!0),J.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=J.access(i,e)-1;r?J.access(i,e,r):(i.removeEventListener(t,n,!0),J.remove(i,e))}}});var Se=n.location,Ce=Date.now(),Oe=/\?/;E.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+t),e};var Ie=/\[\]$/,Ae=/\r?\n/g,Ne=/^(?:submit|button|image|reset|file)$/i,je=/^(?:input|select|textarea|keygen)/i;function ke(t,e,n,i){var r;if(Array.isArray(e))E.each(e,function(e,r){n||Ie.test(t)?i(t,r):ke(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==w(e))i(t,e);else for(r in e)ke(t+"["+r+"]",e[r],n,i)}E.param=function(t,e){var n,i=[],r=function(t,e){var n=y(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!E.isPlainObject(t))E.each(t,function(){r(this.name,this.value)});else for(n in t)ke(n,t[n],e,r);return i.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=E.prop(this,"elements");return t?E.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!E(this).is(":disabled")&&je.test(this.nodeName)&&!Ne.test(t)&&(this.checked||!vt.test(t))}).map(function(t,e){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(t){return{name:e.name,value:t.replace(Ae,"\r\n")}}):{name:e.name,value:n.replace(Ae,"\r\n")}}).get()}});var Le=/%20/g,De=/#.*$/,Pe=/([?&])_=[^&]*/,Me=/^(.*?):[ \t]*([^\r\n]*)$/gm,Re=/^(?:GET|HEAD)$/,Fe=/^\/\//,He={},Be={},Ve="*/".concat("*"),qe=s.createElement("a");function Ue(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(F)||[];if(y(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function We(t,e,n,i){var r={},o=t===Be;function s(u){var a;return r[u]=!0,E.each(t[u]||[],function(t,u){var c=u(e,n,i);return"string"!=typeof c||o||r[c]?o?!(a=c):void 0:(e.dataTypes.unshift(c),s(c),!1)}),a}return s(e.dataTypes[0])||!r["*"]&&s("*")}function ze(t,e){var n,i,r=E.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&E.extend(!0,t,i),t}qe.href=Se.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Se.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ve,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?ze(ze(t,E.ajaxSettings),e):ze(E.ajaxSettings,t)},ajaxPrefilter:Ue(He),ajaxTransport:Ue(Be),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,o,u,a,c,l,f,h,d,p=E.ajaxSetup({},e),v=p.context||p,m=p.context&&(v.nodeType||v.jquery)?E(v):E.event,b=E.Deferred(),y=E.Callbacks("once memory"),g=p.statusCode||{},_={},x={},w="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(l){if(!u)for(u={};e=Me.exec(o);)u[e[1].toLowerCase()+" "]=(u[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=u[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(t,e){return null==l&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,_[t]=e),this},overrideMimeType:function(t){return null==l&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)T.always(t[T.status]);else for(e in t)g[e]=[g[e],t[e]];return this},abort:function(t){var e=t||w;return i&&i.abort(e),S(0,e),this}};if(b.promise(T),p.url=((t||p.url||Se.href)+"").replace(Fe,Se.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(F)||[""],null==p.crossDomain){c=s.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=qe.protocol+"//"+qe.host!=c.protocol+"//"+c.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=E.param(p.data,p.traditional)),We(He,p,e,T),l)return T;for(h in(f=E.event&&p.global)&&0==E.active++&&E.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Re.test(p.type),r=p.url.replace(De,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Le,"+")):(d=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(Oe.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(Pe,"$1"),d=(Oe.test(r)?"&":"?")+"_="+Ce+++d),p.url=r+d),p.ifModified&&(E.lastModified[r]&&T.setRequestHeader("If-Modified-Since",E.lastModified[r]),E.etag[r]&&T.setRequestHeader("If-None-Match",E.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Ve+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(v,T,p)||l))return T.abort();if(w="abort",y.add(p.complete),T.done(p.success),T.fail(p.error),i=We(Be,p,e,T)){if(T.readyState=1,f&&m.trigger("ajaxSend",[T,p]),l)return T;p.async&&p.timeout>0&&(a=n.setTimeout(function(){T.abort("timeout")},p.timeout));try{l=!1,i.send(_,S)}catch(t){if(l)throw t;S(-1,t)}}else S(-1,"No Transport");function S(t,e,s,u){var c,h,d,_,x,w=e;l||(l=!0,a&&n.clearTimeout(a),i=void 0,o=u||"",T.readyState=t>0?4:0,c=t>=200&&t<300||304===t,s&&(_=function(t,e,n){for(var i,r,o,s,u=t.contents,a=t.dataTypes;"*"===a[0];)a.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in u)if(u[r]&&u[r].test(i)){a.unshift(r);break}if(a[0]in n)o=a[0];else{for(r in n){if(!a[0]||t.converters[r+" "+a[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==a[0]&&a.unshift(o),n[o]}(p,T,s)),_=function(t,e,n,i){var r,o,s,u,a,c={},l=t.dataTypes.slice();if(l[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!a&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),a=o,o=l.shift())if("*"===o)o=a;else if("*"!==a&&a!==o){if(!(s=c[a+" "+o]||c["* "+o]))for(r in c)if((u=r.split(" "))[1]===o&&(s=c[a+" "+u[0]]||c["* "+u[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=u[0],l.unshift(u[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+a+" to "+o}}}return{state:"success",data:e}}(p,_,T,c),c?(p.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(E.lastModified[r]=x),(x=T.getResponseHeader("etag"))&&(E.etag[r]=x)),204===t||"HEAD"===p.type?w="nocontent":304===t?w="notmodified":(w=_.state,h=_.data,c=!(d=_.error))):(d=w,!t&&w||(w="error",t<0&&(t=0))),T.status=t,T.statusText=(e||w)+"",c?b.resolveWith(v,[h,w,T]):b.rejectWith(v,[T,w,d]),T.statusCode(g),g=void 0,f&&m.trigger(c?"ajaxSuccess":"ajaxError",[T,p,c?h:d]),y.fireWith(v,[T,w]),f&&(m.trigger("ajaxComplete",[T,p]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(t,e,n){return E.get(t,e,n,"json")},getScript:function(t,e){return E.get(t,void 0,e,"script")}}),E.each(["get","post"],function(t,e){E[e]=function(t,n,i,r){return y(n)&&(r=r||i,i=n,n=void 0),E.ajax(E.extend({url:t,type:e,dataType:r,data:n,success:i},E.isPlainObject(t)&&t))}}),E._evalUrl=function(t,e){return E.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){E.globalEval(t,e)}})},E.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=E(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return y(t)?this.each(function(e){E(this).wrapInner(t.call(this,e))}):this.each(function(){var e=E(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=y(t);return this.each(function(n){E(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(t){return!E.expr.pseudos.visible(t)},E.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Ge={0:200,1223:204},Ke=E.ajaxSettings.xhr();b.cors=!!Ke&&"withCredentials"in Ke,b.ajax=Ke=!!Ke,E.ajaxTransport(function(t){var e,i;if(b.cors||Ke&&!t.crossDomain)return{send:function(r,o){var s,u=t.xhr();if(u.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)u[s]=t.xhrFields[s];for(s in t.mimeType&&u.overrideMimeType&&u.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)u.setRequestHeader(s,r[s]);e=function(t){return function(){e&&(e=i=u.onload=u.onerror=u.onabort=u.ontimeout=u.onreadystatechange=null,"abort"===t?u.abort():"error"===t?"number"!=typeof u.status?o(0,"error"):o(u.status,u.statusText):o(Ge[u.status]||u.status,u.statusText,"text"!==(u.responseType||"text")||"string"!=typeof u.responseText?{binary:u.response}:{text:u.responseText},u.getAllResponseHeaders()))}},u.onload=e(),i=u.onerror=u.ontimeout=e("error"),void 0!==u.onabort?u.onabort=i:u.onreadystatechange=function(){4===u.readyState&&n.setTimeout(function(){e&&i()})},e=e("abort");try{u.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),E.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return E.globalEval(t),t}}}),E.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),E.ajaxTransport("script",function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(i,r){e=E("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),s.head.appendChild(e[0])},abort:function(){n&&n()}}});var Xe,$e=[],Ye=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=$e.pop()||E.expando+"_"+Ce++;return this[t]=!0,t}}),E.ajaxPrefilter("json jsonp",function(t,e,i){var r,o,s,u=!1!==t.jsonp&&(Ye.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ye.test(t.data)&&"data");if(u||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,u?t[u]=t[u].replace(Ye,"$1"+r):!1!==t.jsonp&&(t.url+=(Oe.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||E.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?E(n).removeProp(r):n[r]=o,t[r]&&(t.jsonpCallback=e.jsonpCallback,$e.push(r)),s&&y(o)&&o(s[0]),s=o=void 0}),"script"}),b.createHTMLDocument=((Xe=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xe.childNodes.length),E.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(b.createHTMLDocument?((i=(e=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,e.head.appendChild(i)):e=s),o=!n&&[],(r=j.exec(t))?[e.createElement(r[1])]:(r=Tt([t],e,o),o&&o.length&&E(o).remove(),E.merge([],r.childNodes)));var i,r,o},E.fn.load=function(t,e,n){var i,r,o,s=this,u=t.indexOf(" ");return u>-1&&(i=ge(t.slice(u)),t=t.slice(0,u)),y(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&E.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?E("<div>").append(E.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){E.fn[e]=function(t){return this.on(e,t)}}),E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(t,e,n){var i,r,o,s,u,a,c=E.css(t,"position"),l=E(t),f={};"static"===c&&(t.style.position="relative"),u=l.offset(),o=E.css(t,"top"),a=E.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+a).indexOf("auto")>-1?(s=(i=l.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(a)||0),y(e)&&(e=e.call(t,n,E.extend({},u))),null!=e.top&&(f.top=e.top-u.top+s),null!=e.left&&(f.left=e.left-u.left+r),"using"in e?e.using.call(t,f):l.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],r={top:0,left:0};if("fixed"===E.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===E.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((r=E(t).offset()).top+=E.css(t,"borderTopWidth",!0),r.left+=E.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-E.css(i,"marginTop",!0),left:e.left-r.left-E.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===E.css(t,"position");)t=t.offsetParent;return t||st})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;E.fn[t]=function(i){return z(this,function(t,i,r){var o;if(g(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===r)return o?o[e]:t[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r},t,i,arguments.length)}}),E.each(["top","left"],function(t,e){E.cssHooks[e]=Kt(b.pixelPosition,function(t,n){if(n)return n=Gt(t,e),Ut.test(n)?E(t).position()[e]+"px":n})}),E.each({Height:"height",Width:"width"},function(t,e){E.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){E.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),u=n||(!0===r||!0===o?"margin":"border");return z(this,function(e,n,r){var o;return g(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===r?E.css(e,n,u):E.style(e,n,r,u)},e,s?r:void 0,s)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){E.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),E.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),E.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),E.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),y(t))return i=a.call(arguments,2),(r=function(){return t.apply(e||this,i.concat(a.call(arguments)))}).guid=t.guid=t.guid||E.guid++,r},E.holdReady=function(t){t?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=N,E.isFunction=y,E.isWindow=g,E.camelCase=$,E.type=w,E.now=Date.now,E.isNumeric=function(t){var e=E.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(i=function(){return E}.apply(e,[]))||(t.exports=i);var Qe=n.jQuery,Je=n.$;return E.noConflict=function(t){return n.$===E&&(n.$=Je),t&&n.jQuery===E&&(n.jQuery=Qe),E},r||(n.jQuery=n.$=E),E})},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(96))},function(t,e,n){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var r=n(36),o=n(57),s=i(n(79)),u=function(){function t(e,n){void 0===e&&(e=!0),this.allowWrite=e,this.of=n,this.subscriptions=[],this._value=0,this.color=new r.BehaviorSubject([0,0,0,0]),this.memory={},this.valueChanges=new r.Subject,this.svgColor=this.color.pipe(o.map(function(t){return"rgb("+t.join(",")+")"})),this.setValue(0),this.id=t.lastId++}return Object.defineProperty(t.prototype,"value",{get:function(){return this._value},set:function(t){this.allowWrite&&this.setValue(t)},enumerable:!0,configurable:!0}),t.prototype.setValue=function(t){this._value=s.default(t,0,1),this.valueChanges.next(this._value);var e=t>.5?[255,216,20,1]:[90,90,90,1];this.color.next(this.pair?e:[0,0,0,0])},t.prototype.bindTo=function(t){var e=this;this.pair=t;var n=t.valueChanges.subscribe(function(t){return e.setValue(t)});this.subscriptions.push(n)},t.prototype.unbind=function(t){this.pair==t&&(this.pair=null,this.subscriptions.forEach(function(t){return t.unsubscribe()}))},t.prototype.update=function(){this.setValue(this._value)},t.lastId=0,t}();e.Pin=u},function(t,e,n){"use strict";var i=this&&this.__makeTemplateObject||function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},r=this&&this.__decorate||function(t,e,n,i){var r,o=arguments.length,s=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var u=t.length-1;u>=0;u--)(r=t[u])&&(s=(o<3?r(s):o>3?r(e,n,s):r(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};Object.defineProperty(e,"__esModule",{value:!0});var o,s=n(55),u=n(98),a=n(37),c=n(60),l=n(36),f=function(){function t(){this.wires=[],this.update=new l.Subject}return t.prototype.add=function(t){t.allowWrite?this.start=t:this.end=t,this.tryResolving()},t.prototype.dispose=function(){for(var t=0,e=this.wires;t<e.length;t++){e[t].dispose()}this.wires=[]},t.prototype.tryResolving=function(){this.start&&this.end&&this.start!=this.end&&this.canBind(this.start,this.end)&&(this.wires.push(new u.Wire(this.start,this.end)),this.start=null,this.end=null,this.update.next(!0))},t.prototype.canBind=function(t,e){return!this.wires.find(function(t){return t.output===e})},Object.defineProperty(t.prototype,"svg",{get:function(){return this.wires.map(function(t){var e=t.input.of,n=t.output.of;return a.svg(o||(o=i(["\n            <line x1=","\n                x2=","\n                y1=","\n                y2=","\n                stroke=","\n            >\n            </line>\n        "],["\n            <line x1=","\n                x2=","\n                y1=","\n                y2=","\n                stroke=","\n            >\n            </line>\n        "])),c.subscribe(e.pinx(!1,20)),c.subscribe(n.pinx(!0,20)),c.subscribe(e.piny(!1,e.outputPins.indexOf(t.input))),c.subscribe(n.piny(!0,n.inputPins.indexOf(t.output))),c.subscribe(t.input.svgColor))})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"state",{get:function(){return this.wires.map(function(t){return{from:{owner:t.input.of.id,index:t.input.of.outputPins.indexOf(t.input)},to:{owner:t.output.of.id,index:t.output.of.inputPins.indexOf(t.output)}}})},enumerable:!0,configurable:!0}),t=r([s.Singleton],t)}();e.WireManager=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){this.input=t,this.output=e,this.output.bindTo(this.input),this.input.pair=this.output,this.input.update(),this.output.update()}return t.prototype.dispose=function(){this.output.unbind(this.input),this.input.pair=null},t}();e.Wire=i},function(t,e,n){"use strict";var i=this&&this.__makeTemplateObject||function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t};Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(37),s=n(36),u=function(){function t(e,n){this.mode=e,this.name=n,this.color=new s.BehaviorSubject("rgba(0,0,0,0)");var i=t.cached.get(e+n);if(i)return i;t.cached.set(e+n,this),"color"===this.mode&&this.color.next(n)}return t.prototype.innerHTML=function(e,n,s,u){return o.svg(r||(r=i(["<foreignobject x="," y="," width="," height=",'>\n            <div class="component-container">\n                <img src=',' height="97%" width="97%" draggable=false class="component">\n            </div>\n        </foreignobject>'],["<foreignobject x="," y="," width="," height=",'>\n            <div class="component-container">\n                <img src=',' height="97%" width="97%" draggable=false class="component">\n            </div>\n        </foreignobject>'])),e,n,s,u,t.images[this.name])},t.images={and:n(100)},t.cached=new Map,t}();e.Material=u},function(t,e,n){t.exports=n.p+"fba1e150c35116cf8bc32589d933095d.jpg"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(102))},function(t,e,n){"use strict";var i=this&&this.__makeTemplateObject||function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},r=this&&this.__decorate||function(t,e,n,i){var r,o=arguments.length,s=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var u=t.length-1;u>=0;u--)(r=t[u])&&(s=(o<3?r(s):o>3?r(e,n,s):r(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},o=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))(function(r,o){function s(t){try{a(i.next(t))}catch(t){o(t)}}function u(t){try{a(i.throw(t))}catch(t){o(t)}}function a(t){t.done?r(t.value):new n(function(e){e(t.value)}).then(s,u)}a((i=i.apply(t,e||[])).next())})},s=this&&this.__generator||function(t,e){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(r=(r=s.trys).length>0&&r[r.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var u,a,c,l=n(55),f=n(80),h=n(36),d=n(37),p=n(60),v=n(76),m=n(77),b=n(103),y=n(56),g=n(81),_=n(82),x=n(83),w=n(84),E=n(106),T=n(107),S=n(110),C=n(57),O=function(){function t(){var t=this;this.components=[],this.svgs=new h.Subject,this.placeholder=new h.BehaviorSubject("Create simulation"),this.temporaryCommnad="",this.clicked=!1,this.screen=new v.Screen,this.wireManager=new x.WireManager,this.templateStore=new g.ComponentTemplateStore,this.settings=new E.Settings,this.commandHistoryStore=new m.Store("commandHistory"),this.store=new m.Store("simulationStates"),this.saveEvent=new b.KeyboardInput("s"),this.createEvent=new b.KeyboardInput("m"),this.closeInputEvent=new b.KeyboardInput("enter"),this.ctrlEvent=new b.KeyboardInput("ctrl"),this.palleteEvent=new b.KeyboardInput("p"),this.shiftEvent=new b.KeyboardInput("shift"),this.refreshEvent=new b.KeyboardInput("r"),this.clearEvent=new b.KeyboardInput("c"),this.upEvent=new b.KeyboardInput("up"),this.downEvent=new b.KeyboardInput("down"),this.name="current",this.alertOptions=_.alertOptions,this.commandHistory=[],this.commands={clear:function(t){t.clear()},save:function(t){t.save()},ls:function(t){var e=t.store.ls().join("\n");y.success(e,"",t.alertOptions)},help:function(t){y.success("Usage: &ltcommand> <br>\n            Where &ltcommand> is one of:\n                <ul>\n                "+Object.keys(t.commands).map(function(t){return"\n                    <li>"+t+"</li>\n                "}).join("")+"\n                </ul>\n            ","",t.alertOptions)},refresh:function(t){t.refresh()},ctp:this.templateStore.commands.template,settings:this.settings.commands,download:T.download},this.barAlpha=new h.BehaviorSubject("0"),w.runCounter.increase(),this.svgs.next(this.render()),this.refresh(),h.fromEvent(document.body,"keydown").subscribe(function(e){"1"==t.barAlpha.value?document.getElementById("nameInput").focus():e.preventDefault()}),h.fromEvent(document.body,"keyup").subscribe(function(e){if("1"===t.barAlpha.value){if(t.closeInputEvent.value)t.create();else if("command"===t.inputMode){var n,i=document.getElementById("nameInput");if(t.upEvent.value)if(document.body.focus(),e.preventDefault(),n=t.commandHistory.indexOf(i.value)){-1===n&&(t.temporaryCommnad=i.value);var r=-1===n?t.commandHistory.length-1:n-1;i.value=t.commandHistory[r]}if(t.downEvent.value)if(document.body.focus(),e.preventDefault(),(n=t.commandHistory.indexOf(i.value))>-1){var o=t.commandHistory.length-1;i.value=n===o?t.temporaryCommnad:t.commandHistory[n+1]}}}else t.ctrlEvent.value&&(t.createEvent.value?(t.preInput(),t.inputMode="create",t.placeholder.next("Create simulation")):t.shiftEvent.value&&t.palleteEvent.value?(t.preInput(),t.inputMode="command",t.placeholder.next("Command palette")):t.clearEvent.value?t.clear():t.saveEvent.value?t.save():t.refreshEvent.value&&t.refresh())}),this.wireManager.update.subscribe(function(e){return t.update()})}return t.prototype.preInput=function(){document.getElementById("nameInput").value="",this.barAlpha.next("1")},t.prototype.create=function(){return o(this,void 0,void 0,function(){var t;return s(this,function(e){switch(e.label){case 0:return t=document.getElementById("nameInput"),this.barAlpha.next("0"),"create"!=this.inputMode?[3,2]:[4,this.createEmptySimulation(t.value)];case 1:return e.sent(),y.success("Succesfully created simulation "+t.value,"",this.alertOptions),[3,3];case 2:"command"==this.inputMode&&this.eval(t.value),e.label=3;case 3:return[2]}})})},t.prototype.handleDuplicateModal=function(t){return o(this,void 0,void 0,function(){return s(this,function(e){switch(e.label){case 0:return[4,S.modal({title:"Warning",content:d.html(u||(u=i(["There was already a simulation called ",",\nare you sure you want to override it?\nAll you work will be lost!"],["There was already a simulation called ",",\nare you sure you want to override it?\nAll you work will be lost!"])),t)})];case 1:return[2,e.sent()]}})})},t.prototype.createEmptySimulation=function(t){var e=this;return new Promise(function(n,i){return o(e,void 0,void 0,function(){var i;return s(this,function(r){switch(r.label){case 0:return(i=this.store.get(t))?[4,this.handleDuplicateModal(t)]:[3,2];case 1:i=r.sent(),r.label=2;case 2:return!i&&this.store.get(t)||(e.store.set(t,{wires:[],components:[],position:[0,0],scale:[1,1]}),t!==e.name&&e.save(),e.refresh(),n(!0)),[2]}})})})},t.prototype.switchTo=function(t){},t.prototype.eval=function(t){for(this.commandHistory.includes(t)||this.commandHistory.push(t);this.commandHistory.length>10;)this.commandHistory.shift();var e=t.split(" ");if(e[0]in this.commands){var n=e.slice(1),i=n.filter(function(t){return"-"==t[0]}),r=n.filter(function(t){return"-"!=t[0]});this.commands[e[0]](this,r,i)}else y.error("Command "+e+" doesn't exist. Run help to get a list of all commands.","",this.alertOptions)},t.prototype.clear=function(){this.components=[],this.wireManager.dispose(),this.update(),y.success("Succesfully cleared all components","",this.alertOptions)},t.prototype.refresh=function(){this.store.get(this.name)&&this.loadState(this.store.get(this.name));for(var t=0,e=this.commandHistoryStore.ls();t<e.length;t++){var n=e[t];this.commandHistory[Number(n)]=this.commandHistoryStore.get(n)}this.update(),y.success("Succesfully refreshed to the latest save","",this.alertOptions)},t.prototype.update=function(){this.svgs.next(this.render())},t.prototype.handleMouseDown=function(t){this.clicked=!0},t.prototype.handleMouseUp=function(t){this.clicked=!1},t.prototype.handleMouseMove=function(t){for(var e,n,i=this,r=!0,o=0;o<this.components.length;o++){var s=this.components[o];s.clicked&&(r=!1,s.move(t),this.onTop!=s&&(n=o))}if(n>=0)this.onTop=this.components[n],this.components.push(this.onTop),this.update();else if(r&&this.clicked){var u=[t.clientX,t.clientY].map(function(t,e){return i.screen.mousePosition[e]-t});(e=this.screen).move.apply(e,u)}},t.prototype.render=function(){var t,e=this.components.map(function(e){var n=p.subscribe(e.clickedChanges.pipe(C.map(function(t){return t?"yellow":"black"})));return d.svg(a||(a=i(["\n            <g>\n                ","\n                ","\n\n                <g @mousedown=","\n                    @mouseup=",">\n                    <rect width=","\n                    height="," \n                    x=","\n                    y=","\n                    stroke=","\n                    fill=","\n                    rx=20\n                    ry=20>\n                </rect>\n                ","\n                </g>\n            </g>\n        "],["\n            <g>\n                ","\n                ","\n\n                <g @mousedown=","\n                    @mouseup=",">\n                    <rect width=","\n                    height="," \n                    x=","\n                    y=","\n                    stroke=","\n                    fill=","\n                    rx=20\n                    ry=20>\n                </rect>\n                ","\n                </g>\n            </g>\n        "])),e.pinsSvg(10,20),e.pinsSvg(10,20,"output"),function(t){return e.handleClick(t)},function(n){e.handleMouseUp(n),t=e},p.subscribe(e.width),p.subscribe(e.height),p.subscribe(e.x),p.subscribe(e.y),n,"standard_image"===e.material.mode?"rgba(0,0,0,0)":p.subscribe(e.material.color),"standard_image"===e.material.mode?e.material.innerHTML(p.subscribe(e.x),p.subscribe(e.y),p.subscribe(e.width),p.subscribe(e.height)):"")});return t&&this.removeDuplicates(t),d.svg(c||(c=i([""," ",""],[""," ",""])),this.wireManager.svg,e)},t.prototype.removeDuplicates=function(t){var e=this.components.map(function(e,n){return e==t?n:null}).filter(function(t){return t});e.pop(),this.components=this.components.filter(function(t,n){return-1!=e.indexOf(n)})},Object.defineProperty(t.prototype,"state",{get:function(){return{components:Array.from(new Set(this.components).values()).map(function(t){return t.state}),position:this.screen.position,scale:this.screen.scale,wires:this.wireManager.state}},enumerable:!0,configurable:!0}),t.prototype.getComponentById=function(t){return this.components.find(function(e){return e.id===t})},t.prototype.loadState=function(t){var e=this;t.wires&&(this.wireManager.dispose(),this.clicked=!1,this.components=t.components.map(function(t){return f.Component.fromState(t)}),this.onTop=null,t.wires.forEach(function(t){e.wireManager.start=e.getComponentById(t.from.owner).outputPins[t.from.index],e.wireManager.end=e.getComponentById(t.to.owner).inputPins[t.to.index],e.wireManager.tryResolving()}),this.screen.scale=t.scale,this.screen.position=t.position,this.update())},t.prototype.save=function(t){for(var e=0;e<this.commandHistory.length;e++){var n=this.commandHistory[e];this.commandHistoryStore.set(e.toString(),n)}this.store.set(t||this.name,this.state),y.success("Saved the simulation succesfully!","",this.alertOptions)},t=r([l.Singleton],t)}();e.ComponentManager=O},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(104);e.KeyboardInput=i.KeyboardInput},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=n(36),r=n(105);e.KeyboardInput=class{constructor(...t){this.value=!1,this.pressed=[],this.valueChanges=new i.Subject,this.subscription=[],this.keys=t,this.subscription.push(i.fromEvent(document,"keydown").subscribe(t=>{const e=this.pressed.length;for(let e of this.keys)e==r(t)&&-1==this.pressed.indexOf(e)&&this.pressed.push(e);0==e&&0!=this.pressed.length&&(this.value=!0,this.valueChanges.next(this.value))})),this.subscription.push(i.fromEvent(document,"keyup").subscribe(t=>{const e=this.pressed.length;for(let e of this.keys)e==r(t)&&-1!=this.pressed.indexOf(e)&&this.pressed.splice(this.pressed.indexOf(e),1);this.value&&e>0&&0==this.pressed.length&&(this.value=!1,this.valueChanges.next(this.value))}))}dispose(){this.subscription.forEach(t=>t.unsubscribe()),this.value=!1,this.valueChanges.next(!1),this.valueChanges.complete()}}},function(t,e){function n(t){if(t&&"object"==typeof t){var e=t.which||t.keyCode||t.charCode;e&&(t=e)}if("number"==typeof t)return s[t];var n,o=String(t);return(n=i[o.toLowerCase()])?n:(n=r[o.toLowerCase()])||(1===o.length?o.charCodeAt(0):void 0)}n.isEventKey=function(t,e){if(t&&"object"==typeof t){var n=t.which||t.keyCode||t.charCode;if(null==n)return!1;if("string"==typeof e){var o;if(o=i[e.toLowerCase()])return o===n;if(o=r[e.toLowerCase()])return o===n}else if("number"==typeof e)return e===n;return!1}};var i=(e=t.exports=n).code=e.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},r=e.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(o=97;o<123;o++)i[String.fromCharCode(o)]=o-32;for(var o=48;o<58;o++)i[o-48]=o;for(o=1;o<13;o++)i["f"+o]=o+111;for(o=0;o<10;o++)i["numpad "+o]=o+96;var s=e.names=e.title={};for(o in i)s[i[o]]=o;for(var u in r)i[u]=r[u]},function(t,e,n){"use strict";var i=this&&this.__decorate||function(t,e,n,i){var r,o=arguments.length,s=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var u=t.length-1;u>=0;u--)(r=t[u])&&(s=(o<3?r(s):o>3?r(e,n,s):r(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};Object.defineProperty(e,"__esModule",{value:!0});var r=n(55),o=n(56),s=function(){function t(){var t=this;this.version="1.0.0",this.settings={jumpToNewSimulations:!0},this.commands=function(e,n,i){for(var r=0,s=i;r<s.length;r++){var u=s[r];if("--version"===u||"-v"===u)return o.success(""+t.version,"",e.alertOptions)}if(void 0===n[0])return o.success("Welcome to the settings cli. You can use this to tweak settings in any way imaginable!","",e.alertOptions);o.error("Commands "+n+" couldnt be found","",e.alertOptions)}}return t=i([r.Singleton],t)}();e.Settings=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(56),r=n(108);e.download=function(t,e,n){for(var o=0,s=n;o<s.length;o++){var u=s[o];if("--version"===u||"-v"===u)return i.success("1.0.0","",t.alertOptions);if("--help"===u||"-h"===u)return i.success('Run "download" to download the save as a json file.\n            Flags:<ul>\n                <li>-v or --version to get the version.</li>\n                <li>-h or --help to get help (ou are reading that right now)</li>\n                <li>-s or --save to automatically save before downloading</li>\n            </ul>',"",t.alertOptions)}if(void 0===e[0]){(n.includes("-s")||n.includes("--save"))&&t.save();var a=JSON.stringify(t.state);r.saveAs(new Blob([a]),t.name+".json")}}},function(t,e,n){(function(n){var i,r,o;r=[],void 0===(o="function"==typeof(i=function(){"use strict";function e(t,e,n){var i=new XMLHttpRequest;i.open("GET",t),i.responseType="blob",i.onload=function(){s(i.response,e,n)},i.onerror=function(){console.error("could not download file")},i.send()}function i(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function r(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(n){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof n&&n.global===n?n:void 0,s=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype?function(t,n,s){var u=o.URL||o.webkitURL,a=document.createElement("a");n=n||t.name||"download",a.download=n,a.rel="noopener","string"==typeof t?(a.href=t,a.origin===location.origin?r(a):i(a.href)?e(t,n,s):r(a,a.target="_blank")):(a.href=u.createObjectURL(t),setTimeout(function(){u.revokeObjectURL(a.href)},4e4),setTimeout(function(){r(a)},0))}:"msSaveOrOpenBlob"in navigator?function(t,n,o){if(n=n||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,o),n);else if(i(t))e(t,n,o);else{var s=document.createElement("a");s.href=t,s.target="_blank",setTimeout(function(){r(s)})}}:function(t,n,i,r){if((r=r||open("","_blank"))&&(r.document.title=r.document.body.innerText="downloading..."),"string"==typeof t)return e(t,n,i);var s="application/octet-stream"===t.type,u=/constructor/i.test(o.HTMLElement)||o.safari,a=/CriOS\/[\d]+/.test(navigator.userAgent);if((a||s&&u)&&"object"==typeof FileReader){var c=new FileReader;c.onloadend=function(){var t=c.result;t=a?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),r?r.location.href=t:location=t,r=null},c.readAsDataURL(t)}else{var l=o.URL||o.webkitURL,f=l.createObjectURL(t);r?r.location=f:location.href=f,r=null,setTimeout(function(){l.revokeObjectURL(f)},4e4)}});o.saveAs=s.saveAs=s,t.exports=s})?i.apply(e,r):i)||(t.exports=o)}).call(this,n(109))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(111))},function(t,e,n){"use strict";var i=this&&this.__makeTemplateObject||function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o,s,u=n(37),a=n(36),c=n(116),l=0;e.modal=function(t){return new Promise(function(e,n){var f={yes:"yes",no:"no",title:"modal",content:u.html(o||(o=i(["Hello world!"],["Hello world!"])))},h=document.getElementsByClassName("ModalContainer")[0],d=r({},f,t),p=d.title,v=d.content,m=d.yes,b=d.no,y=l++;h||n(!1);var g=u.html(s||(s=i(['\n    <div class="mdc-dialog"\n     id="modal-','"\n     role="alertdialog"\n     aria-modal="true"\n     aria-labelledby="','"\n     aria-describedby="my-dialog-content">\n        <div class="mdc-dialog__container">\n            <div class="mdc-dialog__surface">\n                <h2 class="mdc-dialog__title" id="','">\n                    ','\n                </h2>\n                <div class="mdc-dialog__content" id="my-dialog-content">\n                    ','\n                </div>\n                <footer class="mdc-dialog__actions">\n                    <button type="button" class="mdc-button mdc-dialog__button" id="no-','">\n                        <span class="mdc-button__label">','</span>\n                    </button>\n                    <button type="button" class="mdc-button mdc-dialog__button" id="yes-','">\n                        <span class="mdc-button__label">','</span>\n                    </button>\n                </footer>\n            </div>\n        </div>\n        <div class="mdc-dialog__scrim"></div>\n        </div>\n    '],['\n    <div class="mdc-dialog"\n     id="modal-','"\n     role="alertdialog"\n     aria-modal="true"\n     aria-labelledby="','"\n     aria-describedby="my-dialog-content">\n        <div class="mdc-dialog__container">\n            <div class="mdc-dialog__surface">\n                <h2 class="mdc-dialog__title" id="','">\n                    ','\n                </h2>\n                <div class="mdc-dialog__content" id="my-dialog-content">\n                    ','\n                </div>\n                <footer class="mdc-dialog__actions">\n                    <button type="button" class="mdc-button mdc-dialog__button" id="no-','">\n                        <span class="mdc-button__label">','</span>\n                    </button>\n                    <button type="button" class="mdc-button mdc-dialog__button" id="yes-','">\n                        <span class="mdc-button__label">','</span>\n                    </button>\n                </footer>\n            </div>\n        </div>\n        <div class="mdc-dialog__scrim"></div>\n        </div>\n    '])),y,p,p,p,v,y,b,y,m);u.render(g,h);var _=new c.MDCDialog(document.querySelector("#modal-"+y));_.open();var x=document.getElementById("yes-"+y),w=document.getElementById("no-"+y),E=function(){_.close(),T.forEach(function(t){return t.unsubscribe()})},T=[a.fromEvent(x,"click").subscribe(function(t){E(),e(!0)}),a.fromEvent(w,"click").subscribe(function(t){E(),e(!1)})]})}},function(t,e){var n=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'],i=n.join(","),r="undefined"==typeof Element?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector;function o(t,e){e=e||{};var n,o,u,a=[],f=[],h=t.querySelectorAll(i);for(e.includeContainer&&r.call(t,i)&&(h=Array.prototype.slice.apply(h)).unshift(t),n=0;n<h.length;n++)s(o=h[n])&&(0===(u=c(o))?a.push(o):f.push({documentOrder:n,tabIndex:u,node:o}));return f.sort(l).map(function(t){return t.node}).concat(a)}function s(t){return!(!u(t)||function(t){return function(t){return f(t)&&"radio"===t.type}(t)&&!function(t){if(!t.name)return!0;var e=function(t){for(var e=0;e<t.length;e++)if(t[e].checked)return t[e]}(t.ownerDocument.querySelectorAll('input[type="radio"][name="'+t.name+'"]'));return!e||e===t}(t)}(t)||c(t)<0)}function u(t){return!(t.disabled||function(t){return f(t)&&"hidden"===t.type}(t)||function(t){return null===t.offsetParent||"hidden"===getComputedStyle(t).visibility}(t))}o.isTabbable=function(t){if(!t)throw new Error("No node provided");return!1!==r.call(t,i)&&s(t)},o.isFocusable=function(t){if(!t)throw new Error("No node provided");return!1!==r.call(t,a)&&u(t)};var a=n.concat("iframe").join(",");function c(t){var e=parseInt(t.getAttribute("tabindex"),10);return isNaN(e)?function(t){return"true"===t.contentEditable}(t)?0:t.tabIndex:e}function l(t,e){return t.tabIndex===e.tabIndex?t.documentOrder-e.documentOrder:t.tabIndex-e.tabIndex}function f(t){return"INPUT"===t.tagName}t.exports=o},function(t,e){t.exports=function(){for(var t={},e=0;e<arguments.length;e++){var i=arguments[e];for(var r in i)n.call(i,r)&&(t[r]=i[r])}return t};var n=Object.prototype.hasOwnProperty},function(t,e,n){t.exports=n.p+"style.css"},function(t,e,n){"use strict";n.r(e);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var i,r,o={ANCHOR:"mdc-menu-surface--anchor",ANIMATING_CLOSED:"mdc-menu-surface--animating-closed",ANIMATING_OPEN:"mdc-menu-surface--animating-open",FIXED:"mdc-menu-surface--fixed",OPEN:"mdc-menu-surface--open",ROOT:"mdc-menu-surface"},s={CLOSED_EVENT:"MDCMenuSurface:closed",OPENED_EVENT:"MDCMenuSurface:opened",FOCUSABLE_ELEMENTS:["button:not(:disabled)",'[href]:not([aria-disabled="true"])',"input:not(:disabled)","select:not(:disabled)","textarea:not(:disabled)",'[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])'].join(", ")},u={TRANSITION_OPEN_DURATION:120,TRANSITION_CLOSE_DURATION:75,MARGIN_TO_EDGE:32,ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO:.67};!function(t){t[t.BOTTOM=1]="BOTTOM",t[t.CENTER=2]="CENTER",t[t.RIGHT=4]="RIGHT",t[t.FLIP_RTL=8]="FLIP_RTL"}(i||(i={})),function(t){t[t.TOP_LEFT=0]="TOP_LEFT",t[t.TOP_RIGHT=4]="TOP_RIGHT",t[t.BOTTOM_LEFT=1]="BOTTOM_LEFT",t[t.BOTTOM_RIGHT=5]="BOTTOM_RIGHT",t[t.TOP_START=8]="TOP_START",t[t.TOP_END=12]="TOP_END",t[t.BOTTOM_START=9]="BOTTOM_START",t[t.BOTTOM_END=13]="BOTTOM_END"}(r||(r={}));var a=n(0),c=n(30),l=n(35),f={LIST_ITEM_ACTIVATED_CLASS:"mdc-list-item--activated",LIST_ITEM_CLASS:"mdc-list-item",LIST_ITEM_DISABLED_CLASS:"mdc-list-item--disabled",LIST_ITEM_SELECTED_CLASS:"mdc-list-item--selected",ROOT:"mdc-list"},h={ACTION_EVENT:"MDCList:action",ARIA_CHECKED:"aria-checked",ARIA_CHECKED_CHECKBOX_SELECTOR:'[role="checkbox"][aria-checked="true"]',ARIA_CHECKED_RADIO_SELECTOR:'[role="radio"][aria-checked="true"]',ARIA_CURRENT:"aria-current",ARIA_ORIENTATION:"aria-orientation",ARIA_ORIENTATION_HORIZONTAL:"horizontal",ARIA_ROLE_CHECKBOX_SELECTOR:'[role="checkbox"]',ARIA_SELECTED:"aria-selected",CHECKBOX_RADIO_SELECTOR:'input[type="checkbox"]:not(:disabled), input[type="radio"]:not(:disabled)',CHECKBOX_SELECTOR:'input[type="checkbox"]:not(:disabled)',CHILD_ELEMENTS_TO_TOGGLE_TABINDEX:"\n    ."+f.LIST_ITEM_CLASS+" button:not(:disabled),\n    ."+f.LIST_ITEM_CLASS+" a\n  ",FOCUSABLE_CHILD_ELEMENTS:"\n    ."+f.LIST_ITEM_CLASS+" button:not(:disabled),\n    ."+f.LIST_ITEM_CLASS+" a,\n    ."+f.LIST_ITEM_CLASS+' input[type="radio"]:not(:disabled),\n    .'+f.LIST_ITEM_CLASS+' input[type="checkbox"]:not(:disabled)\n  ',RADIO_SELECTOR:'input[type="radio"]:not(:disabled)'},d={UNSET_INDEX:-1},p=n(21),v=["input","button","textarea","select"];var m,b=function(t){function e(n){var i=t.call(this,a.a({},e.defaultAdapter,n))||this;return i.wrapFocus_=!1,i.isVertical_=!0,i.isSingleSelectionList_=!1,i.selectedIndex_=d.UNSET_INDEX,i.focusedItemIndex_=d.UNSET_INDEX,i.useActivatedClass_=!1,i.ariaCurrentAttrValue_=null,i.isCheckboxList_=!1,i.isRadioList_=!1,i}return a.b(e,t),Object.defineProperty(e,"strings",{get:function(){return h},enumerable:!0,configurable:!0}),Object.defineProperty(e,"cssClasses",{get:function(){return f},enumerable:!0,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return d},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClassForElementIndex:function(){},focusItemAtIndex:function(){},getAttributeForElementIndex:function(){return null},getFocusedElementIndex:function(){return 0},getListItemCount:function(){return 0},hasCheckboxAtIndex:function(){return!1},hasRadioAtIndex:function(){return!1},isCheckboxCheckedAtIndex:function(){return!1},isFocusInsideList:function(){return!1},isRootFocused:function(){return!1},notifyAction:function(){},removeClassForElementIndex:function(){},setAttributeForElementIndex:function(){},setCheckedCheckboxOrRadioAtIndex:function(){},setTabIndexForListItemChildren:function(){}}},enumerable:!0,configurable:!0}),e.prototype.layout=function(){0!==this.adapter_.getListItemCount()&&(this.adapter_.hasCheckboxAtIndex(0)?this.isCheckboxList_=!0:this.adapter_.hasRadioAtIndex(0)&&(this.isRadioList_=!0))},e.prototype.setWrapFocus=function(t){this.wrapFocus_=t},e.prototype.setVerticalOrientation=function(t){this.isVertical_=t},e.prototype.setSingleSelection=function(t){this.isSingleSelectionList_=t},e.prototype.setUseActivatedClass=function(t){this.useActivatedClass_=t},e.prototype.getSelectedIndex=function(){return this.selectedIndex_},e.prototype.setSelectedIndex=function(t){this.isIndexValid_(t)&&(this.isCheckboxList_?this.setCheckboxAtIndex_(t):this.isRadioList_?this.setRadioAtIndex_(t):this.setSingleSelectionAtIndex_(t))},e.prototype.handleFocusIn=function(t,e){e>=0&&this.adapter_.setTabIndexForListItemChildren(e,"0")},e.prototype.handleFocusOut=function(t,e){var n=this;e>=0&&this.adapter_.setTabIndexForListItemChildren(e,"-1"),setTimeout(function(){n.adapter_.isFocusInsideList()||n.setTabindexToFirstSelectedItem_()},0)},e.prototype.handleKeydown=function(t,e,n){var i="ArrowLeft"===t.key||37===t.keyCode,r="ArrowUp"===t.key||38===t.keyCode,o="ArrowRight"===t.key||39===t.keyCode,s="ArrowDown"===t.key||40===t.keyCode,u="Home"===t.key||36===t.keyCode,a="End"===t.key||35===t.keyCode,c="Enter"===t.key||13===t.keyCode,l="Space"===t.key||32===t.keyCode;if(this.adapter_.isRootFocused())r||a?(t.preventDefault(),this.focusLastElement()):(s||u)&&(t.preventDefault(),this.focusFirstElement());else{var f=this.adapter_.getFocusedElementIndex();if(!(-1===f&&(f=n)<0)){var h;if(this.isVertical_&&s||!this.isVertical_&&o)this.preventDefaultEvent_(t),h=this.focusNextElement(f);else if(this.isVertical_&&r||!this.isVertical_&&i)this.preventDefaultEvent_(t),h=this.focusPrevElement(f);else if(u)this.preventDefaultEvent_(t),h=this.focusFirstElement();else if(a)this.preventDefaultEvent_(t),h=this.focusLastElement();else if((c||l)&&e){var d=t.target;if(d&&"A"===d.tagName&&c)return;this.preventDefaultEvent_(t),this.isSelectableList_()&&this.setSelectedIndexOnAction_(f),this.adapter_.notifyAction(f)}this.focusedItemIndex_=f,void 0!==h&&(this.setTabindexAtIndex_(h),this.focusedItemIndex_=h)}}},e.prototype.handleClick=function(t,e){t!==d.UNSET_INDEX&&(this.isSelectableList_()&&this.setSelectedIndexOnAction_(t,e),this.adapter_.notifyAction(t),this.setTabindexAtIndex_(t),this.focusedItemIndex_=t)},e.prototype.focusNextElement=function(t){var e=t+1;if(e>=this.adapter_.getListItemCount()){if(!this.wrapFocus_)return t;e=0}return this.adapter_.focusItemAtIndex(e),e},e.prototype.focusPrevElement=function(t){var e=t-1;if(e<0){if(!this.wrapFocus_)return t;e=this.adapter_.getListItemCount()-1}return this.adapter_.focusItemAtIndex(e),e},e.prototype.focusFirstElement=function(){return this.adapter_.focusItemAtIndex(0),0},e.prototype.focusLastElement=function(){var t=this.adapter_.getListItemCount()-1;return this.adapter_.focusItemAtIndex(t),t},e.prototype.preventDefaultEvent_=function(t){var e=(""+t.target.tagName).toLowerCase();-1===v.indexOf(e)&&t.preventDefault()},e.prototype.setSingleSelectionAtIndex_=function(t){if(this.selectedIndex_!==t){var e=f.LIST_ITEM_SELECTED_CLASS;this.useActivatedClass_&&(e=f.LIST_ITEM_ACTIVATED_CLASS),this.selectedIndex_!==d.UNSET_INDEX&&this.adapter_.removeClassForElementIndex(this.selectedIndex_,e),this.adapter_.addClassForElementIndex(t,e),this.setAriaForSingleSelectionAtIndex_(t),this.selectedIndex_=t}},e.prototype.setAriaForSingleSelectionAtIndex_=function(t){this.selectedIndex_===d.UNSET_INDEX&&(this.ariaCurrentAttrValue_=this.adapter_.getAttributeForElementIndex(t,h.ARIA_CURRENT));var e=null!==this.ariaCurrentAttrValue_,n=e?h.ARIA_CURRENT:h.ARIA_SELECTED;this.selectedIndex_!==d.UNSET_INDEX&&this.adapter_.setAttributeForElementIndex(this.selectedIndex_,n,"false");var i=e?this.ariaCurrentAttrValue_:"true";this.adapter_.setAttributeForElementIndex(t,n,i)},e.prototype.setRadioAtIndex_=function(t){this.adapter_.setCheckedCheckboxOrRadioAtIndex(t,!0),this.selectedIndex_!==d.UNSET_INDEX&&this.adapter_.setAttributeForElementIndex(this.selectedIndex_,h.ARIA_CHECKED,"false"),this.adapter_.setAttributeForElementIndex(t,h.ARIA_CHECKED,"true"),this.selectedIndex_=t},e.prototype.setCheckboxAtIndex_=function(t){for(var e=0;e<this.adapter_.getListItemCount();e++){var n=!1;t.indexOf(e)>=0&&(n=!0),this.adapter_.setCheckedCheckboxOrRadioAtIndex(e,n),this.adapter_.setAttributeForElementIndex(e,h.ARIA_CHECKED,n?"true":"false")}this.selectedIndex_=t},e.prototype.setTabindexAtIndex_=function(t){this.focusedItemIndex_===d.UNSET_INDEX&&0!==t?this.adapter_.setAttributeForElementIndex(0,"tabindex","-1"):this.focusedItemIndex_>=0&&this.focusedItemIndex_!==t&&this.adapter_.setAttributeForElementIndex(this.focusedItemIndex_,"tabindex","-1"),this.adapter_.setAttributeForElementIndex(t,"tabindex","0")},e.prototype.isSelectableList_=function(){return this.isSingleSelectionList_||this.isCheckboxList_||this.isRadioList_},e.prototype.setTabindexToFirstSelectedItem_=function(){var t=0;this.isSelectableList_()&&("number"==typeof this.selectedIndex_&&this.selectedIndex_!==d.UNSET_INDEX?t=this.selectedIndex_:this.selectedIndex_ instanceof Array&&this.selectedIndex_.length>0&&(t=this.selectedIndex_.reduce(function(t,e){return Math.min(t,e)}))),this.setTabindexAtIndex_(t)},e.prototype.isIndexValid_=function(t){var e=this;if(t instanceof Array){if(!this.isCheckboxList_)throw new Error("MDCListFoundation: Array of index is only supported for checkbox based list");return 0===t.length||t.some(function(t){return e.isIndexInRange_(t)})}if("number"==typeof t){if(this.isCheckboxList_)throw new Error("MDCListFoundation: Expected array of index for checkbox based list but got number: "+t);return this.isIndexInRange_(t)}return!1},e.prototype.isIndexInRange_=function(t){var e=this.adapter_.getListItemCount();return t>=0&&t<e},e.prototype.setSelectedIndexOnAction_=function(t,e){void 0===e&&(e=!0),this.isCheckboxList_?this.toggleCheckboxAtIndex_(t,e):this.setSelectedIndex(t)},e.prototype.toggleCheckboxAtIndex_=function(t,e){var n=this.adapter_.isCheckboxCheckedAtIndex(t);e&&(n=!n,this.adapter_.setCheckedCheckboxOrRadioAtIndex(t,n)),this.adapter_.setAttributeForElementIndex(t,h.ARIA_CHECKED,n?"true":"false");var i=this.selectedIndex_===d.UNSET_INDEX?[]:this.selectedIndex_.slice();n?i.push(t):i=i.filter(function(e){return e!==t}),this.selectedIndex_=i},e}(p.a),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.b(e,t),Object.defineProperty(e.prototype,"vertical",{set:function(t){this.foundation_.setVerticalOrientation(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"listElements",{get:function(){return[].slice.call(this.root_.querySelectorAll("."+f.LIST_ITEM_CLASS))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"wrapFocus",{set:function(t){this.foundation_.setWrapFocus(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"singleSelection",{set:function(t){this.foundation_.setSingleSelection(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"selectedIndex",{get:function(){return this.foundation_.getSelectedIndex()},set:function(t){this.foundation_.setSelectedIndex(t)},enumerable:!0,configurable:!0}),e.attachTo=function(t){return new e(t)},e.prototype.initialSyncWithDOM=function(){this.handleClick_=this.handleClickEvent_.bind(this),this.handleKeydown_=this.handleKeydownEvent_.bind(this),this.focusInEventListener_=this.handleFocusInEvent_.bind(this),this.focusOutEventListener_=this.handleFocusOutEvent_.bind(this),this.listen("keydown",this.handleKeydown_),this.listen("click",this.handleClick_),this.listen("focusin",this.focusInEventListener_),this.listen("focusout",this.focusOutEventListener_),this.layout(),this.initializeListType()},e.prototype.destroy=function(){this.unlisten("keydown",this.handleKeydown_),this.unlisten("click",this.handleClick_),this.unlisten("focusin",this.focusInEventListener_),this.unlisten("focusout",this.focusOutEventListener_)},e.prototype.layout=function(){var t=this.root_.getAttribute(h.ARIA_ORIENTATION);this.vertical=t!==h.ARIA_ORIENTATION_HORIZONTAL,[].slice.call(this.root_.querySelectorAll(".mdc-list-item:not([tabindex])")).forEach(function(t){t.setAttribute("tabindex","-1")}),[].slice.call(this.root_.querySelectorAll(h.FOCUSABLE_CHILD_ELEMENTS)).forEach(function(t){return t.setAttribute("tabindex","-1")}),this.foundation_.layout()},e.prototype.initializeListType=function(){var t=this,e=this.root_.querySelectorAll(h.ARIA_ROLE_CHECKBOX_SELECTOR),n=this.root_.querySelector("\n      ."+f.LIST_ITEM_ACTIVATED_CLASS+",\n      ."+f.LIST_ITEM_SELECTED_CLASS+"\n    "),i=this.root_.querySelector(h.ARIA_CHECKED_RADIO_SELECTOR);if(e.length){var r=this.root_.querySelectorAll(h.ARIA_CHECKED_CHECKBOX_SELECTOR);this.selectedIndex=[].map.call(r,function(e){return t.listElements.indexOf(e)})}else n?(n.classList.contains(f.LIST_ITEM_ACTIVATED_CLASS)&&this.foundation_.setUseActivatedClass(!0),this.singleSelection=!0,this.selectedIndex=this.listElements.indexOf(n)):i&&(this.selectedIndex=this.listElements.indexOf(i))},e.prototype.getDefaultFoundation=function(){var t=this;return new b({addClassForElementIndex:function(e,n){var i=t.listElements[e];i&&i.classList.add(n)},focusItemAtIndex:function(e){var n=t.listElements[e];n&&n.focus()},getAttributeForElementIndex:function(e,n){return t.listElements[e].getAttribute(n)},getFocusedElementIndex:function(){return t.listElements.indexOf(document.activeElement)},getListItemCount:function(){return t.listElements.length},hasCheckboxAtIndex:function(e){return!!t.listElements[e].querySelector(h.CHECKBOX_SELECTOR)},hasRadioAtIndex:function(e){return!!t.listElements[e].querySelector(h.RADIO_SELECTOR)},isCheckboxCheckedAtIndex:function(e){return t.listElements[e].querySelector(h.CHECKBOX_SELECTOR).checked},isFocusInsideList:function(){return t.root_.contains(document.activeElement)},isRootFocused:function(){return document.activeElement===t.root_},notifyAction:function(e){t.emit(h.ACTION_EVENT,{index:e},!0)},removeClassForElementIndex:function(e,n){var i=t.listElements[e];i&&i.classList.remove(n)},setAttributeForElementIndex:function(e,n,i){var r=t.listElements[e];r&&r.setAttribute(n,i)},setCheckedCheckboxOrRadioAtIndex:function(e,n){var i=t.listElements[e].querySelector(h.CHECKBOX_RADIO_SELECTOR);i.checked=n;var r=document.createEvent("Event");r.initEvent("change",!0,!0),i.dispatchEvent(r)},setTabIndexForListItemChildren:function(e,n){var i=t.listElements[e];[].slice.call(i.querySelectorAll(h.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX)).forEach(function(t){return t.setAttribute("tabindex",n)})}})},e.prototype.getListItemIndex_=function(t){var e=t.target,n=Object(l.a)(e,"."+f.LIST_ITEM_CLASS+", ."+f.ROOT);return n&&Object(l.b)(n,"."+f.LIST_ITEM_CLASS)?this.listElements.indexOf(n):-1},e.prototype.handleFocusInEvent_=function(t){var e=this.getListItemIndex_(t);this.foundation_.handleFocusIn(t,e)},e.prototype.handleFocusOutEvent_=function(t){var e=this.getListItemIndex_(t);this.foundation_.handleFocusOut(t,e)},e.prototype.handleKeydownEvent_=function(t){var e=this.getListItemIndex_(t),n=t.target;this.foundation_.handleKeydown(t,n.classList.contains(f.LIST_ITEM_CLASS),e)},e.prototype.handleClickEvent_=function(t){var e=this.getListItemIndex_(t),n=t.target,i=!Object(l.b)(n,h.CHECKBOX_RADIO_SELECTOR);this.foundation_.handleClick(e,i)},e}(c.a),g=function(t){function e(n){var i=t.call(this,a.a({},e.defaultAdapter,n))||this;return i.isOpen_=!1,i.isQuickOpen_=!1,i.isHoistedElement_=!1,i.isFixedPosition_=!1,i.openAnimationEndTimerId_=0,i.closeAnimationEndTimerId_=0,i.animationRequestId_=0,i.anchorCorner_=r.TOP_START,i.anchorMargin_={top:0,right:0,bottom:0,left:0},i.position_={x:0,y:0},i}return a.b(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return o},enumerable:!0,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return s},enumerable:!0,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return u},enumerable:!0,configurable:!0}),Object.defineProperty(e,"Corner",{get:function(){return r},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},hasAnchor:function(){return!1},isElementInContainer:function(){return!1},isFocused:function(){return!1},isFirstElementFocused:function(){return!1},isLastElementFocused:function(){return!1},isRtl:function(){return!1},getInnerDimensions:function(){return{height:0,width:0}},getAnchorDimensions:function(){return null},getWindowDimensions:function(){return{height:0,width:0}},getBodyDimensions:function(){return{height:0,width:0}},getWindowScroll:function(){return{x:0,y:0}},setPosition:function(){},setMaxHeight:function(){},setTransformOrigin:function(){},saveFocus:function(){},restoreFocus:function(){},focusFirstElement:function(){},focusLastElement:function(){},notifyClose:function(){},notifyOpen:function(){}}},enumerable:!0,configurable:!0}),e.prototype.init=function(){var t=e.cssClasses,n=t.ROOT,i=t.OPEN;if(!this.adapter_.hasClass(n))throw new Error(n+" class required in root element.");this.adapter_.hasClass(i)&&(this.isOpen_=!0)},e.prototype.destroy=function(){clearTimeout(this.openAnimationEndTimerId_),clearTimeout(this.closeAnimationEndTimerId_),cancelAnimationFrame(this.animationRequestId_)},e.prototype.setAnchorCorner=function(t){this.anchorCorner_=t},e.prototype.setAnchorMargin=function(t){this.anchorMargin_.top=t.top||0,this.anchorMargin_.right=t.right||0,this.anchorMargin_.bottom=t.bottom||0,this.anchorMargin_.left=t.left||0},e.prototype.setIsHoisted=function(t){this.isHoistedElement_=t},e.prototype.setFixedPosition=function(t){this.isFixedPosition_=t},e.prototype.setAbsolutePosition=function(t,e){this.position_.x=this.isFinite_(t)?t:0,this.position_.y=this.isFinite_(e)?e:0},e.prototype.setQuickOpen=function(t){this.isQuickOpen_=t},e.prototype.isOpen=function(){return this.isOpen_},e.prototype.open=function(){var t=this;this.adapter_.saveFocus(),this.isQuickOpen_||this.adapter_.addClass(e.cssClasses.ANIMATING_OPEN),this.animationRequestId_=requestAnimationFrame(function(){t.adapter_.addClass(e.cssClasses.OPEN),t.dimensions_=t.adapter_.getInnerDimensions(),t.autoPosition_(),t.isQuickOpen_?t.adapter_.notifyOpen():t.openAnimationEndTimerId_=setTimeout(function(){t.openAnimationEndTimerId_=0,t.adapter_.removeClass(e.cssClasses.ANIMATING_OPEN),t.adapter_.notifyOpen()},u.TRANSITION_OPEN_DURATION)}),this.isOpen_=!0},e.prototype.close=function(){var t=this;this.isQuickOpen_||this.adapter_.addClass(e.cssClasses.ANIMATING_CLOSED),requestAnimationFrame(function(){t.adapter_.removeClass(e.cssClasses.OPEN),t.isQuickOpen_?t.adapter_.notifyClose():t.closeAnimationEndTimerId_=setTimeout(function(){t.closeAnimationEndTimerId_=0,t.adapter_.removeClass(e.cssClasses.ANIMATING_CLOSED),t.adapter_.notifyClose()},u.TRANSITION_CLOSE_DURATION)}),this.isOpen_=!1,this.maybeRestoreFocus_()},e.prototype.handleBodyClick=function(t){var e=t.target;this.adapter_.isElementInContainer(e)||this.close()},e.prototype.handleKeydown=function(t){var e=t.keyCode,n=t.key,i=t.shiftKey,r="Tab"===n||9===e;"Escape"===n||27===e?this.close():r&&(this.adapter_.isLastElementFocused()&&!i?(this.adapter_.focusFirstElement(),t.preventDefault()):this.adapter_.isFirstElementFocused()&&i&&(this.adapter_.focusLastElement(),t.preventDefault()))},e.prototype.autoPosition_=function(){var t;this.measurements_=this.getAutoLayoutMeasurements_();var e=this.getOriginCorner_(),n=this.getMenuSurfaceMaxHeight_(e),r=this.hasBit_(e,i.BOTTOM)?"bottom":"top",o=this.hasBit_(e,i.RIGHT)?"right":"left",s=this.getHorizontalOriginOffset_(e),a=this.getVerticalOriginOffset_(e),c=this.measurements_,l=c.anchorSize,f=c.surfaceSize,h=((t={})[o]=s,t[r]=a,t);l.width/f.width>u.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO&&(o="center"),(this.isHoistedElement_||this.isFixedPosition_)&&this.adjustPositionForHoistedElement_(h),this.adapter_.setTransformOrigin(o+" "+r),this.adapter_.setPosition(h),this.adapter_.setMaxHeight(n?n+"px":"")},e.prototype.getAutoLayoutMeasurements_=function(){var t=this.adapter_.getAnchorDimensions(),e=this.adapter_.getBodyDimensions(),n=this.adapter_.getWindowDimensions(),i=this.adapter_.getWindowScroll();return t||(t={top:this.position_.y,right:this.position_.x,bottom:this.position_.y,left:this.position_.x,width:0,height:0}),{anchorSize:t,bodySize:e,surfaceSize:this.dimensions_,viewportDistance:{top:t.top,right:n.width-t.right,bottom:n.height-t.bottom,left:t.left},viewportSize:n,windowScroll:i}},e.prototype.getOriginCorner_=function(){var t=r.TOP_LEFT,e=this.measurements_,n=e.viewportDistance,o=e.anchorSize,s=e.surfaceSize,u=this.hasBit_(this.anchorCorner_,i.BOTTOM),a=u?n.top+o.height+this.anchorMargin_.bottom:n.top+this.anchorMargin_.top,c=u?n.bottom-this.anchorMargin_.bottom:n.bottom+o.height-this.anchorMargin_.top,l=s.height-a,f=s.height-c;f>0&&l<f&&(t=this.setBit_(t,i.BOTTOM));var h=this.adapter_.isRtl(),d=this.hasBit_(this.anchorCorner_,i.FLIP_RTL),p=this.hasBit_(this.anchorCorner_,i.RIGHT),v=p&&!h||!p&&d&&h,m=v?n.left+o.width+this.anchorMargin_.right:n.left+this.anchorMargin_.left,b=v?n.right-this.anchorMargin_.right:n.right+o.width-this.anchorMargin_.left,y=s.width-m,g=s.width-b;return(y<0&&v&&h||p&&!v&&y<0||g>0&&y<g)&&(t=this.setBit_(t,i.RIGHT)),t},e.prototype.getMenuSurfaceMaxHeight_=function(t){var n=this.measurements_.viewportDistance,r=0,o=this.hasBit_(t,i.BOTTOM),s=this.hasBit_(this.anchorCorner_,i.BOTTOM),u=e.numbers.MARGIN_TO_EDGE;return o?(r=n.top+this.anchorMargin_.top-u,s||(r+=this.measurements_.anchorSize.height)):(r=n.bottom-this.anchorMargin_.bottom+this.measurements_.anchorSize.height-u,s&&(r-=this.measurements_.anchorSize.height)),r},e.prototype.getHorizontalOriginOffset_=function(t){var e=this.measurements_.anchorSize,n=this.hasBit_(t,i.RIGHT),r=this.hasBit_(this.anchorCorner_,i.RIGHT);if(n){var o=r?e.width-this.anchorMargin_.left:this.anchorMargin_.right;return this.isHoistedElement_||this.isFixedPosition_?o-(this.measurements_.viewportSize.width-this.measurements_.bodySize.width):o}return r?e.width-this.anchorMargin_.right:this.anchorMargin_.left},e.prototype.getVerticalOriginOffset_=function(t){var e=this.measurements_.anchorSize,n=this.hasBit_(t,i.BOTTOM),r=this.hasBit_(this.anchorCorner_,i.BOTTOM);return n?r?e.height-this.anchorMargin_.top:-this.anchorMargin_.bottom:r?e.height+this.anchorMargin_.bottom:this.anchorMargin_.top},e.prototype.adjustPositionForHoistedElement_=function(t){var e,n,i=this.measurements_,r=i.windowScroll,o=i.viewportDistance,s=Object.keys(t);try{for(var u=a.d(s),c=u.next();!c.done;c=u.next()){var l=c.value,f=t[l]||0;f+=o[l],this.isFixedPosition_||("top"===l?f+=r.y:"bottom"===l?f-=r.y:"left"===l?f+=r.x:f-=r.x),t[l]=f}}catch(t){e={error:t}}finally{try{c&&!c.done&&(n=u.return)&&n.call(u)}finally{if(e)throw e.error}}},e.prototype.maybeRestoreFocus_=function(){var t=this.adapter_.isFocused(),e=document.activeElement&&this.adapter_.isElementInContainer(document.activeElement);(t||e)&&this.adapter_.restoreFocus()},e.prototype.hasBit_=function(t,e){return Boolean(t&e)},e.prototype.setBit_=function(t,e){return t|e},e.prototype.isFinite_=function(t){return"number"==typeof t&&isFinite(t)},e}(p.a);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var _,x=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.b(e,t),e.attachTo=function(t){return new e(t)},e.prototype.initialSyncWithDOM=function(){var t=this,e=this.root_.parentElement;this.anchorElement=e&&e.classList.contains(o.ANCHOR)?e:null,this.root_.classList.contains(o.FIXED)&&this.setFixedPosition(!0),this.handleKeydown_=function(e){return t.foundation_.handleKeydown(e)},this.handleBodyClick_=function(e){return t.foundation_.handleBodyClick(e)},this.registerBodyClickListener_=function(){return document.body.addEventListener("click",t.handleBodyClick_)},this.deregisterBodyClickListener_=function(){return document.body.removeEventListener("click",t.handleBodyClick_)},this.listen("keydown",this.handleKeydown_),this.listen(s.OPENED_EVENT,this.registerBodyClickListener_),this.listen(s.CLOSED_EVENT,this.deregisterBodyClickListener_)},e.prototype.destroy=function(){this.unlisten("keydown",this.handleKeydown_),this.unlisten(s.OPENED_EVENT,this.registerBodyClickListener_),this.unlisten(s.CLOSED_EVENT,this.deregisterBodyClickListener_),t.prototype.destroy.call(this)},Object.defineProperty(e.prototype,"open",{get:function(){return this.foundation_.isOpen()},set:function(t){if(t){var e=this.root_.querySelectorAll(s.FOCUSABLE_ELEMENTS);this.firstFocusableElement_=e[0],this.lastFocusableElement_=e[e.length-1],this.foundation_.open()}else this.foundation_.close()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"quickOpen",{set:function(t){this.foundation_.setQuickOpen(t)},enumerable:!0,configurable:!0}),e.prototype.hoistMenuToBody=function(){document.body.appendChild(this.root_),this.setIsHoisted(!0)},e.prototype.setIsHoisted=function(t){this.foundation_.setIsHoisted(t)},e.prototype.setMenuSurfaceAnchorElement=function(t){this.anchorElement=t},e.prototype.setFixedPosition=function(t){t?this.root_.classList.add(o.FIXED):this.root_.classList.remove(o.FIXED),this.foundation_.setFixedPosition(t)},e.prototype.setAbsolutePosition=function(t,e){this.foundation_.setAbsolutePosition(t,e),this.setIsHoisted(!0)},e.prototype.setAnchorCorner=function(t){this.foundation_.setAnchorCorner(t)},e.prototype.setAnchorMargin=function(t){this.foundation_.setAnchorMargin(t)},e.prototype.getDefaultFoundation=function(){var t=this;return new g({addClass:function(e){return t.root_.classList.add(e)},removeClass:function(e){return t.root_.classList.remove(e)},hasClass:function(e){return t.root_.classList.contains(e)},hasAnchor:function(){return!!t.anchorElement},notifyClose:function(){return t.emit(g.strings.CLOSED_EVENT,{})},notifyOpen:function(){return t.emit(g.strings.OPENED_EVENT,{})},isElementInContainer:function(e){return t.root_.contains(e)},isRtl:function(){return"rtl"===getComputedStyle(t.root_).getPropertyValue("direction")},setTransformOrigin:function(e){var n=function(t,e){if(void 0===e&&(e=!1),void 0===m||e){var n=t.document.createElement("div");m="transform"in n.style?"transform":"webkitTransform"}return m}(window)+"-origin";t.root_.style.setProperty(n,e)},isFocused:function(){return document.activeElement===t.root_},saveFocus:function(){t.previousFocus_=document.activeElement},restoreFocus:function(){t.root_.contains(document.activeElement)&&t.previousFocus_&&t.previousFocus_.focus&&t.previousFocus_.focus()},isFirstElementFocused:function(){return!!t.firstFocusableElement_&&t.firstFocusableElement_===document.activeElement},isLastElementFocused:function(){return!!t.lastFocusableElement_&&t.lastFocusableElement_===document.activeElement},focusFirstElement:function(){return t.firstFocusableElement_&&t.firstFocusableElement_.focus&&t.firstFocusableElement_.focus()},focusLastElement:function(){return t.lastFocusableElement_&&t.lastFocusableElement_.focus&&t.lastFocusableElement_.focus()},getInnerDimensions:function(){return{width:t.root_.offsetWidth,height:t.root_.offsetHeight}},getAnchorDimensions:function(){return t.anchorElement?t.anchorElement.getBoundingClientRect():null},getWindowDimensions:function(){return{width:window.innerWidth,height:window.innerHeight}},getBodyDimensions:function(){return{width:document.body.clientWidth,height:document.body.clientHeight}},getWindowScroll:function(){return{x:window.pageXOffset,y:window.pageYOffset}},setPosition:function(e){t.root_.style.left="left"in e?e.left+"px":"",t.root_.style.right="right"in e?e.right+"px":"",t.root_.style.top="top"in e?e.top+"px":"",t.root_.style.bottom="bottom"in e?e.bottom+"px":""},setMaxHeight:function(e){t.root_.style.maxHeight=e}})},e}(c.a),w={MENU_SELECTED_LIST_ITEM:"mdc-menu-item--selected",MENU_SELECTION_GROUP:"mdc-menu__selection-group",ROOT:"mdc-menu"},E={ARIA_SELECTED_ATTR:"aria-selected",CHECKBOX_SELECTOR:'input[type="checkbox"]',LIST_SELECTOR:".mdc-list",SELECTED_EVENT:"MDCMenu:selected"},T={FOCUS_ROOT_INDEX:-1};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */!function(t){t[t.NONE=0]="NONE",t[t.LIST_ROOT=1]="LIST_ROOT",t[t.FIRST_ITEM=2]="FIRST_ITEM",t[t.LAST_ITEM=3]="LAST_ITEM"}(_||(_={}));
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var S=function(t){function e(n){var i=t.call(this,a.a({},e.defaultAdapter,n))||this;return i.closeAnimationEndTimerId_=0,i.defaultFocusState_=_.LIST_ROOT,i}return a.b(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return w},enumerable:!0,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return E},enumerable:!0,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return T},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClassToElementAtIndex:function(){},removeClassFromElementAtIndex:function(){},addAttributeToElementAtIndex:function(){},removeAttributeFromElementAtIndex:function(){},elementContainsClass:function(){return!1},closeSurface:function(){},getElementIndex:function(){return-1},getParentElement:function(){return null},getSelectedElementIndex:function(){return-1},notifySelected:function(){},getMenuItemCount:function(){return 0},focusItemAtIndex:function(){},focusListRoot:function(){}}},enumerable:!0,configurable:!0}),e.prototype.destroy=function(){this.closeAnimationEndTimerId_&&clearTimeout(this.closeAnimationEndTimerId_),this.adapter_.closeSurface()},e.prototype.handleKeydown=function(t){var e=t.key,n=t.keyCode;("Tab"===e||9===n)&&this.adapter_.closeSurface()},e.prototype.handleItemAction=function(t){var e=this,n=this.adapter_.getElementIndex(t);n<0||(this.adapter_.notifySelected({index:n}),this.adapter_.closeSurface(),this.closeAnimationEndTimerId_=setTimeout(function(){var i=e.getSelectionGroup_(t);i&&e.handleSelectionGroup_(i,n)},g.numbers.TRANSITION_CLOSE_DURATION))},e.prototype.handleMenuSurfaceOpened=function(){switch(this.defaultFocusState_){case _.FIRST_ITEM:this.adapter_.focusItemAtIndex(0);break;case _.LAST_ITEM:this.adapter_.focusItemAtIndex(this.adapter_.getMenuItemCount()-1);break;case _.NONE:break;default:this.adapter_.focusListRoot()}},e.prototype.setDefaultFocusState=function(t){this.defaultFocusState_=t},e.prototype.handleSelectionGroup_=function(t,e){var n=this.adapter_.getSelectedElementIndex(t);n>=0&&(this.adapter_.removeAttributeFromElementAtIndex(n,E.ARIA_SELECTED_ATTR),this.adapter_.removeClassFromElementAtIndex(n,w.MENU_SELECTED_LIST_ITEM)),this.adapter_.addClassToElementAtIndex(e,w.MENU_SELECTED_LIST_ITEM),this.adapter_.addAttributeToElementAtIndex(e,E.ARIA_SELECTED_ATTR,"true")},e.prototype.getSelectionGroup_=function(t){var e=this.adapter_.getParentElement(t);if(!e)return null;for(var n=this.adapter_.elementContainsClass(e,w.MENU_SELECTION_GROUP);!n&&e&&!this.adapter_.elementContainsClass(e,b.cssClasses.ROOT);)n=!!(e=this.adapter_.getParentElement(e))&&this.adapter_.elementContainsClass(e,w.MENU_SELECTION_GROUP);return n?e:null},e}(p.a),C=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.b(e,t),e.attachTo=function(t){return new e(t)},e.prototype.initialize=function(t,e){void 0===t&&(t=function(t){return new x(t)}),void 0===e&&(e=function(t){return new y(t)}),this.menuSurfaceFactory_=t,this.listFactory_=e},e.prototype.initialSyncWithDOM=function(){var t=this;this.menuSurface_=this.menuSurfaceFactory_(this.root_);var e=this.root_.querySelector(E.LIST_SELECTOR);e?(this.list_=this.listFactory_(e),this.list_.wrapFocus=!0):this.list_=null,this.handleKeydown_=function(e){return t.foundation_.handleKeydown(e)},this.handleItemAction_=function(e){return t.foundation_.handleItemAction(t.items[e.detail.index])},this.handleMenuSurfaceOpened_=function(){return t.foundation_.handleMenuSurfaceOpened()},this.menuSurface_.listen(g.strings.OPENED_EVENT,this.handleMenuSurfaceOpened_),this.listen("keydown",this.handleKeydown_),this.listen(b.strings.ACTION_EVENT,this.handleItemAction_)},e.prototype.destroy=function(){this.list_&&this.list_.destroy(),this.menuSurface_.destroy(),this.menuSurface_.unlisten(g.strings.OPENED_EVENT,this.handleMenuSurfaceOpened_),this.unlisten("keydown",this.handleKeydown_),this.unlisten(b.strings.ACTION_EVENT,this.handleItemAction_),t.prototype.destroy.call(this)},Object.defineProperty(e.prototype,"open",{get:function(){return this.menuSurface_.open},set:function(t){this.menuSurface_.open=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"wrapFocus",{get:function(){return!!this.list_&&this.list_.wrapFocus},set:function(t){this.list_&&(this.list_.wrapFocus=t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"items",{get:function(){return this.list_?this.list_.listElements:[]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"quickOpen",{set:function(t){this.menuSurface_.quickOpen=t},enumerable:!0,configurable:!0}),e.prototype.setDefaultFocusState=function(t){this.foundation_.setDefaultFocusState(t)},e.prototype.setAnchorCorner=function(t){this.menuSurface_.setAnchorCorner(t)},e.prototype.setAnchorMargin=function(t){this.menuSurface_.setAnchorMargin(t)},e.prototype.getOptionByIndex=function(t){return t<this.items.length?this.items[t]:null},e.prototype.setFixedPosition=function(t){this.menuSurface_.setFixedPosition(t)},e.prototype.hoistMenuToBody=function(){this.menuSurface_.hoistMenuToBody()},e.prototype.setIsHoisted=function(t){this.menuSurface_.setIsHoisted(t)},e.prototype.setAbsolutePosition=function(t,e){this.menuSurface_.setAbsolutePosition(t,e)},e.prototype.setAnchorElement=function(t){this.menuSurface_.anchorElement=t},e.prototype.getDefaultFoundation=function(){var t=this;return new S({addClassToElementAtIndex:function(e,n){t.items[e].classList.add(n)},removeClassFromElementAtIndex:function(e,n){t.items[e].classList.remove(n)},addAttributeToElementAtIndex:function(e,n,i){t.items[e].setAttribute(n,i)},removeAttributeFromElementAtIndex:function(e,n){t.items[e].removeAttribute(n)},elementContainsClass:function(t,e){return t.classList.contains(e)},closeSurface:function(){return t.open=!1},getElementIndex:function(e){return t.items.indexOf(e)},getParentElement:function(t){return t.parentElement},getSelectedElementIndex:function(e){var n=e.querySelector("."+w.MENU_SELECTED_LIST_ITEM);return n?t.items.indexOf(n):-1},notifySelected:function(e){return t.emit(E.SELECTED_EVENT,{index:e.index,item:t.items[e.index]})},getMenuItemCount:function(){return t.items.length},focusItemAtIndex:function(e){return t.items[e].focus()},focusListRoot:function(){return t.root_.querySelector(E.LIST_SELECTOR).focus()}})},e}(c.a);n.d(e,"Corner",function(){return r}),n.d(e,"MDCMenu",function(){return C}),n.d(e,"cssClasses",function(){return w}),n.d(e,"strings",function(){return E}),n.d(e,"numbers",function(){return T}),n.d(e,"DefaultFocusState",function(){return _}),n.d(e,"MDCMenuFoundation",function(){return S})},function(t,e,n){"use strict";n.r(e);var i={};n.r(i),n.d(i,"createFocusTrapInstance",function(){return s}),n.d(i,"isScrollable",function(){return u}),n.d(i,"areTopsMisaligned",function(){return a});var r=n(85),o=n.n(r);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function s(t,e,n){return void 0===e&&(e=o.a),e(t,{clickOutsideDeactivates:!0,escapeDeactivates:!1,initialFocus:n})}function u(t){return!!t&&t.scrollHeight>t.offsetHeight}function a(t){var e=new Set;return[].forEach.call(t,function(t){return e.add(t.offsetTop)}),e.size>1}var c,l,f=n(0),h=n(30),d=n(35),p=n(21),v={BG_FOCUSED:"mdc-ripple-upgraded--background-focused",FG_ACTIVATION:"mdc-ripple-upgraded--foreground-activation",FG_DEACTIVATION:"mdc-ripple-upgraded--foreground-deactivation",ROOT:"mdc-ripple-upgraded",UNBOUNDED:"mdc-ripple-upgraded--unbounded"},m={VAR_FG_SCALE:"--mdc-ripple-fg-scale",VAR_FG_SIZE:"--mdc-ripple-fg-size",VAR_FG_TRANSLATE_END:"--mdc-ripple-fg-translate-end",VAR_FG_TRANSLATE_START:"--mdc-ripple-fg-translate-start",VAR_LEFT:"--mdc-ripple-left",VAR_TOP:"--mdc-ripple-top"},b={DEACTIVATION_TIMEOUT_MS:225,FG_DEACTIVATION_MS:150,INITIAL_ORIGIN_SCALE:.6,PADDING:10,TAP_DELAY_MS:300};function y(t,e){if(void 0===t&&(t=window),void 0===e&&(e=!1),void 0===l||e){var n=!1;try{t.document.addEventListener("test",function(){},{get passive(){return n=!0}})}catch(t){}l=n}return!!l&&{passive:!0}}
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var g=["touchstart","pointerdown","mousedown","keydown"],_=["touchend","pointerup","mouseup","contextmenu"],x=[],w=function(t){function e(n){var i=t.call(this,f.a({},e.defaultAdapter,n))||this;return i.activationAnimationHasEnded_=!1,i.activationTimer_=0,i.fgDeactivationRemovalTimer_=0,i.fgScale_="0",i.frame_={width:0,height:0},i.initialSize_=0,i.layoutFrame_=0,i.maxRadius_=0,i.unboundedCoords_={left:0,top:0},i.activationState_=i.defaultActivationState_(),i.activationTimerCallback_=function(){i.activationAnimationHasEnded_=!0,i.runDeactivationUXLogicIfReady_()},i.activateHandler_=function(t){return i.activate_(t)},i.deactivateHandler_=function(){return i.deactivate_()},i.focusHandler_=function(){return i.handleFocus()},i.blurHandler_=function(){return i.handleBlur()},i.resizeHandler_=function(){return i.layout()},i}return f.b(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return v},enumerable:!0,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return m},enumerable:!0,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return b},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},browserSupportsCssVars:function(){return!0},computeBoundingRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},containsEventTarget:function(){return!0},deregisterDocumentInteractionHandler:function(){},deregisterInteractionHandler:function(){},deregisterResizeHandler:function(){},getWindowPageOffset:function(){return{x:0,y:0}},isSurfaceActive:function(){return!0},isSurfaceDisabled:function(){return!0},isUnbounded:function(){return!0},registerDocumentInteractionHandler:function(){},registerInteractionHandler:function(){},registerResizeHandler:function(){},removeClass:function(){},updateCssVariable:function(){}}},enumerable:!0,configurable:!0}),e.prototype.init=function(){var t=this,n=this.supportsPressRipple_();if(this.registerRootHandlers_(n),n){var i=e.cssClasses,r=i.ROOT,o=i.UNBOUNDED;requestAnimationFrame(function(){t.adapter_.addClass(r),t.adapter_.isUnbounded()&&(t.adapter_.addClass(o),t.layoutInternal_())})}},e.prototype.destroy=function(){var t=this;if(this.supportsPressRipple_()){this.activationTimer_&&(clearTimeout(this.activationTimer_),this.activationTimer_=0,this.adapter_.removeClass(e.cssClasses.FG_ACTIVATION)),this.fgDeactivationRemovalTimer_&&(clearTimeout(this.fgDeactivationRemovalTimer_),this.fgDeactivationRemovalTimer_=0,this.adapter_.removeClass(e.cssClasses.FG_DEACTIVATION));var n=e.cssClasses,i=n.ROOT,r=n.UNBOUNDED;requestAnimationFrame(function(){t.adapter_.removeClass(i),t.adapter_.removeClass(r),t.removeCssVars_()})}this.deregisterRootHandlers_(),this.deregisterDeactivationHandlers_()},e.prototype.activate=function(t){this.activate_(t)},e.prototype.deactivate=function(){this.deactivate_()},e.prototype.layout=function(){var t=this;this.layoutFrame_&&cancelAnimationFrame(this.layoutFrame_),this.layoutFrame_=requestAnimationFrame(function(){t.layoutInternal_(),t.layoutFrame_=0})},e.prototype.setUnbounded=function(t){var n=e.cssClasses.UNBOUNDED;t?this.adapter_.addClass(n):this.adapter_.removeClass(n)},e.prototype.handleFocus=function(){var t=this;requestAnimationFrame(function(){return t.adapter_.addClass(e.cssClasses.BG_FOCUSED)})},e.prototype.handleBlur=function(){var t=this;requestAnimationFrame(function(){return t.adapter_.removeClass(e.cssClasses.BG_FOCUSED)})},e.prototype.supportsPressRipple_=function(){return this.adapter_.browserSupportsCssVars()},e.prototype.defaultActivationState_=function(){return{activationEvent:void 0,hasDeactivationUXRun:!1,isActivated:!1,isProgrammatic:!1,wasActivatedByPointer:!1,wasElementMadeActive:!1}},e.prototype.registerRootHandlers_=function(t){var e=this;t&&(g.forEach(function(t){e.adapter_.registerInteractionHandler(t,e.activateHandler_)}),this.adapter_.isUnbounded()&&this.adapter_.registerResizeHandler(this.resizeHandler_)),this.adapter_.registerInteractionHandler("focus",this.focusHandler_),this.adapter_.registerInteractionHandler("blur",this.blurHandler_)},e.prototype.registerDeactivationHandlers_=function(t){var e=this;"keydown"===t.type?this.adapter_.registerInteractionHandler("keyup",this.deactivateHandler_):_.forEach(function(t){e.adapter_.registerDocumentInteractionHandler(t,e.deactivateHandler_)})},e.prototype.deregisterRootHandlers_=function(){var t=this;g.forEach(function(e){t.adapter_.deregisterInteractionHandler(e,t.activateHandler_)}),this.adapter_.deregisterInteractionHandler("focus",this.focusHandler_),this.adapter_.deregisterInteractionHandler("blur",this.blurHandler_),this.adapter_.isUnbounded()&&this.adapter_.deregisterResizeHandler(this.resizeHandler_)},e.prototype.deregisterDeactivationHandlers_=function(){var t=this;this.adapter_.deregisterInteractionHandler("keyup",this.deactivateHandler_),_.forEach(function(e){t.adapter_.deregisterDocumentInteractionHandler(e,t.deactivateHandler_)})},e.prototype.removeCssVars_=function(){var t=this,n=e.strings;Object.keys(n).forEach(function(e){0===e.indexOf("VAR_")&&t.adapter_.updateCssVariable(n[e],null)})},e.prototype.activate_=function(t){var e=this;if(!this.adapter_.isSurfaceDisabled()){var n=this.activationState_;if(!n.isActivated){var i=this.previousActivationEvent_;if(!(i&&void 0!==t&&i.type!==t.type))n.isActivated=!0,n.isProgrammatic=void 0===t,n.activationEvent=t,n.wasActivatedByPointer=!n.isProgrammatic&&(void 0!==t&&("mousedown"===t.type||"touchstart"===t.type||"pointerdown"===t.type)),void 0!==t&&x.length>0&&x.some(function(t){return e.adapter_.containsEventTarget(t)})?this.resetActivationState_():(void 0!==t&&(x.push(t.target),this.registerDeactivationHandlers_(t)),n.wasElementMadeActive=this.checkElementMadeActive_(t),n.wasElementMadeActive&&this.animateActivation_(),requestAnimationFrame(function(){x=[],n.wasElementMadeActive||void 0===t||" "!==t.key&&32!==t.keyCode||(n.wasElementMadeActive=e.checkElementMadeActive_(t),n.wasElementMadeActive&&e.animateActivation_()),n.wasElementMadeActive||(e.activationState_=e.defaultActivationState_())}))}}},e.prototype.checkElementMadeActive_=function(t){return void 0===t||"keydown"!==t.type||this.adapter_.isSurfaceActive()},e.prototype.animateActivation_=function(){var t=this,n=e.strings,i=n.VAR_FG_TRANSLATE_START,r=n.VAR_FG_TRANSLATE_END,o=e.cssClasses,s=o.FG_DEACTIVATION,u=o.FG_ACTIVATION,a=e.numbers.DEACTIVATION_TIMEOUT_MS;this.layoutInternal_();var c="",l="";if(!this.adapter_.isUnbounded()){var f=this.getFgTranslationCoordinates_(),h=f.startPoint,d=f.endPoint;c=h.x+"px, "+h.y+"px",l=d.x+"px, "+d.y+"px"}this.adapter_.updateCssVariable(i,c),this.adapter_.updateCssVariable(r,l),clearTimeout(this.activationTimer_),clearTimeout(this.fgDeactivationRemovalTimer_),this.rmBoundedActivationClasses_(),this.adapter_.removeClass(s),this.adapter_.computeBoundingRect(),this.adapter_.addClass(u),this.activationTimer_=setTimeout(function(){return t.activationTimerCallback_()},a)},e.prototype.getFgTranslationCoordinates_=function(){var t,e=this.activationState_,n=e.activationEvent;return{startPoint:t={x:(t=e.wasActivatedByPointer?function(t,e,n){if(!t)return{x:0,y:0};var i,r,o=e.x,s=e.y,u=o+n.left,a=s+n.top;if("touchstart"===t.type){var c=t;i=c.changedTouches[0].pageX-u,r=c.changedTouches[0].pageY-a}else{var l=t;i=l.pageX-u,r=l.pageY-a}return{x:i,y:r}}(n,this.adapter_.getWindowPageOffset(),this.adapter_.computeBoundingRect()):{x:this.frame_.width/2,y:this.frame_.height/2}).x-this.initialSize_/2,y:t.y-this.initialSize_/2},endPoint:{x:this.frame_.width/2-this.initialSize_/2,y:this.frame_.height/2-this.initialSize_/2}}},e.prototype.runDeactivationUXLogicIfReady_=function(){var t=this,n=e.cssClasses.FG_DEACTIVATION,i=this.activationState_,r=i.hasDeactivationUXRun,o=i.isActivated;(r||!o)&&this.activationAnimationHasEnded_&&(this.rmBoundedActivationClasses_(),this.adapter_.addClass(n),this.fgDeactivationRemovalTimer_=setTimeout(function(){t.adapter_.removeClass(n)},b.FG_DEACTIVATION_MS))},e.prototype.rmBoundedActivationClasses_=function(){var t=e.cssClasses.FG_ACTIVATION;this.adapter_.removeClass(t),this.activationAnimationHasEnded_=!1,this.adapter_.computeBoundingRect()},e.prototype.resetActivationState_=function(){var t=this;this.previousActivationEvent_=this.activationState_.activationEvent,this.activationState_=this.defaultActivationState_(),setTimeout(function(){return t.previousActivationEvent_=void 0},e.numbers.TAP_DELAY_MS)},e.prototype.deactivate_=function(){var t=this,e=this.activationState_;if(e.isActivated){var n=f.a({},e);e.isProgrammatic?(requestAnimationFrame(function(){return t.animateDeactivation_(n)}),this.resetActivationState_()):(this.deregisterDeactivationHandlers_(),requestAnimationFrame(function(){t.activationState_.hasDeactivationUXRun=!0,t.animateDeactivation_(n),t.resetActivationState_()}))}},e.prototype.animateDeactivation_=function(t){var e=t.wasActivatedByPointer,n=t.wasElementMadeActive;(e||n)&&this.runDeactivationUXLogicIfReady_()},e.prototype.layoutInternal_=function(){var t=this;this.frame_=this.adapter_.computeBoundingRect();var n=Math.max(this.frame_.height,this.frame_.width);this.maxRadius_=this.adapter_.isUnbounded()?n:Math.sqrt(Math.pow(t.frame_.width,2)+Math.pow(t.frame_.height,2))+e.numbers.PADDING,this.initialSize_=Math.floor(n*e.numbers.INITIAL_ORIGIN_SCALE),this.fgScale_=""+this.maxRadius_/this.initialSize_,this.updateLayoutCssVars_()},e.prototype.updateLayoutCssVars_=function(){var t=e.strings,n=t.VAR_FG_SIZE,i=t.VAR_LEFT,r=t.VAR_TOP,o=t.VAR_FG_SCALE;this.adapter_.updateCssVariable(n,this.initialSize_+"px"),this.adapter_.updateCssVariable(o,this.fgScale_),this.adapter_.isUnbounded()&&(this.unboundedCoords_={left:Math.round(this.frame_.width/2-this.initialSize_/2),top:Math.round(this.frame_.height/2-this.initialSize_/2)},this.adapter_.updateCssVariable(i,this.unboundedCoords_.left+"px"),this.adapter_.updateCssVariable(r,this.unboundedCoords_.top+"px"))},e}(p.a),E=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.disabled=!1,e}return f.b(e,t),e.attachTo=function(t,n){void 0===n&&(n={isUnbounded:void 0});var i=new e(t);return void 0!==n.isUnbounded&&(i.unbounded=n.isUnbounded),i},e.createAdapter=function(t){return{addClass:function(e){return t.root_.classList.add(e)},browserSupportsCssVars:function(){return function(t,e){void 0===e&&(e=!1);var n=t.CSS,i=c;if("boolean"==typeof c&&!e)return c;if(!n||"function"!=typeof n.supports)return!1;var r=n.supports("--css-vars","yes"),o=n.supports("(--css-vars: yes)")&&n.supports("color","#00000000");return i=!(!r&&!o||function(t){var e=t.document,n=e.createElement("div");n.className="mdc-ripple-surface--test-edge-var-bug",e.body.appendChild(n);var i=t.getComputedStyle(n),r=null!==i&&"solid"===i.borderTopStyle;return n.parentNode&&n.parentNode.removeChild(n),r}(t)),e||(c=i),i}(window)},computeBoundingRect:function(){return t.root_.getBoundingClientRect()},containsEventTarget:function(e){return t.root_.contains(e)},deregisterDocumentInteractionHandler:function(t,e){return document.documentElement.removeEventListener(t,e,y())},deregisterInteractionHandler:function(e,n){return t.root_.removeEventListener(e,n,y())},deregisterResizeHandler:function(t){return window.removeEventListener("resize",t)},getWindowPageOffset:function(){return{x:window.pageXOffset,y:window.pageYOffset}},isSurfaceActive:function(){return Object(d.b)(t.root_,":active")},isSurfaceDisabled:function(){return Boolean(t.disabled)},isUnbounded:function(){return Boolean(t.unbounded)},registerDocumentInteractionHandler:function(t,e){return document.documentElement.addEventListener(t,e,y())},registerInteractionHandler:function(e,n){return t.root_.addEventListener(e,n,y())},registerResizeHandler:function(t){return window.addEventListener("resize",t)},removeClass:function(e){return t.root_.classList.remove(e)},updateCssVariable:function(e,n){return t.root_.style.setProperty(e,n)}}},Object.defineProperty(e.prototype,"unbounded",{get:function(){return Boolean(this.unbounded_)},set:function(t){this.unbounded_=Boolean(t),this.setUnbounded_()},enumerable:!0,configurable:!0}),e.prototype.activate=function(){this.foundation_.activate()},e.prototype.deactivate=function(){this.foundation_.deactivate()},e.prototype.layout=function(){this.foundation_.layout()},e.prototype.getDefaultFoundation=function(){return new w(e.createAdapter(this))},e.prototype.initialSyncWithDOM=function(){var t=this.root_;this.unbounded="mdcRippleIsUnbounded"in t.dataset},e.prototype.setUnbounded_=function(){this.foundation_.setUnbounded(Boolean(this.unbounded_))},e}(h.a),T={CLOSING:"mdc-dialog--closing",OPEN:"mdc-dialog--open",OPENING:"mdc-dialog--opening",SCROLLABLE:"mdc-dialog--scrollable",SCROLL_LOCK:"mdc-dialog-scroll-lock",STACKED:"mdc-dialog--stacked"},S={ACTION_ATTRIBUTE:"data-mdc-dialog-action",BUTTON_SELECTOR:".mdc-dialog__button",CLOSED_EVENT:"MDCDialog:closed",CLOSE_ACTION:"close",CLOSING_EVENT:"MDCDialog:closing",CONTAINER_SELECTOR:".mdc-dialog__container",CONTENT_SELECTOR:".mdc-dialog__content",DEFAULT_BUTTON_SELECTOR:".mdc-dialog__button--default",DESTROY_ACTION:"destroy",OPENED_EVENT:"MDCDialog:opened",OPENING_EVENT:"MDCDialog:opening",SCRIM_SELECTOR:".mdc-dialog__scrim",SUPPRESS_DEFAULT_PRESS_SELECTOR:["textarea",".mdc-menu .mdc-list-item"].join(", "),SURFACE_SELECTOR:".mdc-dialog__surface"},C={DIALOG_ANIMATION_CLOSE_TIME_MS:75,DIALOG_ANIMATION_OPEN_TIME_MS:150},O=function(t){function e(n){var i=t.call(this,f.a({},e.defaultAdapter,n))||this;return i.isOpen_=!1,i.animationFrame_=0,i.animationTimer_=0,i.layoutFrame_=0,i.escapeKeyAction_=S.CLOSE_ACTION,i.scrimClickAction_=S.CLOSE_ACTION,i.autoStackButtons_=!0,i.areButtonsStacked_=!1,i}return f.b(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return T},enumerable:!0,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return S},enumerable:!0,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return C},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addBodyClass:function(){},addClass:function(){},areButtonsStacked:function(){return!1},clickDefaultButton:function(){},eventTargetMatches:function(){return!1},getActionFromEvent:function(){return""},hasClass:function(){return!1},isContentScrollable:function(){return!1},notifyClosed:function(){},notifyClosing:function(){},notifyOpened:function(){},notifyOpening:function(){},releaseFocus:function(){},removeBodyClass:function(){},removeClass:function(){},reverseButtons:function(){},trapFocus:function(){}}},enumerable:!0,configurable:!0}),e.prototype.init=function(){this.adapter_.hasClass(T.STACKED)&&this.setAutoStackButtons(!1)},e.prototype.destroy=function(){this.isOpen_&&this.close(S.DESTROY_ACTION),this.animationTimer_&&(clearTimeout(this.animationTimer_),this.handleAnimationTimerEnd_()),this.layoutFrame_&&(cancelAnimationFrame(this.layoutFrame_),this.layoutFrame_=0)},e.prototype.open=function(){var t=this;this.isOpen_=!0,this.adapter_.notifyOpening(),this.adapter_.addClass(T.OPENING),this.runNextAnimationFrame_(function(){t.adapter_.addClass(T.OPEN),t.adapter_.addBodyClass(T.SCROLL_LOCK),t.layout(),t.animationTimer_=setTimeout(function(){t.handleAnimationTimerEnd_(),t.adapter_.trapFocus(),t.adapter_.notifyOpened()},C.DIALOG_ANIMATION_OPEN_TIME_MS)})},e.prototype.close=function(t){var e=this;void 0===t&&(t=""),this.isOpen_&&(this.isOpen_=!1,this.adapter_.notifyClosing(t),this.adapter_.addClass(T.CLOSING),this.adapter_.removeClass(T.OPEN),this.adapter_.removeBodyClass(T.SCROLL_LOCK),cancelAnimationFrame(this.animationFrame_),this.animationFrame_=0,clearTimeout(this.animationTimer_),this.animationTimer_=setTimeout(function(){e.adapter_.releaseFocus(),e.handleAnimationTimerEnd_(),e.adapter_.notifyClosed(t)},C.DIALOG_ANIMATION_CLOSE_TIME_MS))},e.prototype.isOpen=function(){return this.isOpen_},e.prototype.getEscapeKeyAction=function(){return this.escapeKeyAction_},e.prototype.setEscapeKeyAction=function(t){this.escapeKeyAction_=t},e.prototype.getScrimClickAction=function(){return this.scrimClickAction_},e.prototype.setScrimClickAction=function(t){this.scrimClickAction_=t},e.prototype.getAutoStackButtons=function(){return this.autoStackButtons_},e.prototype.setAutoStackButtons=function(t){this.autoStackButtons_=t},e.prototype.layout=function(){var t=this;this.layoutFrame_&&cancelAnimationFrame(this.layoutFrame_),this.layoutFrame_=requestAnimationFrame(function(){t.layoutInternal_(),t.layoutFrame_=0})},e.prototype.handleInteraction=function(t){var e="click"===t.type,n="Enter"===t.key||13===t.keyCode,i="Space"===t.key||32===t.keyCode,r=this.adapter_.eventTargetMatches(t.target,S.SCRIM_SELECTOR),o=!this.adapter_.eventTargetMatches(t.target,S.SUPPRESS_DEFAULT_PRESS_SELECTOR);if(e&&r&&""!==this.scrimClickAction_)this.close(this.scrimClickAction_);else if(e||i||n){var s=this.adapter_.getActionFromEvent(t);s?this.close(s):n&&o&&this.adapter_.clickDefaultButton()}},e.prototype.handleDocumentKeydown=function(t){("Escape"===t.key||27===t.keyCode)&&""!==this.escapeKeyAction_&&this.close(this.escapeKeyAction_)},e.prototype.layoutInternal_=function(){this.autoStackButtons_&&this.detectStackedButtons_(),this.detectScrollableContent_()},e.prototype.handleAnimationTimerEnd_=function(){this.animationTimer_=0,this.adapter_.removeClass(T.OPENING),this.adapter_.removeClass(T.CLOSING)},e.prototype.runNextAnimationFrame_=function(t){var e=this;cancelAnimationFrame(this.animationFrame_),this.animationFrame_=requestAnimationFrame(function(){e.animationFrame_=0,clearTimeout(e.animationTimer_),e.animationTimer_=setTimeout(t,0)})},e.prototype.detectStackedButtons_=function(){this.adapter_.removeClass(T.STACKED);var t=this.adapter_.areButtonsStacked();t&&this.adapter_.addClass(T.STACKED),t!==this.areButtonsStacked_&&(this.adapter_.reverseButtons(),this.areButtonsStacked_=t)},e.prototype.detectScrollableContent_=function(){this.adapter_.removeClass(T.SCROLLABLE),this.adapter_.isContentScrollable()&&this.adapter_.addClass(T.SCROLLABLE)},e}(p.a),I=O.strings,A=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f.b(e,t),Object.defineProperty(e.prototype,"isOpen",{get:function(){return this.foundation_.isOpen()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"escapeKeyAction",{get:function(){return this.foundation_.getEscapeKeyAction()},set:function(t){this.foundation_.setEscapeKeyAction(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"scrimClickAction",{get:function(){return this.foundation_.getScrimClickAction()},set:function(t){this.foundation_.setScrimClickAction(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"autoStackButtons",{get:function(){return this.foundation_.getAutoStackButtons()},set:function(t){this.foundation_.setAutoStackButtons(t)},enumerable:!0,configurable:!0}),e.attachTo=function(t){return new e(t)},e.prototype.initialize=function(t,e){var n,i,r=this.root_.querySelector(I.CONTAINER_SELECTOR);if(!r)throw new Error("Dialog component requires a "+I.CONTAINER_SELECTOR+" container element");this.container_=r,this.content_=this.root_.querySelector(I.CONTENT_SELECTOR),this.buttons_=[].slice.call(this.root_.querySelectorAll(I.BUTTON_SELECTOR)),this.defaultButton_=this.root_.querySelector(I.DEFAULT_BUTTON_SELECTOR),this.focusTrapFactory_=t,this.initialFocusEl_=e,this.buttonRipples_=[];try{for(var o=f.d(this.buttons_),s=o.next();!s.done;s=o.next()){var u=s.value;this.buttonRipples_.push(new E(u))}}catch(t){n={error:t}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}},e.prototype.initialSyncWithDOM=function(){var t=this;this.focusTrap_=s(this.container_,this.focusTrapFactory_,this.initialFocusEl_),this.handleInteraction_=this.foundation_.handleInteraction.bind(this.foundation_),this.handleDocumentKeydown_=this.foundation_.handleDocumentKeydown.bind(this.foundation_),this.handleLayout_=this.layout.bind(this);var e=["resize","orientationchange"];this.handleOpening_=function(){e.forEach(function(e){return window.addEventListener(e,t.handleLayout_)}),document.addEventListener("keydown",t.handleDocumentKeydown_)},this.handleClosing_=function(){e.forEach(function(e){return window.removeEventListener(e,t.handleLayout_)}),document.removeEventListener("keydown",t.handleDocumentKeydown_)},this.listen("click",this.handleInteraction_),this.listen("keydown",this.handleInteraction_),this.listen(I.OPENING_EVENT,this.handleOpening_),this.listen(I.CLOSING_EVENT,this.handleClosing_)},e.prototype.destroy=function(){this.unlisten("click",this.handleInteraction_),this.unlisten("keydown",this.handleInteraction_),this.unlisten(I.OPENING_EVENT,this.handleOpening_),this.unlisten(I.CLOSING_EVENT,this.handleClosing_),this.handleClosing_(),this.buttonRipples_.forEach(function(t){return t.destroy()}),t.prototype.destroy.call(this)},e.prototype.layout=function(){this.foundation_.layout()},e.prototype.open=function(){this.foundation_.open()},e.prototype.close=function(t){void 0===t&&(t=""),this.foundation_.close(t)},e.prototype.getDefaultFoundation=function(){var t=this;return new O({addBodyClass:function(t){return document.body.classList.add(t)},addClass:function(e){return t.root_.classList.add(e)},areButtonsStacked:function(){return a(t.buttons_)},clickDefaultButton:function(){return t.defaultButton_&&t.defaultButton_.click()},eventTargetMatches:function(t,e){return!!t&&Object(d.b)(t,e)},getActionFromEvent:function(t){if(!t.target)return"";var e=Object(d.a)(t.target,"["+I.ACTION_ATTRIBUTE+"]");return e&&e.getAttribute(I.ACTION_ATTRIBUTE)},hasClass:function(e){return t.root_.classList.contains(e)},isContentScrollable:function(){return u(t.content_)},notifyClosed:function(e){return t.emit(I.CLOSED_EVENT,e?{action:e}:{})},notifyClosing:function(e){return t.emit(I.CLOSING_EVENT,e?{action:e}:{})},notifyOpened:function(){return t.emit(I.OPENED_EVENT,{})},notifyOpening:function(){return t.emit(I.OPENING_EVENT,{})},releaseFocus:function(){return t.focusTrap_.deactivate()},removeBodyClass:function(t){return document.body.classList.remove(t)},removeClass:function(e){return t.root_.classList.remove(e)},reverseButtons:function(){t.buttons_.reverse(),t.buttons_.forEach(function(t){t.parentElement.appendChild(t)})},trapFocus:function(){return t.focusTrap_.activate()}})},e}(h.a);n.d(e,"util",function(){return i}),n.d(e,"MDCDialog",function(){return A}),n.d(e,"cssClasses",function(){return T}),n.d(e,"strings",function(){return S}),n.d(e,"numbers",function(){return C}),n.d(e,"MDCDialogFoundation",function(){return O})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,